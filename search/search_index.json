{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"(function(c,l,a,r,i,t,y){ c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)}; t=l.createElement(r);t.async=1;t.src=\"https://www.clarity.ms/tag/\"+i; y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y); })(window, document, \"clarity\", \"script\", \"dfh6fjbr5x\"); Microsoft Teams App Camp On Demand Migrate applications into Microsoft Teams Welcome to App Camp! In this on-demand workshop, you'll learn how to build Teams applications without special tools, which is important for developers who already have an application they want to extend into Microsoft Teams, or for developers who have a specific toolchain in mind. If you're starting a new application and you're open to building a React application with NodeJS/Express support, we recommend you use the Teams Toolkit . This web site will guide you through a set of videos and hands-on lab exercises in which you will port a simple web application to being a full-featured Teams application. The initial core labs will bring the web application into Teams as a personal tab with Azure AD Single Sign-on. Then the \"extended\" labs are available to teach you how to add features such as message extensions, adaptive cards, deep linking, and more. One of the extended labs even shows you how to monetize your application in the Teams app store! Video Briefings These videos will help you understand the business of Teams applications, and will lay a foundation for understanding the technical aspects of the labs. You don't need to watch them in order to complete the labs, but they will help you understand. Video Briefings Welcome to Microsoft Teams App Camp! Business Briefing What's the business case for building Teams applications? How can putting your app in the Teams app store generate revenue for you? What benefits does Microsoft offer ISV's who build Teams applications? How will my application appear to Teams users, and how will it help them? These questions and more are answered in these videos. Opportunity for Startups to Build and Grow on Microsoft Teams Microsoft Teams Marketplace Strategy Buying a Teams application Teams app capabilities with doodles! Success story: DecisionPoint brings conversational BI to Teams Success story: My Serious Game brings their EdMill app to Teams For more video case studies about successful Teams apps, please visit the Modern Work ISV Program page. Technical Briefing: Building your Teams application These videos will help you understand how Teams applications and Azure AD SSO work, so you can better understand the labs as you do them. Get started building Microsoft Teams apps Understanding Single Sign-On (SSO) with Azure AD Multi-tenant architecture for SaaS apps with Microsoft 365 and Azure Active Directory Technical Briefing: Monetizing your Teams application These videos explain the Microsoft Commercial Marketplace and how to integrate your application with the ecommerce system that drives it 5 Steps to monetize your Teams application Anatomy of a SaaS Application Publish your app in the Microsoft Teams app store Lab videos If you'd like to watch the labs before doing them, they are here. They're also posted at the beginning of each lab. The instructions should stand on their own - you don't need to watch in order to complete the labs - but they can help if you get stuck or want to understand the labs more deeply. Start with the \"core application\" Lab A01: Start with a simple web app that uses Azure AD Lab A02: Create a Teams app with Azure AD Single Sign-On Lab A03: Teams styling and themes Use this alternative path if you want to learn how to integrate an identity system other than Azure Active Directory: Labs B01-B04: Linking your identity system to Azure AD SSO Extended labs: Choose your own adventure! Configurable Tab Deep Links Add a Dialog Add a Message Extension with Adaptive Cards Add Monetization Key learning resource For a complete on-demand workshop focused on Commercial Marketplace, complete with hands-on labs and videos, please visit Mastering the Marketplace. Monetized Teams Store Apps are \"SaaS Offers\", so the link will bring you directly into that section of the training. It's lab time! In this series of labs, you will port a simple \"Northwind Orders\" web application to become a full-fledged Microsoft Teams application. The core labs will show you how to make the web application into a Teams application with a personal tab and Azure AD Single Sign-on. From there, you can choose extended labs depending on the features you need in your application. After completing each lab, the solution will still work as the original stand-alone web application as well as in Microsoft Teams. This is intended to show how to extend an existing SaaS application into Microsoft Teams without disrupting non-Teams other users. Tip If in doubt, start here ! \ud83d\udeb6\ud83c\udfff\ud83d\udeb6\ud83c\udffd\u200d\u2640\ufe0f\ud83d\udeb6 To make the app understandable by a wide audience, it is written in vanilla JavaScript with no UI framework, however it does use modern browser capabilities such as web components, CSS variables, and ECMAScript modules. The server side is also in plain JavaScript, using Express , the most popular web server platform for NodeJS. While the code is not production quality, the writers tried to follow best practices with respect to the various API's and SDK's in use, or to call out any exceptions in comments. As for things like robust exception handling, unit testing, build pipeline, etc., those are left to you, the developer; you probably already have a setup you want to use anyway. Lab Prerequisites \ud83d\udcc3 The labs are intended for developers. Most of the labs don't assume a lot of specialized knowledge; coding is in modern JavaScript without use of specialized frameworks or libraries. But if you're not comfortable with coding, you may find it a bit challenging. The idea is to teach developers the principles so they can apply them to their choice of toolsets. To complete the labs you will need: A computer with permission to install software (Windows, Mac, or Linux) NodeJS A code editor such as Visual Studio Code ngrok to simplify local debugging and allow debugging of bots and message extensions A Microsoft 365 tenant (available free!) Installation instructions are part of the first lab ; additional details are here in the repo wiki Tip DON'T DEVELOP IN PRODUCTION It may be tempting to do labs or build solutions in the Microsoft 365 tenant where you work every day, but there are good reasons to have a dedicated dev tenant - and probably additional staging/test tenants as well. They're free, and you can safely experiment as a tenant admin without risking your production work. Set up your new Microsoft 365 Developer Subscription Choose a path \ud83d\udee3\ufe0f There are two paths for doing the core application development labs: Path \"A\" is for developers with apps that are already based on Azure Active Directory. The starting app uses Azure Active Directory and the Microsoft Authentication Library (MSAL). Path A includes optional modules for extending the core application; these all build on a correctly completed Lab A03, which is the last core lab for Azure AD. Path \"B\" is for developers with apps that use some other identity system. It includes a simple cookie-based auth system based on the Employees table in the Northwind database. This cookie-based system is not secure and should never be used in production! But it does serve to show how to map identities from an existing login system to Azure AD identities using Teams Single Sign-on. Path B does not include the optional modules but the Path A extended modules will probably work; we just don't have time to test all the permutations! Labs \ud83d\udcda Path A: Start with Azure AD Core labs In this series of labs, you'll begin with a working web application that uses the MSAL library to authorize Azure AD users. You'll extend this to also be a Teams application with Azure AD Single Sign-on. These core labs are the basis for the extended labs. These folders hold the completed source codes following each of the labs. A01 - Start with Azure Active Directory A02 - Create a Teams app with Azure AD Single Sign-On A03 - Teams styling and themes Extended Labs Once you have successfully completed Lab A03, you're invited to choose your own adventure(s) and add features to your Teams application. The solution files for each lab are based on completing the lab directly on top of the Lab A03 solution . An \"All\" solution folder is provided showing all the extended labs completed on top of Lab A03. Add a Configurable Tab Add a Deep link to a personal Tab Add a Dialog Add a Meeting app Add a Message Extension Selling Your SaaS-based Teams Extension Path B: Start with a non-Azure AD identity solution Core labs: In this series of labs, you'll begin with a working web application that uses the a simple bespoke authentication scheme to authorize users stored in a database. You'll extend this to also be a Teams application with Azure AD Single Sign-on, where Azure AD users are mapped to the application's users to minimize changes to the application. If you're extending an application into Teams which uses some identity system other than Azure AD yet want to gain the benefits of Azure AD SSO, this pattern may work for you. These folders hold the completed source codes following each of the labs. B01 - Start with a non-Azure Active Directory Identity System B02 - Teams App with Bespoke Authentication B03 - Enable Azure AD Single Sign-On B04 - Teams styling and themes Contributing This project welcomes contributions and suggestions. Please file any issues or feature requests in the issues list for this repository. If you wish to contribute via a pull request, please fork the repo and make your PR against the main branch. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.opensource.microsoft.com . When you submit a pull request, a CLA bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA. This project has adopted the Microsoft Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments. Trademarks This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft trademarks or logos is subject to and must follow Microsoft's Trademark & Brand Guidelines . Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship. Any use of third-party trademarks or logos are subject to those third-party's policies.","title":"Home"},{"location":"#microsoft-teams-app-camp-on-demand","text":"Migrate applications into Microsoft Teams Welcome to App Camp! In this on-demand workshop, you'll learn how to build Teams applications without special tools, which is important for developers who already have an application they want to extend into Microsoft Teams, or for developers who have a specific toolchain in mind. If you're starting a new application and you're open to building a React application with NodeJS/Express support, we recommend you use the Teams Toolkit . This web site will guide you through a set of videos and hands-on lab exercises in which you will port a simple web application to being a full-featured Teams application. The initial core labs will bring the web application into Teams as a personal tab with Azure AD Single Sign-on. Then the \"extended\" labs are available to teach you how to add features such as message extensions, adaptive cards, deep linking, and more. One of the extended labs even shows you how to monetize your application in the Teams app store!","title":"Microsoft Teams App Camp On Demand"},{"location":"#video-briefings","text":"These videos will help you understand the business of Teams applications, and will lay a foundation for understanding the technical aspects of the labs. You don't need to watch them in order to complete the labs, but they will help you understand. Video Briefings Welcome to Microsoft Teams App Camp! Business Briefing What's the business case for building Teams applications? How can putting your app in the Teams app store generate revenue for you? What benefits does Microsoft offer ISV's who build Teams applications? How will my application appear to Teams users, and how will it help them? These questions and more are answered in these videos. Opportunity for Startups to Build and Grow on Microsoft Teams Microsoft Teams Marketplace Strategy Buying a Teams application Teams app capabilities with doodles! Success story: DecisionPoint brings conversational BI to Teams Success story: My Serious Game brings their EdMill app to Teams For more video case studies about successful Teams apps, please visit the Modern Work ISV Program page. Technical Briefing: Building your Teams application These videos will help you understand how Teams applications and Azure AD SSO work, so you can better understand the labs as you do them. Get started building Microsoft Teams apps Understanding Single Sign-On (SSO) with Azure AD Multi-tenant architecture for SaaS apps with Microsoft 365 and Azure Active Directory Technical Briefing: Monetizing your Teams application These videos explain the Microsoft Commercial Marketplace and how to integrate your application with the ecommerce system that drives it 5 Steps to monetize your Teams application Anatomy of a SaaS Application Publish your app in the Microsoft Teams app store Lab videos If you'd like to watch the labs before doing them, they are here. They're also posted at the beginning of each lab. The instructions should stand on their own - you don't need to watch in order to complete the labs - but they can help if you get stuck or want to understand the labs more deeply. Start with the \"core application\" Lab A01: Start with a simple web app that uses Azure AD Lab A02: Create a Teams app with Azure AD Single Sign-On Lab A03: Teams styling and themes Use this alternative path if you want to learn how to integrate an identity system other than Azure Active Directory: Labs B01-B04: Linking your identity system to Azure AD SSO Extended labs: Choose your own adventure! Configurable Tab Deep Links Add a Dialog Add a Message Extension with Adaptive Cards Add Monetization Key learning resource For a complete on-demand workshop focused on Commercial Marketplace, complete with hands-on labs and videos, please visit Mastering the Marketplace. Monetized Teams Store Apps are \"SaaS Offers\", so the link will bring you directly into that section of the training.","title":"Video Briefings"},{"location":"#its-lab-time","text":"In this series of labs, you will port a simple \"Northwind Orders\" web application to become a full-fledged Microsoft Teams application. The core labs will show you how to make the web application into a Teams application with a personal tab and Azure AD Single Sign-on. From there, you can choose extended labs depending on the features you need in your application. After completing each lab, the solution will still work as the original stand-alone web application as well as in Microsoft Teams. This is intended to show how to extend an existing SaaS application into Microsoft Teams without disrupting non-Teams other users. Tip If in doubt, start here ! \ud83d\udeb6\ud83c\udfff\ud83d\udeb6\ud83c\udffd\u200d\u2640\ufe0f\ud83d\udeb6 To make the app understandable by a wide audience, it is written in vanilla JavaScript with no UI framework, however it does use modern browser capabilities such as web components, CSS variables, and ECMAScript modules. The server side is also in plain JavaScript, using Express , the most popular web server platform for NodeJS. While the code is not production quality, the writers tried to follow best practices with respect to the various API's and SDK's in use, or to call out any exceptions in comments. As for things like robust exception handling, unit testing, build pipeline, etc., those are left to you, the developer; you probably already have a setup you want to use anyway.","title":"It's lab time!"},{"location":"#lab-prerequisites","text":"The labs are intended for developers. Most of the labs don't assume a lot of specialized knowledge; coding is in modern JavaScript without use of specialized frameworks or libraries. But if you're not comfortable with coding, you may find it a bit challenging. The idea is to teach developers the principles so they can apply them to their choice of toolsets. To complete the labs you will need: A computer with permission to install software (Windows, Mac, or Linux) NodeJS A code editor such as Visual Studio Code ngrok to simplify local debugging and allow debugging of bots and message extensions A Microsoft 365 tenant (available free!) Installation instructions are part of the first lab ; additional details are here in the repo wiki Tip DON'T DEVELOP IN PRODUCTION It may be tempting to do labs or build solutions in the Microsoft 365 tenant where you work every day, but there are good reasons to have a dedicated dev tenant - and probably additional staging/test tenants as well. They're free, and you can safely experiment as a tenant admin without risking your production work. Set up your new Microsoft 365 Developer Subscription","title":"Lab Prerequisites \ud83d\udcc3"},{"location":"#choose-a-path","text":"There are two paths for doing the core application development labs: Path \"A\" is for developers with apps that are already based on Azure Active Directory. The starting app uses Azure Active Directory and the Microsoft Authentication Library (MSAL). Path A includes optional modules for extending the core application; these all build on a correctly completed Lab A03, which is the last core lab for Azure AD. Path \"B\" is for developers with apps that use some other identity system. It includes a simple cookie-based auth system based on the Employees table in the Northwind database. This cookie-based system is not secure and should never be used in production! But it does serve to show how to map identities from an existing login system to Azure AD identities using Teams Single Sign-on. Path B does not include the optional modules but the Path A extended modules will probably work; we just don't have time to test all the permutations!","title":"Choose a path \ud83d\udee3\ufe0f"},{"location":"#labs","text":"","title":"Labs \ud83d\udcda"},{"location":"#path-a-start-with-azure-ad","text":"","title":"Path A: Start with Azure AD"},{"location":"#core-labs","text":"In this series of labs, you'll begin with a working web application that uses the MSAL library to authorize Azure AD users. You'll extend this to also be a Teams application with Azure AD Single Sign-on. These core labs are the basis for the extended labs. These folders hold the completed source codes following each of the labs. A01 - Start with Azure Active Directory A02 - Create a Teams app with Azure AD Single Sign-On A03 - Teams styling and themes","title":"Core labs"},{"location":"#extended-labs","text":"Once you have successfully completed Lab A03, you're invited to choose your own adventure(s) and add features to your Teams application. The solution files for each lab are based on completing the lab directly on top of the Lab A03 solution . An \"All\" solution folder is provided showing all the extended labs completed on top of Lab A03. Add a Configurable Tab Add a Deep link to a personal Tab Add a Dialog Add a Meeting app Add a Message Extension Selling Your SaaS-based Teams Extension","title":"Extended Labs"},{"location":"#path-b-start-with-a-non-azure-ad-identity-solution","text":"","title":"Path B: Start with a non-Azure AD identity solution"},{"location":"#core-labs_1","text":"In this series of labs, you'll begin with a working web application that uses the a simple bespoke authentication scheme to authorize users stored in a database. You'll extend this to also be a Teams application with Azure AD Single Sign-on, where Azure AD users are mapped to the application's users to minimize changes to the application. If you're extending an application into Teams which uses some identity system other than Azure AD yet want to gain the benefits of Azure AD SSO, this pattern may work for you. These folders hold the completed source codes following each of the labs. B01 - Start with a non-Azure Active Directory Identity System B02 - Teams App with Bespoke Authentication B03 - Enable Azure AD Single Sign-On B04 - Teams styling and themes","title":"Core labs:"},{"location":"#contributing","text":"This project welcomes contributions and suggestions. Please file any issues or feature requests in the issues list for this repository. If you wish to contribute via a pull request, please fork the repo and make your PR against the main branch. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.opensource.microsoft.com . When you submit a pull request, a CLA bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA. This project has adopted the Microsoft Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments.","title":"Contributing"},{"location":"#trademarks","text":"This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft trademarks or logos is subject to and must follow Microsoft's Trademark & Brand Guidelines . Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship. Any use of third-party trademarks or logos are subject to those third-party's policies.","title":"Trademarks"},{"location":"Resources/","text":"(function(c,l,a,r,i,t,y){ c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)}; t=l.createElement(r);t.async=1;t.src=\"https://www.clarity.ms/tag/\"+i; y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y); })(window, document, \"clarity\", \"script\", \"dfh6fjbr5x\"); Resources This page contains resources for the Microsoft Teams App Camp . For an overview of Teams app development, check out this video by Bob and Rabia! Free M365 Developer Tenant Targeted Release - set your developer tenant to get the latest features Microsoft 365 Developer Channel Microsoft 365 Community Channel Teams Development Fundamentals Get Started documentation Get started building Microsoft Teams apps (video) Documentation Understand Teams app features - Tabs, Bots, etc. Teams developer documentation Adaptive Cards Dialog - Modal dialogs for Teams apps that can display a web page or adaptive card Microsoft 365 Groups and Microsoft Teams - There's an M365 Group inside every Team to provide membership, a SharePoint site for file storage, an Exchange shared mailbox and calendar, etc. Upload a Teams application App Store validation guidelines Teams app publishing Tools Teams Developer Portal Microsoft Teams Toolkit (Preview) - A Teams code generator and development tool set from Microsoft yo teams - A Teams code generator from the community, generates apps in TypeScript with React and Express ngrok tunneling tool Do you need ngrok? (video) Samples Teams app samples gallery HR Talent App sample Azure AD SSO Understanding SSO with Azure AD and Microsoft Teams Azure single vs. multitenant Apps Azure AD Postman Collection Authenticate users in Microsoft Teams Teams tab SSO Teams bot SSO Teams message extension SSO Claims in access tokens - When troubleshooting, paste an access token into https://jwt.ms; this document explains the claims within Multi-tenant architecture for SaaS apps with M365 and Azure AD (video) Single sign-on in Microsoft Teams tabs with Azure Active Directory Tabs Build Tabs for Microsoft Teams Build a tab configuration page - These are required for tabs in Teams channels and Group conversations. They can also be used as settings pages for message extensions and connectors. Bots Bots in Microsoft Teams Bot Framework SDK - Use this to code your bot Bot Framework Composer - Use this to build a bot visually Power Virtual Agents - Use this to build a bot visually for use within an enterprise Consulting bot sample Bot Composer videos Sending notifications Webhooks and connectors - The easy way to send notifications but only works in a Teams channel, not personal or group chats Activity feed Proactive bots Message Extensions Message extensions documentation Build a configuration page - These can be used as settings pages for message extensions Meeting Apps Apps for Teams meetings Enable and configure apps for Teams meetings Azure Communication Services - Azure services that allow apps outside of Teams to chat and have voice and video meetings Microsoft Teams Meeting App \u2013 Record and playback attendee names (video) Create interactive meeting apps for Microsoft Teams (video) Teams JavaScript API Teams JavaScript SDK Teams JavaScript SDK v2 (Preview) Extend Teams apps across Microsoft 365 Teams apps in Outlook Web Teams Apps in Office.com & Office App for Windows Microsoft Graph API Getting Started with Microsoft Graph Microsoft Graph Explorer Microsoft Graph Postman Collection OData, the way to REST - Microsoft Graph uses OData conventions for access to collections of data Microsoft Graph Fundamentals lab Microsoft Graph Toolkit lab Microsoft Graph Scenarios lab Microsoft Graph SDK Commercial Marketplace What is the Microsoft commercial marketplace? Commercial marketplace documentation Microsoft partner network Microsoft Teams ISV app monetization - Preview program announcement SaaS fulfillment APIs in the Microsoft commercial marketplace Managing the SaaS subscription life cycle App Source simulator and monetized M365 app samples For a complete on-demand workshop focused on Commercial Marketplace, complete with hands-on labs and videos, please visit Mastering the Marketplace. Monetized Teams Store Apps are \"SaaS Offers\", so the link will bring you directly into that section of the training.","title":"Resources"},{"location":"Resources/#resources","text":"This page contains resources for the Microsoft Teams App Camp . For an overview of Teams app development, check out this video by Bob and Rabia! Free M365 Developer Tenant Targeted Release - set your developer tenant to get the latest features Microsoft 365 Developer Channel Microsoft 365 Community Channel","title":"Resources"},{"location":"Resources/#teams-development","text":"","title":"Teams Development"},{"location":"Resources/#fundamentals","text":"Get Started documentation Get started building Microsoft Teams apps (video)","title":"Fundamentals"},{"location":"Resources/#documentation","text":"Understand Teams app features - Tabs, Bots, etc. Teams developer documentation Adaptive Cards Dialog - Modal dialogs for Teams apps that can display a web page or adaptive card Microsoft 365 Groups and Microsoft Teams - There's an M365 Group inside every Team to provide membership, a SharePoint site for file storage, an Exchange shared mailbox and calendar, etc. Upload a Teams application App Store validation guidelines Teams app publishing","title":"Documentation"},{"location":"Resources/#tools","text":"Teams Developer Portal Microsoft Teams Toolkit (Preview) - A Teams code generator and development tool set from Microsoft yo teams - A Teams code generator from the community, generates apps in TypeScript with React and Express ngrok tunneling tool Do you need ngrok? (video)","title":"Tools"},{"location":"Resources/#samples","text":"Teams app samples gallery HR Talent App sample","title":"Samples"},{"location":"Resources/#azure-ad-sso","text":"Understanding SSO with Azure AD and Microsoft Teams Azure single vs. multitenant Apps Azure AD Postman Collection Authenticate users in Microsoft Teams Teams tab SSO Teams bot SSO Teams message extension SSO Claims in access tokens - When troubleshooting, paste an access token into https://jwt.ms; this document explains the claims within Multi-tenant architecture for SaaS apps with M365 and Azure AD (video) Single sign-on in Microsoft Teams tabs with Azure Active Directory","title":"Azure AD SSO"},{"location":"Resources/#tabs","text":"Build Tabs for Microsoft Teams Build a tab configuration page - These are required for tabs in Teams channels and Group conversations. They can also be used as settings pages for message extensions and connectors.","title":"Tabs"},{"location":"Resources/#bots","text":"Bots in Microsoft Teams Bot Framework SDK - Use this to code your bot Bot Framework Composer - Use this to build a bot visually Power Virtual Agents - Use this to build a bot visually for use within an enterprise Consulting bot sample Bot Composer videos","title":"Bots"},{"location":"Resources/#sending-notifications","text":"Webhooks and connectors - The easy way to send notifications but only works in a Teams channel, not personal or group chats Activity feed Proactive bots","title":"Sending notifications"},{"location":"Resources/#message-extensions","text":"Message extensions documentation Build a configuration page - These can be used as settings pages for message extensions","title":"Message Extensions"},{"location":"Resources/#meeting-apps","text":"Apps for Teams meetings Enable and configure apps for Teams meetings Azure Communication Services - Azure services that allow apps outside of Teams to chat and have voice and video meetings Microsoft Teams Meeting App \u2013 Record and playback attendee names (video) Create interactive meeting apps for Microsoft Teams (video)","title":"Meeting Apps"},{"location":"Resources/#teams-javascript-api","text":"Teams JavaScript SDK Teams JavaScript SDK v2 (Preview)","title":"Teams JavaScript API"},{"location":"Resources/#extend-teams-apps-across-microsoft-365","text":"Teams apps in Outlook Web Teams Apps in Office.com & Office App for Windows","title":"Extend Teams apps across Microsoft 365"},{"location":"Resources/#microsoft-graph-api","text":"Getting Started with Microsoft Graph Microsoft Graph Explorer Microsoft Graph Postman Collection OData, the way to REST - Microsoft Graph uses OData conventions for access to collections of data Microsoft Graph Fundamentals lab Microsoft Graph Toolkit lab Microsoft Graph Scenarios lab Microsoft Graph SDK","title":"Microsoft Graph API"},{"location":"Resources/#commercial-marketplace","text":"What is the Microsoft commercial marketplace? Commercial marketplace documentation Microsoft partner network Microsoft Teams ISV app monetization - Preview program announcement SaaS fulfillment APIs in the Microsoft commercial marketplace Managing the SaaS subscription life cycle App Source simulator and monetized M365 app samples For a complete on-demand workshop focused on Commercial Marketplace, complete with hands-on labs and videos, please visit Mastering the Marketplace. Monetized Teams Store Apps are \"SaaS Offers\", so the link will bring you directly into that section of the training.","title":"Commercial Marketplace"},{"location":"getting-started/","text":"(function(c,l,a,r,i,t,y){ c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)}; t=l.createElement(r);t.async=1;t.src=\"https://www.clarity.ms/tag/\"+i; y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y); })(window, document, \"clarity\", \"script\", \"dfh6fjbr5x\"); Welcome to the best Microsoft Teams development lab ever! At least we hope so! This is, as far as we know, the first and only lab about extending or migrating an existing application to Microsoft Teams, rather than starting from scratch. You will be provided with a simple, working web-based application in the very first lab, and as you go through the labs, you'll extend it into a full-featured Teams application. For you to succeed from day 1, we'd like you to be well prepared \ud83d\ude80. Here are some things you can set up before doing the labs. Your set up We are not talking about your workplace set up \ud83d\ude01 but about your development device and what you'll need to install in it. It could be your personal laptop, work laptop or a VM of your choice. To complete these labs you will need: NodeJS versions 14.17.4 and 16.14.2 tested A code editor of your choice, but if you ask us, we really like Visual Studio Code ngrok , which is a tunnelling program that allows you to access your local web server (running in NodeJS in this case) from the Internet. And we'll need this to test teams applications. NOTE: There are work-arounds for using ngrok in most of the labs but it's significantly easier if you use ngrok and the lab instructions all assume you're using it. For details, see this video . Your Microsoft 365 tenant related prerequisites Get a (free!) Microsoft 365 tenant If you don't yet have a tenant, please join the Microsoft 365 Developer Program to get a free one. Your tenant includes 25 E5 user licenses and can be renewed as long as you keep developing! Click \"Join now\" to begin. Log in with any Microsoft personal or work and school account, enter your information, and click \"Next\". You will have an opportunity to choose what kind of \"sandbox\" you want; the \"Instant sandbox\" is recommended. Follow the wizard and select your administrator username and password, tenant domain name, etc. The domain name you choose is just the left-most portion - for example if you enter \"Contoso\" your domain will be \"Contoso.onmicrosoft.com\". Remember this information as you'll need it throughout the labs! You will log in as @ .onmicrosoft.com with the password your chose. You'll be prompted for your phone number and then the system will set up your subscription. Eventually you'll be prompted to log into your new tenant. Be sure to use the new administrator credentials you just created, not the ones you used when you signed up for the developer program. \ud83d\ude0e DON'T DEVELOP IN PRODUCTION: It may be tempting to build solutions right where you work every day, but there are good reasons to have a dedicated dev tenant - and probably additional staging/test tenants. They're free, and you can safely experiment as a tenant admin without risking your production work. \ud83d\ude0e NAVIGATING MANY TENANTS: Consider creating a browser profile for each tenant that will have its own favorites, stored credentials, and cookies so you can easily switch between tenants as you work. \ud83d\ude0e CHANGES ROLL OUT FIRST TO \"TARGETED RELEASE\" TENANTS. You may want to enable Targeted Release in your developer tenant and keep production on Standard Release so you have a head start to test out new features. Enable Teams application uploads By default, end users can't upload Teams applications directly; instead an administrator needs to upload them into the enterprise app catalog. In this step you will enable direct uploads to make development easier and allow installation directly from the Teams user interface. a. In the left panel of the admin center, click \"Show all\" to open up the entire navigation When the panel opens, click Teams to open the Microsoft Teams admin center. b. In the left of the Microsoft Teams admin center, open the Teams apps accordion 1\ufe0f\u20e3 and select Setup Policies 2\ufe0f\u20e3. You will see a list of App setup policies. Click the Global (Org-wide default) policy 3\ufe0f\u20e3. c. Ensure the first switch, \"Upload custom apps\" is turned On. And select Save button at the end of this page. We have been working to get this enabled by default on developer tenants, so it may already be set for you. The change can take up to 24 hours to take effect, but usually it's much faster. Thanks and enjoy the labs!","title":"Getting started"},{"location":"getting-started/#welcome-to-the-best-microsoft-teams-development-lab-ever","text":"At least we hope so! This is, as far as we know, the first and only lab about extending or migrating an existing application to Microsoft Teams, rather than starting from scratch. You will be provided with a simple, working web-based application in the very first lab, and as you go through the labs, you'll extend it into a full-featured Teams application. For you to succeed from day 1, we'd like you to be well prepared \ud83d\ude80. Here are some things you can set up before doing the labs.","title":"Welcome to the best Microsoft Teams development lab ever!"},{"location":"getting-started/#your-set-up","text":"We are not talking about your workplace set up \ud83d\ude01 but about your development device and what you'll need to install in it. It could be your personal laptop, work laptop or a VM of your choice. To complete these labs you will need: NodeJS versions 14.17.4 and 16.14.2 tested A code editor of your choice, but if you ask us, we really like Visual Studio Code ngrok , which is a tunnelling program that allows you to access your local web server (running in NodeJS in this case) from the Internet. And we'll need this to test teams applications. NOTE: There are work-arounds for using ngrok in most of the labs but it's significantly easier if you use ngrok and the lab instructions all assume you're using it. For details, see this video .","title":"Your set up"},{"location":"getting-started/#your-microsoft-365-tenant-related-prerequisites","text":"Get a (free!) Microsoft 365 tenant If you don't yet have a tenant, please join the Microsoft 365 Developer Program to get a free one. Your tenant includes 25 E5 user licenses and can be renewed as long as you keep developing! Click \"Join now\" to begin. Log in with any Microsoft personal or work and school account, enter your information, and click \"Next\". You will have an opportunity to choose what kind of \"sandbox\" you want; the \"Instant sandbox\" is recommended. Follow the wizard and select your administrator username and password, tenant domain name, etc. The domain name you choose is just the left-most portion - for example if you enter \"Contoso\" your domain will be \"Contoso.onmicrosoft.com\". Remember this information as you'll need it throughout the labs! You will log in as @ .onmicrosoft.com with the password your chose. You'll be prompted for your phone number and then the system will set up your subscription. Eventually you'll be prompted to log into your new tenant. Be sure to use the new administrator credentials you just created, not the ones you used when you signed up for the developer program. \ud83d\ude0e DON'T DEVELOP IN PRODUCTION: It may be tempting to build solutions right where you work every day, but there are good reasons to have a dedicated dev tenant - and probably additional staging/test tenants. They're free, and you can safely experiment as a tenant admin without risking your production work. \ud83d\ude0e NAVIGATING MANY TENANTS: Consider creating a browser profile for each tenant that will have its own favorites, stored credentials, and cookies so you can easily switch between tenants as you work. \ud83d\ude0e CHANGES ROLL OUT FIRST TO \"TARGETED RELEASE\" TENANTS. You may want to enable Targeted Release in your developer tenant and keep production on Standard Release so you have a head start to test out new features. Enable Teams application uploads By default, end users can't upload Teams applications directly; instead an administrator needs to upload them into the enterprise app catalog. In this step you will enable direct uploads to make development easier and allow installation directly from the Teams user interface. a. In the left panel of the admin center, click \"Show all\" to open up the entire navigation When the panel opens, click Teams to open the Microsoft Teams admin center. b. In the left of the Microsoft Teams admin center, open the Teams apps accordion 1\ufe0f\u20e3 and select Setup Policies 2\ufe0f\u20e3. You will see a list of App setup policies. Click the Global (Org-wide default) policy 3\ufe0f\u20e3. c. Ensure the first switch, \"Upload custom apps\" is turned On. And select Save button at the end of this page. We have been working to get this enabled by default on developer tenants, so it may already be set for you. The change can take up to 24 hours to take effect, but usually it's much faster. Thanks and enjoy the labs!","title":"Your Microsoft 365 tenant related prerequisites"},{"location":"aad/A01-begin-app/","text":"(function(c,l,a,r,i,t,y){ c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)}; t=l.createElement(r);t.async=1;t.src=\"https://www.clarity.ms/tag/\"+i; y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y); })(window, document, \"clarity\", \"script\", \"dfh6fjbr5x\"); Lab A01: Start with Azure Active Directory Overview This is the very first lab in Path A, which begins with an application that already uses Azure AD. Are you on the right path? Expand these notes to find out! There are two options for doing the labs: The \"A\" path is for developers with apps that are already based on Azure Active Directory. The starting app uses Azure Active Directory and the Microsoft Authentication Library (MSAL). the \"B\" path is for developers with apps that use some other identity system. It includes a simple (and not secure!) cookie-based auth system based on the Employees table in the Northwind database. You will use an identity mapping scheme to allow your existing users to log in directly or via Azure AD Single Sign-On. In this lab you will set up the Northwind Orders application, which can be found in the A01-begin-app folder. The labs that follow will lead you step by step into extending the web application to be a Microsoft Teams application as well. A01-begin-app: Setting up the application with Azure AD (\ud83d\udccdYou are here) A02-after-teams-sso: Creating a Teams app with Azure ADO SSO A03-after-apply-styling: Teams styling and themes In this lab you will learn to: Run a web application using NodeJS Expose a local web application using ngrok Register an application with the Microsoft identity platform How to use the Microsoft Authentication Library (MSAL) How to validate an Azure AD access token in a NodeJS application Video briefing Lab A01 Briefing Table of Contents (open to display \u25ba) Overview Features Exercise 1: Install prerequisites Step 1: Install NodeJS Step 2: Install a Code Editor Step 3: Install ngrok Exercise 2: Set up your Microsoft 365 Subscription Step 1: Get a tenant Step 2: Enable Teams application uploads Exercise 3: Assign users as Northwind \"Employees\" Step 1: Edit Azure AD users Step 2: Ensure the users have managers Step 3: Ensure the users are licensed for Microsoft 365 Exercise 4: Register your application with Azure AD Step 1: Start ngrok Step 2: Register your application in Azure Active Directory Step 3: Grant your application permission to call the Microsoft Graph API Step 4: Consent to the permission Step 5: Expose an API Exercise 5: Configure and run the application Step 1: Download the starting application Step 2: Install the app's dependencies Step 3: Download the sample data Step 4: Configure the app settings Step 5: Run the application Known issues Next steps Features View orders associated with the logged-in user (sales representative) View products by category View product details and orders for a product View order details The application is based on the Northwind Traders Database, which is a sample relational database that originally shipped with Microsoft Access. The Northwind Traders Database is now available as a demonstration OData service , which is queried in this lab. This is a read-only data source; some of the later exercises appear to update the data but the changes are only stored in the server memory and will only persist until the server is restarted. Exercise 1: Install prerequisites You can complete these labs on a Windows, Mac, or Linux machine, but you do need the ability to install the prerequisites. If you are not permitted to install applications on your computer, you'll need to find another machine (or virtual machine) to use throughout the workshop. Step 1: Install NodeJS NodeJS is a program that allows you to run JavaScript on your computer; it uses the open source \"V8\" engine, which is used in popular web browsers such as Microsoft Edge and Google Chrome. You will need NodeJS to run the web server code used throughout this workshop. Browse to https://nodejs.org/en/download/ and install the \"LTS\" (Long Term Support) version for your operating system. This lab has been tested using NodeJS version 14.17.4 and 16.14.0. If you already have another version of NodeJS installed, you may want to set up the Node Version Manager (or this variation for Microsoft Windows), which allows you to easily switch Node versions on the same computer. Step 2: Install a Code Editor You can really use any code editor you wish, but we recommend Visual Studio Code . Step 3: Install ngrok ngrok is a tunneling program that allows you to access your local web server (running in NodeJS in this case) from the Internet. To complete this exercise, sign up for a free ngrok account and install ngrok on your computer. The free version of ngrok will assign a URL similar to https://something.ngrok.io, where \"something\" is a random identifier. As long as ngrok is running (leave it going in a command or terminal window), you can browse your web site at that URL. If you start and stop ngrok, or try to keep it running for more than 8 hours, you'll get a new identifier and you'll need to update your app registration, environment variables, etc. The paid version of ngrok allows you to reserve the same URL for use over time, removing the need to update it when you return to the lab. Tip If you restart ngrok and get a new URL under the free plan, you can refer to this page for details on all the places in the labs where you need to update the URL. While ngrok isn't strictly required for developing Microsoft Teams applications, it makes things much easier, especially if Bots are involved. An example of this is the Message Extension lab since Message Extensions use a Bot to communicate with Microsoft Teams. More information What is ngrok and do you really need it? Exercise 2: Set up your Microsoft 365 Subscription The initial Northwind Orders application doesn't require Microsoft 365, but it does use Azure AD. So let's set up a Microsoft 365 tenant now, which will give you an Azure AD instance where you're a full administrator so you can register the Northwind Orders application. In the labs which follow, you'll also use this tenant to run Microsoft Teams. Step 1: Get a tenant If you don't yet have a tenant, please join the Microsoft 365 Developer Program to get a free one. Your tenant includes 25 E5 user licenses and can be renewed as long as you keep developing! Select \"Join now\" to begin. Log in with any Microsoft personal or work and school account, enter your information, and select \"Next\". You will have an opportunity to choose what kind of \"sandbox\" you want; the \"Instant sandbox\" is recommended. Follow the wizard and select your administrator username and password, tenant domain name, etc. The domain name you choose is just the left-most portion - for example if you enter \"Contoso\" your domain will be \"Contoso.onmicrosoft.com\". Remember this information as you'll need it throughout the labs! You will log in as >username<@>domain<.onmicrosoft.com with the password you chose. You'll be prompted for your phone number and then the system will set up your subscription. Eventually you'll be prompted to log into your new tenant. Be sure to use the new administrator credentials you just created, not the ones you used when you signed up for the developer program. More information Setting up your Microsoft 365 Development tenant Tip: Navigating many tenants Consider creating a browser profile for each tenant that will have its own favorites, stored credentials, and cookies so you can easily swtch between tenants as you work. You may be asked to enable multi-factor authentication (MFA) This is certainly a good idea! Just follow the instructions. If you really must turn off MFA, here are instructions . Step 2: Enable Teams application uploads By default, end users can't upload Teams applications directly; instead an administrator needs to upload them into the enterprise app catalog. In this step you will enable direct uploads to make developement easier and allow installation directly from the Teams user interface. a. Navigate to https://admin.microsoft.com/ , which is the Microsoft 365 Admin Center. b. In the left panel of the admin center, select \"Show all\" to open up the entire navigation When the panel opens, select Teams to open the Microsoft Teams admin center. c. In the left of the Microsoft Teams admin center, open the Teams apps accordion 1\ufe0f\u20e3 and select Setup Policies 2\ufe0f\u20e3. You will see a list of App setup policies. Select the Global (Org-wide default) policy 3\ufe0f\u20e3. d. Ensure the first switch, \"Upload custom apps\" is turned On. Be sure to scroll down and select the \"Save\" button to persist your change. We have been working to get this enabled by default on developer tenants, so it may already be set for you. The change can take up to 24 hours to take effect, but usually it's much faster. Exercise 3: Assign users as Northwind \"Employees\" The Northwind database contains 9 employees, so up to 9 users in your tenant will be able to use the application. (You'll only need two to complete the labs.) The Northwind Orders application expects each user's employee ID in Azure Active Directory to match their employee ID in the Northwind database. In this exercise you'll set up some test users accordingly. Step 1: Edit Azure AD users Navigate to the Microsoft 365 admin center at https://admin.microsoft.com/ and log in as the administrator of your new dev tenant. In the left navigation, select \"Show All\" to reveal the full list of admin centers, and then select \"Azure Active Directory\". This will bring you to the Azure AD admin center . Select \"Azure Active Directory\" again in the left navigation bar. This will bring you to the overview of your Azure AD tenant. Note that a \"tenant\" is a single instance of Azure Active Directory, with its own users, groups, and app registrations. Verify that you're in the developer tenant you just created, and select \"Users\" in the navigation bar. You can use existing users to run the Northwind Orders application (the names may not match the Northwind database unless you change them, but you'll know what's going on), or create new ones. It's easiest if one of the users is the administrator account you're logged into right now, so you can test the application without logging on and off, but that's up to you. Select on the user to view their user profile, and then select the \"Edit\" button. Change the Employee ID to the ID of one of the users in the Northwind datbase, which are: Employee ID Name 1 Nancy Davolio 2 Andrew Fuller 3 Janet Leverling 4 Margaret Peacock 5 Steven Buchanan 6 Michael Suyama 7 Robert King 8 Laura Callahan 9 Anne Dodsworth You may also choose to rename the users to match the database. Step 2: Ensure the users have managers Still on the edit screen, assign a manager for each user by clicking \"Edit\" again and then click \"Change\" next to the manager field and select a manager. Step 3: Ensure the users are licensed for Microsoft 365 From the same user profile screen, select \"Licenses\" and ensure the user has an Office 365 license so they can run Microsoft Teams. Note When you publish your application in the Microsoft Teams store, you will be responsible for your own license management and licenses for your application will not appear here along with the licenses for Microsoft products. In Lab 08, you will implement this strategy for the Northwind Orders app. Exercise 4: Register your application with Azure AD In order for users to log into your application with Azure AD, you need to register it. In this exercise you will register your application directly in the tenant you created in Exercise 2, however we'll set it up so it can be used from other tenants, such as those of customers who purchase your application in the Microsoft Teams store. More information Learn about multi-tenant applications Step 1: Start ngrok Before you can register your application, you will need to start ngrok to obtain the URL for your application. In the command line tool of your choice, navigate to the folder where you've saved ngrok.exe and run this command: ngrok http 3978 The terminal will display a screen like this; note the https forwarding URL for use in this lab. ngrok will tunnel requests on this URL to your local host on port 3978 for easy debugging. Save this URL for use throughout the labs. Warning Do not stop ngrok for the duration of these labs. If you do stop ngrok and are assigned a new URL, this page lists all the exercises which involve the ngrok URL so you can easily update it. Step 2: Register your application in Azure Active Directory Navigate to the Microsoft 365 admin center at https://admin.microsoft.com/ and log in as the administrator of your new dev tenant. In the left navigation, select \"Show More\" to reveal the full list of admin centers, and then select \"Azure Active Directory\". This will bring you to the Azure AD admin center . Select \"Azure Active Directory\" again in the left navigation bar. This will bring you to the overview of your Azure AD tenant. Note that a \"tenant\" is a single instance of Azure Active Directory, with its own users, groups, and app registrations. Verify that you're in the developer tenant you just created, and select \"App Registrations\" in the navigation bar. You will be shown a list of applications (if any) registered in the tenant. Select \"+ New Registration\" at the top to register a new application. You will be presented with the \"Register an application\" form. Enter a name for your application 1\ufe0f\u20e3. Under \"Supported account types\" select \"Accounts in any organizational directory\" 2\ufe0f\u20e3. This will allow your application to be used in your customer's tenants. Under \"Redirect URI\", select \"Single-page application (SPA)\" 3\ufe0f\u20e3 and enter the ngrok URL you saved earlier 4\ufe0f\u20e3. Select the \"Register\" button 5\ufe0f\u20e3 You will be presented with the application overview. There are two values on this screen you need to copy for use later on; those are the Application (client) ID 1\ufe0f\u20e3 and the Directory (tenant) ID 2\ufe0f\u20e3. When you've recorded these values, navigate to \"Certificates & secrets\" 3\ufe0f\u20e3. Now you will create a client secret, which is like a password for your application to use when it needs to authenticate with Azure AD. Select \"+ New client secret\" 1\ufe0f\u20e3 Enter a description 2\ufe0f\u20e3 and select an expiration date 3\ufe0f\u20e3 for your secret Select \"Add\" to add your secret. 4\ufe0f\u20e3 The secret will be displayed just this once on the \"Certificates and secrets\" screen. Copy it now and store it in a safe place. Managing app secrets is an ongoing responsibility App secrets have a limited lifetime, and if they expire your application may stop working. You can have multiple secrets, so plan to roll them over as you would with a digital certificate. Keep your secrets secret! Give each developer a free developer tenant and register their apps in their tenants so each developer has his or her own app secrets. Limit who has access to app secrets for production. If you're running in Microsoft Azure, a great place to store your secrets is Azure KeyVault . You could deploy an app just like this one and store sensitive application settings in Keyvault. See this article for more information. Step 3: Verify permission to call the Microsoft Graph API The app registration created an identity for your application; now we need to add permission to call the Microsoft Graph API. The Microsoft Graph is a RESTful API that allows you to access data in Azure AD and Microsoft 365, including Microsoft Teams. While still in the app registration, navigate to \"API Permissions\" 1\ufe0f\u20e3 and notice there is already a permission there, \"User.Read\" 2\ufe0f\u20e3. The permission is for calling the Microsoft Graph, and it allows reading the logged-in user's profile, which includes the user's Employee ID. This permission is \"delegated\" (it acts on behalf of the logged-in user). For an explanation of application vs. delegated permissions, see this documentation or watch this video . Note If \"User.Read\" permission isn't already configured as in the screen shot above (it's included by default in newly registered applications), you need to click \"Add a permission\", then \"Microsoft Graph\", then \"Delegated permissions\", and then find and select the \"User.Read\" permission. More information Understanding Single Sign-On (SSO) with Azure AD Learn about multi-tenant applications The Northwind Orders application uses the Employee ID value in each users's Azure AD profile to locate the user in the Employees table in the Northwind database. The names probably won't match unless you rename them but in a real application the employees and Microsoft 365 users would be the same people. Step 4: Consent to the permission You have added the permission but nobody has consented to it. If you return to the permission page for your app, you can see that the new permission has not been granted. 1\ufe0f\u20e3 To fix this, select the \"Grant admin consent for \" button and then agree to grant the consent 2\ufe0f\u20e3. When this is complete, the message \"Granted for \" should be displayed for each permission. Step 5: Expose an API The Northwind Orders app is a full stack application, with code running in the web browser and web server. The browser application accesses data by calling a web API on the server side. To allow this, we need to expose an API in our Azure AD application. This will allow the server to validate Azure AD access tokens from the web browser. Select \"Expose an API\" 1\ufe0f\u20e3 and then \"Add a scope\"2\ufe0f\u20e3. Scopes expose an application's permissions; what you're doing here is adding a permission that your application's browser code can use it when calling the server. On the \"Add a scope\" flyout, edit the Application ID URI to include your ngrok URL between the \"api://\" and the client ID. Select the \"Save and continue\" button to proceed. Now that you've defined the application URI, the \"Add a scope\" flyout will allow you to set up the new permission scope. Fill in the form as follows: - Scope name: access_as_user - Who can consent: Admins only - Admin consent display name: Access as the logged in user - Admin consent description: Access Northwind services as the logged in user - (skip User consent fields) - Ensure the State is set to \"Enabled\" - Select \"Add scope\" Exercise 5: Configure and run the application Step 1: Download the starting application Begin by downloading the app-camp repository at https://github.com/microsoft/app-camp . Select the \"Code\" button and clone or download the content to your computer. The starting code is in the src/create-core-app/aad/A01-begin-app/ folder. Copy this folder to another location on your computer; this will be your working copy to keep the original source separate. Folders are also provided with the final code for the other labs. Note Be sure to copy the A01-begin-app folder to a working location where you can modify the contents as you complete the labs. That way you'll still have a clean copy to start from or to compare with your work. Step 2: Install the app's dependencies Using a command line tool of your choice, navigate to your working copy of the A01-begin-app directory and type the command: npm install This will install the libraries required to run the server side of your solution. Note The client-side code is not bundled as it uses JavaScript Modules (sometimes called ES Modules or ECMAScript Modules). The npm packages are used on the server side. Step 3: Download the sample data The Northwind Orders application uses the venerable Northwind database for sample data. The Northwind Database originally shipped with Microsoft Access, then SQL Server, and now is available as a test OData service from the OData organization . In this step, you'll download the entire Northwind database from this test service to local JSON files, which are used by the Northwind Orders application. Using a command line tool in your working directory, type: npm run db-download This will create a JSON file in the northwindDB folder for each table in the Northwind database. The appliction reads and writes these JSON files. It's generous to call these files a \"database\", but it works well for a single-user lab environment. Step 4: Configure the app settings In a code editor, open the working folder you created in Step 2. Copy the .env_sample file to a new file called .env and open the new file. It will look like this: COMPANY_NAME=Northwind Traders PORT=3978 HOSTNAME=something.ngrok.io TENANT_ID=00000000-0000-0000-0000-000000000000 CLIENT_ID=00000000-0000-0000-0000-000000000000 CLIENT_SECRET=xxxxx Fill in the information you've gathered so far, including your ngrok hostname and the information from the app registration. Step 5: Run the application To run the application, open a command line in your working folder and type: npm start At this point you should be able to browse to your ngrok URL and use the application. Note that due to the ngrok tunnel, you can try your app from anywhere on the Internet. You will quickly be directed to the Microsoft login page. Log in using one of the accounts you set up with an employee ID in Exercise 3, and you should be presented with the app's home page. The home page shows the employee name and picture from the Northwind database. Select \"My Orders\" in the top navigation bar to view the employee's orders. You can click on any order to view the details. From here you can select on any product to view its details. Much of the data is hyperlinked in this fashion. You can also select on \"Products\" in the top navigation to view a list of product categories. From there you can select into a product category to view a list of products, and then you can select into a product to see its details. The product detail page shows all the orders for the product, which leads to a list of orders, and so you can select your way around the sample data. Try logging out and logging in; you should be able to view the orders for another user in your developer tenant who has an employee ID set to a Northwind employee ID. function showCompletionPopup() { let path = window.location.pathname; path = path.endsWith('/') ? path.slice(0, -1) : path; let pathArray = path.split('/'); let leafFolder = pathArray[pathArray.length-1]; let height = window.outerHeight / 1.5; let width = window.outerWidth / 2; window.open(`${window.origin}/app-camp/congrats/${leafFolder}`, 'Congratulations!', `width=${width}, height=${height}, left=100, top=100,`); } Congratulations! When you have finished this lab, please click this button to let us know! No personal information is collected; we only want to count how many people have completed the labs so we can continue to fund this work! Known issues While it will work on mobile devices, the application is not responsive and will not look good on these devices. This may be addressed in a future version of the lab. For the latest issues, or to file a bug report, see the github issues list for this repository. Next steps After completing this lab, you may continue to the next lab in this learning path, A02-after-teams-sso: Creating a Teams app with Azure ADO SSO .","title":"A01 - Start with Azure Active Directory"},{"location":"aad/A01-begin-app/#lab-a01-start-with-azure-active-directory","text":"","title":"Lab A01: Start with Azure Active Directory"},{"location":"aad/A01-begin-app/#overview","text":"This is the very first lab in Path A, which begins with an application that already uses Azure AD. Are you on the right path? Expand these notes to find out! There are two options for doing the labs: The \"A\" path is for developers with apps that are already based on Azure Active Directory. The starting app uses Azure Active Directory and the Microsoft Authentication Library (MSAL). the \"B\" path is for developers with apps that use some other identity system. It includes a simple (and not secure!) cookie-based auth system based on the Employees table in the Northwind database. You will use an identity mapping scheme to allow your existing users to log in directly or via Azure AD Single Sign-On. In this lab you will set up the Northwind Orders application, which can be found in the A01-begin-app folder. The labs that follow will lead you step by step into extending the web application to be a Microsoft Teams application as well. A01-begin-app: Setting up the application with Azure AD (\ud83d\udccdYou are here) A02-after-teams-sso: Creating a Teams app with Azure ADO SSO A03-after-apply-styling: Teams styling and themes In this lab you will learn to: Run a web application using NodeJS Expose a local web application using ngrok Register an application with the Microsoft identity platform How to use the Microsoft Authentication Library (MSAL) How to validate an Azure AD access token in a NodeJS application Video briefing Lab A01 Briefing Table of Contents (open to display \u25ba) Overview Features Exercise 1: Install prerequisites Step 1: Install NodeJS Step 2: Install a Code Editor Step 3: Install ngrok Exercise 2: Set up your Microsoft 365 Subscription Step 1: Get a tenant Step 2: Enable Teams application uploads Exercise 3: Assign users as Northwind \"Employees\" Step 1: Edit Azure AD users Step 2: Ensure the users have managers Step 3: Ensure the users are licensed for Microsoft 365 Exercise 4: Register your application with Azure AD Step 1: Start ngrok Step 2: Register your application in Azure Active Directory Step 3: Grant your application permission to call the Microsoft Graph API Step 4: Consent to the permission Step 5: Expose an API Exercise 5: Configure and run the application Step 1: Download the starting application Step 2: Install the app's dependencies Step 3: Download the sample data Step 4: Configure the app settings Step 5: Run the application Known issues Next steps","title":"Overview"},{"location":"aad/A01-begin-app/#features","text":"View orders associated with the logged-in user (sales representative) View products by category View product details and orders for a product View order details The application is based on the Northwind Traders Database, which is a sample relational database that originally shipped with Microsoft Access. The Northwind Traders Database is now available as a demonstration OData service , which is queried in this lab. This is a read-only data source; some of the later exercises appear to update the data but the changes are only stored in the server memory and will only persist until the server is restarted.","title":"Features"},{"location":"aad/A01-begin-app/#exercise-1-install-prerequisites","text":"You can complete these labs on a Windows, Mac, or Linux machine, but you do need the ability to install the prerequisites. If you are not permitted to install applications on your computer, you'll need to find another machine (or virtual machine) to use throughout the workshop.","title":"Exercise 1: Install prerequisites"},{"location":"aad/A01-begin-app/#step-1-install-nodejs","text":"NodeJS is a program that allows you to run JavaScript on your computer; it uses the open source \"V8\" engine, which is used in popular web browsers such as Microsoft Edge and Google Chrome. You will need NodeJS to run the web server code used throughout this workshop. Browse to https://nodejs.org/en/download/ and install the \"LTS\" (Long Term Support) version for your operating system. This lab has been tested using NodeJS version 14.17.4 and 16.14.0. If you already have another version of NodeJS installed, you may want to set up the Node Version Manager (or this variation for Microsoft Windows), which allows you to easily switch Node versions on the same computer.","title":"Step 1: Install NodeJS"},{"location":"aad/A01-begin-app/#step-2-install-a-code-editor","text":"You can really use any code editor you wish, but we recommend Visual Studio Code .","title":"Step 2: Install a Code Editor"},{"location":"aad/A01-begin-app/#step-3-install-ngrok","text":"ngrok is a tunneling program that allows you to access your local web server (running in NodeJS in this case) from the Internet. To complete this exercise, sign up for a free ngrok account and install ngrok on your computer. The free version of ngrok will assign a URL similar to https://something.ngrok.io, where \"something\" is a random identifier. As long as ngrok is running (leave it going in a command or terminal window), you can browse your web site at that URL. If you start and stop ngrok, or try to keep it running for more than 8 hours, you'll get a new identifier and you'll need to update your app registration, environment variables, etc. The paid version of ngrok allows you to reserve the same URL for use over time, removing the need to update it when you return to the lab. Tip If you restart ngrok and get a new URL under the free plan, you can refer to this page for details on all the places in the labs where you need to update the URL. While ngrok isn't strictly required for developing Microsoft Teams applications, it makes things much easier, especially if Bots are involved. An example of this is the Message Extension lab since Message Extensions use a Bot to communicate with Microsoft Teams. More information What is ngrok and do you really need it?","title":"Step 3: Install ngrok"},{"location":"aad/A01-begin-app/#exercise-2-set-up-your-microsoft-365-subscription","text":"The initial Northwind Orders application doesn't require Microsoft 365, but it does use Azure AD. So let's set up a Microsoft 365 tenant now, which will give you an Azure AD instance where you're a full administrator so you can register the Northwind Orders application. In the labs which follow, you'll also use this tenant to run Microsoft Teams.","title":"Exercise 2: Set up your Microsoft 365 Subscription"},{"location":"aad/A01-begin-app/#step-1-get-a-tenant","text":"If you don't yet have a tenant, please join the Microsoft 365 Developer Program to get a free one. Your tenant includes 25 E5 user licenses and can be renewed as long as you keep developing! Select \"Join now\" to begin. Log in with any Microsoft personal or work and school account, enter your information, and select \"Next\". You will have an opportunity to choose what kind of \"sandbox\" you want; the \"Instant sandbox\" is recommended. Follow the wizard and select your administrator username and password, tenant domain name, etc. The domain name you choose is just the left-most portion - for example if you enter \"Contoso\" your domain will be \"Contoso.onmicrosoft.com\". Remember this information as you'll need it throughout the labs! You will log in as >username<@>domain<.onmicrosoft.com with the password you chose. You'll be prompted for your phone number and then the system will set up your subscription. Eventually you'll be prompted to log into your new tenant. Be sure to use the new administrator credentials you just created, not the ones you used when you signed up for the developer program. More information Setting up your Microsoft 365 Development tenant Tip: Navigating many tenants Consider creating a browser profile for each tenant that will have its own favorites, stored credentials, and cookies so you can easily swtch between tenants as you work. You may be asked to enable multi-factor authentication (MFA) This is certainly a good idea! Just follow the instructions. If you really must turn off MFA, here are instructions .","title":"Step 1: Get a tenant"},{"location":"aad/A01-begin-app/#step-2-enable-teams-application-uploads","text":"By default, end users can't upload Teams applications directly; instead an administrator needs to upload them into the enterprise app catalog. In this step you will enable direct uploads to make developement easier and allow installation directly from the Teams user interface. a. Navigate to https://admin.microsoft.com/ , which is the Microsoft 365 Admin Center. b. In the left panel of the admin center, select \"Show all\" to open up the entire navigation When the panel opens, select Teams to open the Microsoft Teams admin center. c. In the left of the Microsoft Teams admin center, open the Teams apps accordion 1\ufe0f\u20e3 and select Setup Policies 2\ufe0f\u20e3. You will see a list of App setup policies. Select the Global (Org-wide default) policy 3\ufe0f\u20e3. d. Ensure the first switch, \"Upload custom apps\" is turned On. Be sure to scroll down and select the \"Save\" button to persist your change. We have been working to get this enabled by default on developer tenants, so it may already be set for you. The change can take up to 24 hours to take effect, but usually it's much faster.","title":"Step 2: Enable Teams application uploads"},{"location":"aad/A01-begin-app/#exercise-3-assign-users-as-northwind-employees","text":"The Northwind database contains 9 employees, so up to 9 users in your tenant will be able to use the application. (You'll only need two to complete the labs.) The Northwind Orders application expects each user's employee ID in Azure Active Directory to match their employee ID in the Northwind database. In this exercise you'll set up some test users accordingly.","title":"Exercise 3: Assign users as Northwind \"Employees\""},{"location":"aad/A01-begin-app/#step-1-edit-azure-ad-users","text":"Navigate to the Microsoft 365 admin center at https://admin.microsoft.com/ and log in as the administrator of your new dev tenant. In the left navigation, select \"Show All\" to reveal the full list of admin centers, and then select \"Azure Active Directory\". This will bring you to the Azure AD admin center . Select \"Azure Active Directory\" again in the left navigation bar. This will bring you to the overview of your Azure AD tenant. Note that a \"tenant\" is a single instance of Azure Active Directory, with its own users, groups, and app registrations. Verify that you're in the developer tenant you just created, and select \"Users\" in the navigation bar. You can use existing users to run the Northwind Orders application (the names may not match the Northwind database unless you change them, but you'll know what's going on), or create new ones. It's easiest if one of the users is the administrator account you're logged into right now, so you can test the application without logging on and off, but that's up to you. Select on the user to view their user profile, and then select the \"Edit\" button. Change the Employee ID to the ID of one of the users in the Northwind datbase, which are: Employee ID Name 1 Nancy Davolio 2 Andrew Fuller 3 Janet Leverling 4 Margaret Peacock 5 Steven Buchanan 6 Michael Suyama 7 Robert King 8 Laura Callahan 9 Anne Dodsworth You may also choose to rename the users to match the database.","title":"Step 1: Edit Azure AD users"},{"location":"aad/A01-begin-app/#step-2-ensure-the-users-have-managers","text":"Still on the edit screen, assign a manager for each user by clicking \"Edit\" again and then click \"Change\" next to the manager field and select a manager.","title":"Step 2: Ensure the users have managers"},{"location":"aad/A01-begin-app/#step-3-ensure-the-users-are-licensed-for-microsoft-365","text":"From the same user profile screen, select \"Licenses\" and ensure the user has an Office 365 license so they can run Microsoft Teams. Note When you publish your application in the Microsoft Teams store, you will be responsible for your own license management and licenses for your application will not appear here along with the licenses for Microsoft products. In Lab 08, you will implement this strategy for the Northwind Orders app.","title":"Step 3: Ensure the users are licensed for Microsoft 365"},{"location":"aad/A01-begin-app/#exercise-4-register-your-application-with-azure-ad","text":"In order for users to log into your application with Azure AD, you need to register it. In this exercise you will register your application directly in the tenant you created in Exercise 2, however we'll set it up so it can be used from other tenants, such as those of customers who purchase your application in the Microsoft Teams store. More information Learn about multi-tenant applications","title":"Exercise 4: Register your application with Azure AD"},{"location":"aad/A01-begin-app/#step-1-start-ngrok","text":"Before you can register your application, you will need to start ngrok to obtain the URL for your application. In the command line tool of your choice, navigate to the folder where you've saved ngrok.exe and run this command: ngrok http 3978 The terminal will display a screen like this; note the https forwarding URL for use in this lab. ngrok will tunnel requests on this URL to your local host on port 3978 for easy debugging. Save this URL for use throughout the labs. Warning Do not stop ngrok for the duration of these labs. If you do stop ngrok and are assigned a new URL, this page lists all the exercises which involve the ngrok URL so you can easily update it.","title":"Step 1: Start ngrok"},{"location":"aad/A01-begin-app/#step-2-register-your-application-in-azure-active-directory","text":"Navigate to the Microsoft 365 admin center at https://admin.microsoft.com/ and log in as the administrator of your new dev tenant. In the left navigation, select \"Show More\" to reveal the full list of admin centers, and then select \"Azure Active Directory\". This will bring you to the Azure AD admin center . Select \"Azure Active Directory\" again in the left navigation bar. This will bring you to the overview of your Azure AD tenant. Note that a \"tenant\" is a single instance of Azure Active Directory, with its own users, groups, and app registrations. Verify that you're in the developer tenant you just created, and select \"App Registrations\" in the navigation bar. You will be shown a list of applications (if any) registered in the tenant. Select \"+ New Registration\" at the top to register a new application. You will be presented with the \"Register an application\" form. Enter a name for your application 1\ufe0f\u20e3. Under \"Supported account types\" select \"Accounts in any organizational directory\" 2\ufe0f\u20e3. This will allow your application to be used in your customer's tenants. Under \"Redirect URI\", select \"Single-page application (SPA)\" 3\ufe0f\u20e3 and enter the ngrok URL you saved earlier 4\ufe0f\u20e3. Select the \"Register\" button 5\ufe0f\u20e3 You will be presented with the application overview. There are two values on this screen you need to copy for use later on; those are the Application (client) ID 1\ufe0f\u20e3 and the Directory (tenant) ID 2\ufe0f\u20e3. When you've recorded these values, navigate to \"Certificates & secrets\" 3\ufe0f\u20e3. Now you will create a client secret, which is like a password for your application to use when it needs to authenticate with Azure AD. Select \"+ New client secret\" 1\ufe0f\u20e3 Enter a description 2\ufe0f\u20e3 and select an expiration date 3\ufe0f\u20e3 for your secret Select \"Add\" to add your secret. 4\ufe0f\u20e3 The secret will be displayed just this once on the \"Certificates and secrets\" screen. Copy it now and store it in a safe place. Managing app secrets is an ongoing responsibility App secrets have a limited lifetime, and if they expire your application may stop working. You can have multiple secrets, so plan to roll them over as you would with a digital certificate. Keep your secrets secret! Give each developer a free developer tenant and register their apps in their tenants so each developer has his or her own app secrets. Limit who has access to app secrets for production. If you're running in Microsoft Azure, a great place to store your secrets is Azure KeyVault . You could deploy an app just like this one and store sensitive application settings in Keyvault. See this article for more information.","title":"Step 2: Register your application in Azure Active Directory"},{"location":"aad/A01-begin-app/#step-3-verify-permission-to-call-the-microsoft-graph-api","text":"The app registration created an identity for your application; now we need to add permission to call the Microsoft Graph API. The Microsoft Graph is a RESTful API that allows you to access data in Azure AD and Microsoft 365, including Microsoft Teams. While still in the app registration, navigate to \"API Permissions\" 1\ufe0f\u20e3 and notice there is already a permission there, \"User.Read\" 2\ufe0f\u20e3. The permission is for calling the Microsoft Graph, and it allows reading the logged-in user's profile, which includes the user's Employee ID. This permission is \"delegated\" (it acts on behalf of the logged-in user). For an explanation of application vs. delegated permissions, see this documentation or watch this video . Note If \"User.Read\" permission isn't already configured as in the screen shot above (it's included by default in newly registered applications), you need to click \"Add a permission\", then \"Microsoft Graph\", then \"Delegated permissions\", and then find and select the \"User.Read\" permission. More information Understanding Single Sign-On (SSO) with Azure AD Learn about multi-tenant applications The Northwind Orders application uses the Employee ID value in each users's Azure AD profile to locate the user in the Employees table in the Northwind database. The names probably won't match unless you rename them but in a real application the employees and Microsoft 365 users would be the same people.","title":"Step 3: Verify permission to call the Microsoft Graph API"},{"location":"aad/A01-begin-app/#step-4-consent-to-the-permission","text":"You have added the permission but nobody has consented to it. If you return to the permission page for your app, you can see that the new permission has not been granted. 1\ufe0f\u20e3 To fix this, select the \"Grant admin consent for \" button and then agree to grant the consent 2\ufe0f\u20e3. When this is complete, the message \"Granted for \" should be displayed for each permission.","title":"Step 4: Consent to the permission"},{"location":"aad/A01-begin-app/#step-5-expose-an-api","text":"The Northwind Orders app is a full stack application, with code running in the web browser and web server. The browser application accesses data by calling a web API on the server side. To allow this, we need to expose an API in our Azure AD application. This will allow the server to validate Azure AD access tokens from the web browser. Select \"Expose an API\" 1\ufe0f\u20e3 and then \"Add a scope\"2\ufe0f\u20e3. Scopes expose an application's permissions; what you're doing here is adding a permission that your application's browser code can use it when calling the server. On the \"Add a scope\" flyout, edit the Application ID URI to include your ngrok URL between the \"api://\" and the client ID. Select the \"Save and continue\" button to proceed. Now that you've defined the application URI, the \"Add a scope\" flyout will allow you to set up the new permission scope. Fill in the form as follows: - Scope name: access_as_user - Who can consent: Admins only - Admin consent display name: Access as the logged in user - Admin consent description: Access Northwind services as the logged in user - (skip User consent fields) - Ensure the State is set to \"Enabled\" - Select \"Add scope\"","title":"Step 5: Expose an API"},{"location":"aad/A01-begin-app/#exercise-5-configure-and-run-the-application","text":"","title":"Exercise 5: Configure and run the application"},{"location":"aad/A01-begin-app/#step-1-download-the-starting-application","text":"Begin by downloading the app-camp repository at https://github.com/microsoft/app-camp . Select the \"Code\" button and clone or download the content to your computer. The starting code is in the src/create-core-app/aad/A01-begin-app/ folder. Copy this folder to another location on your computer; this will be your working copy to keep the original source separate. Folders are also provided with the final code for the other labs. Note Be sure to copy the A01-begin-app folder to a working location where you can modify the contents as you complete the labs. That way you'll still have a clean copy to start from or to compare with your work.","title":"Step 1: Download the starting application"},{"location":"aad/A01-begin-app/#step-2-install-the-apps-dependencies","text":"Using a command line tool of your choice, navigate to your working copy of the A01-begin-app directory and type the command: npm install This will install the libraries required to run the server side of your solution. Note The client-side code is not bundled as it uses JavaScript Modules (sometimes called ES Modules or ECMAScript Modules). The npm packages are used on the server side.","title":"Step 2: Install the app's dependencies"},{"location":"aad/A01-begin-app/#step-3-download-the-sample-data","text":"The Northwind Orders application uses the venerable Northwind database for sample data. The Northwind Database originally shipped with Microsoft Access, then SQL Server, and now is available as a test OData service from the OData organization . In this step, you'll download the entire Northwind database from this test service to local JSON files, which are used by the Northwind Orders application. Using a command line tool in your working directory, type: npm run db-download This will create a JSON file in the northwindDB folder for each table in the Northwind database. The appliction reads and writes these JSON files. It's generous to call these files a \"database\", but it works well for a single-user lab environment.","title":"Step 3: Download the sample data"},{"location":"aad/A01-begin-app/#step-4-configure-the-app-settings","text":"In a code editor, open the working folder you created in Step 2. Copy the .env_sample file to a new file called .env and open the new file. It will look like this: COMPANY_NAME=Northwind Traders PORT=3978 HOSTNAME=something.ngrok.io TENANT_ID=00000000-0000-0000-0000-000000000000 CLIENT_ID=00000000-0000-0000-0000-000000000000 CLIENT_SECRET=xxxxx Fill in the information you've gathered so far, including your ngrok hostname and the information from the app registration.","title":"Step 4: Configure the app settings"},{"location":"aad/A01-begin-app/#step-5-run-the-application","text":"To run the application, open a command line in your working folder and type: npm start At this point you should be able to browse to your ngrok URL and use the application. Note that due to the ngrok tunnel, you can try your app from anywhere on the Internet. You will quickly be directed to the Microsoft login page. Log in using one of the accounts you set up with an employee ID in Exercise 3, and you should be presented with the app's home page. The home page shows the employee name and picture from the Northwind database. Select \"My Orders\" in the top navigation bar to view the employee's orders. You can click on any order to view the details. From here you can select on any product to view its details. Much of the data is hyperlinked in this fashion. You can also select on \"Products\" in the top navigation to view a list of product categories. From there you can select into a product category to view a list of products, and then you can select into a product to see its details. The product detail page shows all the orders for the product, which leads to a list of orders, and so you can select your way around the sample data. Try logging out and logging in; you should be able to view the orders for another user in your developer tenant who has an employee ID set to a Northwind employee ID. function showCompletionPopup() { let path = window.location.pathname; path = path.endsWith('/') ? path.slice(0, -1) : path; let pathArray = path.split('/'); let leafFolder = pathArray[pathArray.length-1]; let height = window.outerHeight / 1.5; let width = window.outerWidth / 2; window.open(`${window.origin}/app-camp/congrats/${leafFolder}`, 'Congratulations!', `width=${width}, height=${height}, left=100, top=100,`); }","title":"Step 5: Run the application"},{"location":"aad/A01-begin-app/#congratulations","text":"When you have finished this lab, please click this button to let us know! No personal information is collected; we only want to count how many people have completed the labs so we can continue to fund this work!","title":"Congratulations!"},{"location":"aad/A01-begin-app/#known-issues","text":"While it will work on mobile devices, the application is not responsive and will not look good on these devices. This may be addressed in a future version of the lab. For the latest issues, or to file a bug report, see the github issues list for this repository.","title":"Known issues"},{"location":"aad/A01-begin-app/#next-steps","text":"After completing this lab, you may continue to the next lab in this learning path, A02-after-teams-sso: Creating a Teams app with Azure ADO SSO .","title":"Next steps"},{"location":"aad/A02-after-teams-sso/","text":"(function(c,l,a,r,i,t,y){ c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)}; t=l.createElement(r);t.async=1;t.src=\"https://www.clarity.ms/tag/\"+i; y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y); })(window, document, \"clarity\", \"script\", \"dfh6fjbr5x\"); Lab A02: Create a Teams app with Azure AD Single Sign-On Overview This lab is part of Path A, which begins with a Northwind Orders application that already uses Azure AD. Are you on the right path? Expand these notes to find out! There are two options for doing the labs: The \"A\" path is for developers with apps that are already based on Azure Active Directory. The starting app uses Azure Active Directory and the Microsoft Authentication Library (MSAL). the \"B\" path is for developers with apps that use some other identity system. It includes a simple (and not secure!) cookie-based auth system based on the Employees table in the Northwind database. You will use an identity mapping scheme to allow your existing users to log in directly or via Azure AD Single Sign-On. In this lab you will extend the Northwind Orders application as a personal tab in a Teams application. That means the application needs to run in an IFrame; if your app includes code that prevents this, you may need to modify it to look for the Teams referrer URL. The Northwind Orders app doesn't check for IFrames, but Azure AD does, so the existing site won't work without modifications. To accomodate this and to prevent extra user logins, you'll set this tab up to use Teams' Azure AD Single Sign-on. The completed solution can be found in the A02-after-teams-sso folder, but the instructions will guide you through modifying the app running in your working folder. Note that as you complete the labs, the original app should still work outside of Teams! This is often a requirement of ISV's who have an app in market and need to serve an existing customer base outside of Teams. A01-begin-app: Setting up the application with Azure AD A02-after-teams-sso: Creating a Teams app with Azure ADO SSO (\ud83d\udccdYou are here) A03-after-apply-styling: Teams styling and themes In this lab you will learn to: Create an app manifest and package that can be installed into Teams Update your Azure AD app registration to allow Teams to issue tokens on behalf of your application Use the Microsoft Teams JavaScript SDK to request an Azure AD access token Install and test your application in Microsoft Teams Video briefing Lab A02 Briefing Table of Contents (open to display \u25ba) Overview Features Project structure Exercise 1: Authorize Microsoft Teams to log users into your application Step 1: Return to your app registration Step 2: Add the Teams client applications Exercise 2: Create the Teams application package Step 1: Copy the manifest folder to your working directory Step 2: Examine the manifest template Step 3: Add the Teams App ID to the .env file Step 4: Add npm package to create .zip files Step 5: Build the package Exercise 3: Modify the application source code Step 1: Add a module with Teams helper functions Step 2: Update the login code for Teams SSO Step 3: Hide the navigation within Teams Exercise 4: Test your application in Microsoft Teams Step 1: Start the application Step 2: Upload the app package Known issues References Next Steps Features Microsoft Teams personal tab application displays the Northwind Orders web application Users sign into the Teams application transparently using Azure AD SSO Application alters its appearance (hides the top navigation) when running in Teams, allowing Teams tab navigation instead Project structure Project files before and after this lab (open to display \u25ba) The project structure when you start of this lab and end of this lab is as follows. Use this depiction for comparison. On your left is the contents of folder A01-begin-app and on your right is the contents of folder A02-after-teams-sso . \ud83c\udd95 New files/folders \ud83d\udd3aFiles changed Project Structure Before Project Structure After A01-begin-app \u251c\u2500\u2500 client \u2502 \u251c\u2500\u2500 components \u2502 \u251c\u2500\u2500 \ud83d\udd3anavigation.js \u2502 \u2514\u2500\u2500 identity \u2502 \u251c\u2500\u2500 \ud83d\udd3aidentityClient.js \u2502 \u2514\u2500\u2500 userPanel.js \u251c\u2500\u2500 modules \u2502 \u2514\u2500\u2500 env.js \u2502 \u2514\u2500\u2500 northwindDataService.js \u251c\u2500\u2500 pages \u2502 \u2514\u2500\u2500 categories.html \u2502 \u2514\u2500\u2500 categories.js \u2502 \u2514\u2500\u2500 categoryDetails.html \u2502 \u2514\u2500\u2500 categoryDetails.js \u2502 \u2514\u2500\u2500 myOrders.html \u2502 \u2514\u2500\u2500 orderDetail.html \u2502 \u2514\u2500\u2500 orderDetail.js \u2502 \u2514\u2500\u2500 privacy.html \u2502 \u2514\u2500\u2500 productDetail.html \u2502 \u2514\u2500\u2500 productDetail.js \u2502 \u2514\u2500\u2500 termsofuse.html \u251c\u2500\u2500 index.html \u251c\u2500\u2500 index.js \u251c\u2500\u2500 northwind.css \u251c\u2500\u2500 server \u2502 \u2514\u2500\u2500 constants.js \u2502 \u2514\u2500\u2500 identityService.js \u2502 \u2514\u2500\u2500 northwindDataService.js \u2502 \u2514\u2500\u2500 server.js \u251c\u2500\u2500 \ud83d\udd3a.env_Sample \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 \ud83d\udd3apackage.json \u251c\u2500\u2500 README.md A02-after-teams-sso \u251c\u2500\u2500 client \u2502 \u251c\u2500\u2500 components \u2502 \u251c\u2500\u2500 \ud83d\udd3anavigation.js \u2502 \u2514\u2500\u2500 identity \u2502 \u251c\u2500\u2500 \ud83d\udd3aidentityClient.js \u2502 \u2514\u2500\u2500 userPanel.js \u251c\u2500\u2500 modules \u2502 \u2514\u2500\u2500 env.js \u2502 \u2514\u2500\u2500 northwindDataService.js \u2502 \u2514\u2500\u2500 \ud83c\udd95teamsHelpers.js \u251c\u2500\u2500 pages \u2502 \u2514\u2500\u2500 categories.html \u2502 \u2514\u2500\u2500 categories.js \u2502 \u2514\u2500\u2500 categoryDetails.html \u2502 \u2514\u2500\u2500 categoryDetails.js \u2502 \u2514\u2500\u2500 myOrders.html \u2502 \u2514\u2500\u2500 orderDetail.html \u2502 \u2514\u2500\u2500 orderDetail.js \u2502 \u2514\u2500\u2500 privacy.html \u2502 \u2514\u2500\u2500 productDetail.html \u2502 \u2514\u2500\u2500 productDetail.js \u2502 \u2514\u2500\u2500 termsofuse.html \u251c\u2500\u2500 index.html \u251c\u2500\u2500 index.js \u251c\u2500\u2500 northwind.css \u251c\u2500\u2500 \ud83c\udd95manifest \u2502 \u2514\u2500\u2500 \ud83c\udd95makePackage.js \u2502 \u2514\u2500\u2500 \ud83c\udd95manifest.template.json \u2502 \u2514\u2500\u2500 \ud83c\udd95northwind32.png \u2502 \u2514\u2500\u2500 \ud83c\udd95northwind192.png \u251c\u2500\u2500 server \u2502 \u2514\u2500\u2500 constants.js \u2502 \u2514\u2500\u2500 identityService.js \u2502 \u2514\u2500\u2500 northwindDataService.js \u2502 \u2514\u2500\u2500 server.js \u251c\u2500\u2500 \ud83d\udd3a.env_Sample \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 \ud83d\udd3apackage.json \u251c\u2500\u2500 README.md Exercise 1: Authorize Microsoft Teams to log users into your application The starting application logs users into Azure Active Directory using the Microsoft Authentication Library (MSAL) . While this works well in a web browser, it won't work reliably in a Microsoft Teams application. Instead, Microsoft Teams provides a Single Sign-On (SSO) capability so users are silently logged into your application using the same credentials they used to log into Microsoft Teams. This requires giving Microsoft Teams permission to issue Azure AD tokens on behalf of your application. In this exercise, you'll provide that permission. Step 1: Return to your app registration Return to the Azure AD admin portal and make sure you're logged in as the administrator of your development tenant. Click \"Azure Active Directory\" 1\ufe0f\u20e3 and then \"App Registrations\" 2\ufe0f\u20e3. Select the app you registered earlier to view the application overview. Step 2: Add the Teams client applications Click \"Expose an API\" 1\ufe0f\u20e3 and then \"+ Add a client application\" 2\ufe0f\u20e3. Paste the ID for the Teams mobile or desktop app, which is 1fec8e78-bce4-4aaf-ab1b-5451cc387264 , into the Client ID field in the flyout 1\ufe0f\u20e3 and check the scope you created earlier 2\ufe0f\u20e3 to allow Teams to issue tokens for that scope. Then click \"Add application\" 3\ufe0f\u20e3 to save your work. Repeat the process for the Teams web application, 5e3ce6c0-2b1f-4285-8d4b-75ee78787346 . Warning These app ID's, 1fec8e78-bce4-4aaf-ab1b-5451cc387264 and 5e3ce6c0-2b1f-4285-8d4b-75ee78787346 , are the exact ID's you should use; they are not examples. These are the ID's for the Teams mobile/desktop app and Teams web app that are registered in Microsoft's tenant for use by every customer who uses Microsoft Teams. Exercise 2: Create the Teams application package Microsoft Teams applications don't run \"inside\" of Microsoft Teams, they just appear in the Teams user interface. A tab in Teams is just a web page, which could be hosted anywhere as long as the Teams client can reach it. To create a Teams application, you need to create a file called manifest.json which contains the information Teams needs to display the app , such as the URL of the Northwind Orders application. This file is placed in a .zip file along with the application icons, and the resulting application package is uploaded into Teams or distributed through the Teams app store. In this exercise you'll create a manifest.json file and application package for the Northwind Orders app and upload it into Microsoft Teams. Step 1: Copy the manifest folder to your working directory Many developers use the Teams Developer Portal to create an app package; this is preferred by many enterprise developer and systems integrators. However ISV's may want to keep the app package settings in their source control system, and that's the approach used in the lab. It's just a zip file; you can create it any way you want! The Teams developer portal is important even if you generate your own app package! Import your pacakge into the Teams Developer Portal to run validation checks prior to submitting it to the Teams app store! If you do this periodically during development you can catch issues earlier and avoid rework. Go to your local copy of the A02-TeamsSSO folder on your computer and copy the manifest folder into the working folder you used in the previous lab. This folder contains a template for building the manifest.json file. Step 2: Examine the manifest template In the manifest folder you just copied, open manifest.template.json in your code editor. This is the JSON that Teams needs to display your application. Notice that the template contains tokens such as <HOST_NAME> and <CLIENT_ID> . A small build script will take these values from your .env file and plug them into the manifest. However there's one token, <TEAMS_APP_ID> that's not yet in the .env file; we'll add that in the next step. Examine the staticTabs property in the manifest. It defines two tabs, one for the \"My Orders\" page and one for the \"Products\" page. The contentUrl is used within the Teams application, and websiteUrl is used if Teams can't render the tab and needs to launch it in a regular web browser. The Northwind Orders app will use the same code URL's for both. \"staticTabs\": [ { \"entityId\": \"Orders\", \"name\": \"My Orders\", \"contentUrl\": \"https://<HOST_NAME>/pages/myOrders.html\", \"websiteUrl\": \"https://<HOST_NAME>/pages/myOrders.html\", \"scopes\": [ \"personal\" ] }, { \"entityId\": \"Products\", \"name\": \"Products\", \"contentUrl\": \"https://<HOST_NAME>/pages/categories.html\", \"websiteUrl\": \"https://<HOST_NAME>/pages/categories.html\", \"scopes\": [ \"personal\" ] Now examine the webApplicationInfo property. It contains the information Teams needs to obtain an access token using Single Sign On. \"webApplicationInfo\": { \"id\": \"<CLIENT_ID>\", \"resource\": \"api://<HOST_NAME>/<CLIENT_ID>\" } Step 3: Add the Teams App ID to the .env file Open the .env file in your working directory and add this line to the values from Lab A01 : TEAMS_APP_ID=1331dbd6-08eb-4123-9713-017d9e0fc04a You should generate a different GUID for each application you register; this one is just here for your convenience. We could have hard-coded the app ID in the manifest.json template, but there are times when you need it in your code, so this will make that possible in the future. Step 4: Add npm package to create .zip files Run this command in your working application folder: npm install adm-zip --save-dev Step 5: Build the package Open the package.json file in your working directory and add a script that will generate the app package. The script code is in the manifest folder you just copied, so we just need to declare it in package.json. This is what scripts property should look like when you're done. \"scripts\": { \"start\": \"nodemon server/server.js\", \"debug\": \"nodemon --inspect server/server.js\", \"db-download\": \"node northwindDB/dbDownload.js\", \"package\": \"node manifest/makePackage.js\" }, Now you can build a new package at any time with this command: npm run package Go ahead and run it, and two new files, manifest.json and northwind.zip (the app package) should appear in your manifest folder. Exercise 3: Modify the application source code Step 1: Add a module with Teams helper functions Create a file called teamsHelpers.js in the client/modules folder , and paste in this code: import 'https://res.cdn.office.net/teams-js/2.0.0/js/MicrosoftTeams.min.js'; // Ensure that the Teams SDK is initialized once no matter how often this is called let teamsInitPromise; export function ensureTeamsSdkInitialized() { if (!teamsInitPromise) { teamsInitPromise = microsoftTeams.app.initialize(); } return teamsInitPromise; } // Function returns a promise which resolves to true if we're running in Teams export async function inTeams() { try { await ensureTeamsSdkInitialized(); const context = await microsoftTeams.app.getContext(); return (context.app.host.name === microsoftTeams.HostName.teams); } catch (e) { console.log(`${e} from Teams SDK, may be running outside of Teams`); return false; } } These functions are used throughout the application to manage the Microsoft Teams JavaScript SDK. Before using the Microsoft Teams JavaScript SDK for the first time on a page, you need to call the microsoftTeams.app.initialize() function . The first function in teamsHelpers.js will ensure that initialize() has been called exactly once on the page.W The inTeams() function is used to determine if the application is running in Microsoft Teams or not. You may want to check out the microsoftTeams.Hostname enumeration to see other places where Teams applications will be able to run in the near future! Step 2: Update the login code for Teams SSO Open the client/identity/identityClient.js file and add these import statements near the top. import { ensureTeamsSdkInitialized, inTeams } from '/modules/teamsHelpers.js'; import 'https://res.cdn.office.net/teams-js/2.0.0/js/MicrosoftTeams.min.js'; The first import, of course, is the Teams helper functions we just added. It's a JavaScript module so there is no bundling; the browser will resolve the import at runtime. The second import will load the Teams JavaScript SDK, which creates a global object microsoftTeams that we can use to access the SDK. You could also load it using a <script> tag or, if you bundle your client-side JavaScript, using the @microsoft/teams-js npm package. Now modify the getAccessToken2() function to include this code at the top: if (await inTeams()) { await ensureTeamsSdkInitialized(); return await microsoftTeams.authentication.getAuthToken(); } else { // existing code } This code checks to see if it's running in Teams and if so, uses the Teams JavaScript SDK's getAuthToken() function to get the access token needed to call the server. The completed getAccessToken2() function should look like this: async function getAccessToken2() { if (await inTeams()) { await ensureTeamsSdkInitialized(); return await microsoftTeams.authentication.getAuthToken(); } else { // If we were waiting for a redirect with an auth code, handle it here await msalClient.handleRedirectPromise(); try { await msalClient.ssoSilent(msalRequest); } catch (error) { await msalClient.loginRedirect(msalRequest); } const accounts = msalClient.getAllAccounts(); if (accounts.length === 1) { msalRequest.account = accounts[0]; } else { throw (\"Error: Too many or no accounts logged in\"); } let accessToken; try { const tokenResponse = await msalClient.acquireTokenSilent(msalRequest); accessToken = tokenResponse.accessToken; return accessToken; } catch (error) { if (error instanceof msal.InteractionRequiredAuthError) { console.warn(\"Silent token acquisition failed; acquiring token using redirect\"); this.msalClient.acquireTokenRedirect(this.request); } else { throw (error); } } } } Finally, update the logoff function to disable logging off if it's running in Teams. export async function logoff() { getLoggedInEmployeeIdPromise = null; getAccessTokenPromise = null; if (!(await inTeams())) { msalClient.logoutRedirect(msalRequest); } } Step 3: Hide the navigation within Teams Microsoft Teams already has multiple levels of navigation, including multiple tabs as configured in the previous exercise. So the applications' built-in navigation is redundant in Teams. To hide the built-in navigation in Teams, open the client/components/navigation.js file and add this import statement at the top. import { inTeams } from '../modules/teamsHelpers.js'; Now modify the connectedCallback() function, which displays the navigation web component, to skip rendering if it's running in Teams. The resulting function should look like this: async connectedCallback() { if (!(await inTeams())) { let listItemHtml = \"\"; topNavLinks.forEach(link => { if (window.location.href.indexOf(link.url) < 0) { listItemHtml += '<li><a href=\"' + link.url + '\">' + link.text + '</a></li>'; } else { return listItemHtml += '<li><a href=\"' + link.url + '\" class=\"selected\">' + link.text + '</a></li>'; } }); this.innerHTML = ` <ul class=\"topnav\">${listItemHtml}</ul> `; } } About web components Web components are encapsulated custom HTML elements. They're not a Teams thing, nor do they use React or another UI library; they're built right into modern web browsers! You can learn more in this article Exercise 4: Test your application in Microsoft Teams Step 1: Start the application Now it's time to run your updated application and run it in Microsoft Teams. Start the application with this command: npm start Step 2: Upload the app package In the Teams web or desktop UI, click \"Apps\" in the sidebar 1\ufe0f\u20e3, then \"Manage your apps\" 2\ufe0f\u20e3. At this point you have three choices: Upload a custom app (upload the app for yourself or a specific team or group chat) - this only appears if you have enabled \"Upload custom apps\" in your setup policy; this was a step in the previous lab Upload an app to your org's app catalog (upload the app for use within your organization) - this only appears if you are a tenant administrator Submit an app to your org (initiate a workflow asking a tenant administrator to install your app) - this appears for everyone In this case, choose the first option 3\ufe0f\u20e3. Navigate to the Northwind.zip file in your manifest directory and upload it. Teams will display the application information; click the \"Add\" button to install it for your personal use. Step 3: Run the application The application should appear without any login prompt. The app's navigation should not be displayed; instead users can navigate to \"My Orders\" or \"Products\" using the tabs in the Teams app. function showCompletionPopup() { let path = window.location.pathname; path = path.endsWith('/') ? path.slice(0, -1) : path; let pathArray = path.split('/'); let leafFolder = pathArray[pathArray.length-1]; let height = window.outerHeight / 1.5; let width = window.outerWidth / 2; window.open(`${window.origin}/app-camp/congrats/${leafFolder}`, 'Congratulations!', `width=${width}, height=${height}, left=100, top=100,`); } Congratulations! When you have finished this lab, please click this button to let us know! No personal information is collected; we only want to count how many people have completed the labs so we can continue to fund this work! Challenge You might have noticed the logout button doesn't do anything in Teams! If you wish, hide the logout button just as you hid the navigation bar. The code is in client/identity/userPanel.js. Known issues While it will work on mobile devices, the application is not responsive and will not look good on these devices. This may be addressed in a future version of the lab. For the latest issues, or to file a bug report, see the github issues list for this repository. References Single sign-on (SSO) support for Tabs Next Steps After completing this lab, you may continue to the next lab in this learning path, A03-after-apply-styling: Teams styling and themes .","title":"A02 - Create a Teams app with Azure AD Teams SSO"},{"location":"aad/A02-after-teams-sso/#lab-a02-create-a-teams-app-with-azure-ad-single-sign-on","text":"","title":"Lab A02: Create a Teams app with Azure AD Single Sign-On"},{"location":"aad/A02-after-teams-sso/#overview","text":"This lab is part of Path A, which begins with a Northwind Orders application that already uses Azure AD. Are you on the right path? Expand these notes to find out! There are two options for doing the labs: The \"A\" path is for developers with apps that are already based on Azure Active Directory. The starting app uses Azure Active Directory and the Microsoft Authentication Library (MSAL). the \"B\" path is for developers with apps that use some other identity system. It includes a simple (and not secure!) cookie-based auth system based on the Employees table in the Northwind database. You will use an identity mapping scheme to allow your existing users to log in directly or via Azure AD Single Sign-On. In this lab you will extend the Northwind Orders application as a personal tab in a Teams application. That means the application needs to run in an IFrame; if your app includes code that prevents this, you may need to modify it to look for the Teams referrer URL. The Northwind Orders app doesn't check for IFrames, but Azure AD does, so the existing site won't work without modifications. To accomodate this and to prevent extra user logins, you'll set this tab up to use Teams' Azure AD Single Sign-on. The completed solution can be found in the A02-after-teams-sso folder, but the instructions will guide you through modifying the app running in your working folder. Note that as you complete the labs, the original app should still work outside of Teams! This is often a requirement of ISV's who have an app in market and need to serve an existing customer base outside of Teams. A01-begin-app: Setting up the application with Azure AD A02-after-teams-sso: Creating a Teams app with Azure ADO SSO (\ud83d\udccdYou are here) A03-after-apply-styling: Teams styling and themes In this lab you will learn to: Create an app manifest and package that can be installed into Teams Update your Azure AD app registration to allow Teams to issue tokens on behalf of your application Use the Microsoft Teams JavaScript SDK to request an Azure AD access token Install and test your application in Microsoft Teams Video briefing Lab A02 Briefing Table of Contents (open to display \u25ba) Overview Features Project structure Exercise 1: Authorize Microsoft Teams to log users into your application Step 1: Return to your app registration Step 2: Add the Teams client applications Exercise 2: Create the Teams application package Step 1: Copy the manifest folder to your working directory Step 2: Examine the manifest template Step 3: Add the Teams App ID to the .env file Step 4: Add npm package to create .zip files Step 5: Build the package Exercise 3: Modify the application source code Step 1: Add a module with Teams helper functions Step 2: Update the login code for Teams SSO Step 3: Hide the navigation within Teams Exercise 4: Test your application in Microsoft Teams Step 1: Start the application Step 2: Upload the app package Known issues References Next Steps","title":"Overview"},{"location":"aad/A02-after-teams-sso/#features","text":"Microsoft Teams personal tab application displays the Northwind Orders web application Users sign into the Teams application transparently using Azure AD SSO Application alters its appearance (hides the top navigation) when running in Teams, allowing Teams tab navigation instead","title":"Features"},{"location":"aad/A02-after-teams-sso/#project-structure","text":"Project files before and after this lab (open to display \u25ba) The project structure when you start of this lab and end of this lab is as follows. Use this depiction for comparison. On your left is the contents of folder A01-begin-app and on your right is the contents of folder A02-after-teams-sso . \ud83c\udd95 New files/folders \ud83d\udd3aFiles changed Project Structure Before Project Structure After A01-begin-app \u251c\u2500\u2500 client \u2502 \u251c\u2500\u2500 components \u2502 \u251c\u2500\u2500 \ud83d\udd3anavigation.js \u2502 \u2514\u2500\u2500 identity \u2502 \u251c\u2500\u2500 \ud83d\udd3aidentityClient.js \u2502 \u2514\u2500\u2500 userPanel.js \u251c\u2500\u2500 modules \u2502 \u2514\u2500\u2500 env.js \u2502 \u2514\u2500\u2500 northwindDataService.js \u251c\u2500\u2500 pages \u2502 \u2514\u2500\u2500 categories.html \u2502 \u2514\u2500\u2500 categories.js \u2502 \u2514\u2500\u2500 categoryDetails.html \u2502 \u2514\u2500\u2500 categoryDetails.js \u2502 \u2514\u2500\u2500 myOrders.html \u2502 \u2514\u2500\u2500 orderDetail.html \u2502 \u2514\u2500\u2500 orderDetail.js \u2502 \u2514\u2500\u2500 privacy.html \u2502 \u2514\u2500\u2500 productDetail.html \u2502 \u2514\u2500\u2500 productDetail.js \u2502 \u2514\u2500\u2500 termsofuse.html \u251c\u2500\u2500 index.html \u251c\u2500\u2500 index.js \u251c\u2500\u2500 northwind.css \u251c\u2500\u2500 server \u2502 \u2514\u2500\u2500 constants.js \u2502 \u2514\u2500\u2500 identityService.js \u2502 \u2514\u2500\u2500 northwindDataService.js \u2502 \u2514\u2500\u2500 server.js \u251c\u2500\u2500 \ud83d\udd3a.env_Sample \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 \ud83d\udd3apackage.json \u251c\u2500\u2500 README.md A02-after-teams-sso \u251c\u2500\u2500 client \u2502 \u251c\u2500\u2500 components \u2502 \u251c\u2500\u2500 \ud83d\udd3anavigation.js \u2502 \u2514\u2500\u2500 identity \u2502 \u251c\u2500\u2500 \ud83d\udd3aidentityClient.js \u2502 \u2514\u2500\u2500 userPanel.js \u251c\u2500\u2500 modules \u2502 \u2514\u2500\u2500 env.js \u2502 \u2514\u2500\u2500 northwindDataService.js \u2502 \u2514\u2500\u2500 \ud83c\udd95teamsHelpers.js \u251c\u2500\u2500 pages \u2502 \u2514\u2500\u2500 categories.html \u2502 \u2514\u2500\u2500 categories.js \u2502 \u2514\u2500\u2500 categoryDetails.html \u2502 \u2514\u2500\u2500 categoryDetails.js \u2502 \u2514\u2500\u2500 myOrders.html \u2502 \u2514\u2500\u2500 orderDetail.html \u2502 \u2514\u2500\u2500 orderDetail.js \u2502 \u2514\u2500\u2500 privacy.html \u2502 \u2514\u2500\u2500 productDetail.html \u2502 \u2514\u2500\u2500 productDetail.js \u2502 \u2514\u2500\u2500 termsofuse.html \u251c\u2500\u2500 index.html \u251c\u2500\u2500 index.js \u251c\u2500\u2500 northwind.css \u251c\u2500\u2500 \ud83c\udd95manifest \u2502 \u2514\u2500\u2500 \ud83c\udd95makePackage.js \u2502 \u2514\u2500\u2500 \ud83c\udd95manifest.template.json \u2502 \u2514\u2500\u2500 \ud83c\udd95northwind32.png \u2502 \u2514\u2500\u2500 \ud83c\udd95northwind192.png \u251c\u2500\u2500 server \u2502 \u2514\u2500\u2500 constants.js \u2502 \u2514\u2500\u2500 identityService.js \u2502 \u2514\u2500\u2500 northwindDataService.js \u2502 \u2514\u2500\u2500 server.js \u251c\u2500\u2500 \ud83d\udd3a.env_Sample \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 \ud83d\udd3apackage.json \u251c\u2500\u2500 README.md","title":"Project structure"},{"location":"aad/A02-after-teams-sso/#exercise-1-authorize-microsoft-teams-to-log-users-into-your-application","text":"The starting application logs users into Azure Active Directory using the Microsoft Authentication Library (MSAL) . While this works well in a web browser, it won't work reliably in a Microsoft Teams application. Instead, Microsoft Teams provides a Single Sign-On (SSO) capability so users are silently logged into your application using the same credentials they used to log into Microsoft Teams. This requires giving Microsoft Teams permission to issue Azure AD tokens on behalf of your application. In this exercise, you'll provide that permission.","title":"Exercise 1: Authorize Microsoft Teams to log users into your application"},{"location":"aad/A02-after-teams-sso/#step-1-return-to-your-app-registration","text":"Return to the Azure AD admin portal and make sure you're logged in as the administrator of your development tenant. Click \"Azure Active Directory\" 1\ufe0f\u20e3 and then \"App Registrations\" 2\ufe0f\u20e3. Select the app you registered earlier to view the application overview.","title":"Step 1: Return to your app registration"},{"location":"aad/A02-after-teams-sso/#step-2-add-the-teams-client-applications","text":"Click \"Expose an API\" 1\ufe0f\u20e3 and then \"+ Add a client application\" 2\ufe0f\u20e3. Paste the ID for the Teams mobile or desktop app, which is 1fec8e78-bce4-4aaf-ab1b-5451cc387264 , into the Client ID field in the flyout 1\ufe0f\u20e3 and check the scope you created earlier 2\ufe0f\u20e3 to allow Teams to issue tokens for that scope. Then click \"Add application\" 3\ufe0f\u20e3 to save your work. Repeat the process for the Teams web application, 5e3ce6c0-2b1f-4285-8d4b-75ee78787346 . Warning These app ID's, 1fec8e78-bce4-4aaf-ab1b-5451cc387264 and 5e3ce6c0-2b1f-4285-8d4b-75ee78787346 , are the exact ID's you should use; they are not examples. These are the ID's for the Teams mobile/desktop app and Teams web app that are registered in Microsoft's tenant for use by every customer who uses Microsoft Teams.","title":"Step 2: Add the Teams client applications"},{"location":"aad/A02-after-teams-sso/#exercise-2-create-the-teams-application-package","text":"Microsoft Teams applications don't run \"inside\" of Microsoft Teams, they just appear in the Teams user interface. A tab in Teams is just a web page, which could be hosted anywhere as long as the Teams client can reach it. To create a Teams application, you need to create a file called manifest.json which contains the information Teams needs to display the app , such as the URL of the Northwind Orders application. This file is placed in a .zip file along with the application icons, and the resulting application package is uploaded into Teams or distributed through the Teams app store. In this exercise you'll create a manifest.json file and application package for the Northwind Orders app and upload it into Microsoft Teams.","title":"Exercise 2: Create the Teams application package"},{"location":"aad/A02-after-teams-sso/#step-1-copy-the-manifest-folder-to-your-working-directory","text":"Many developers use the Teams Developer Portal to create an app package; this is preferred by many enterprise developer and systems integrators. However ISV's may want to keep the app package settings in their source control system, and that's the approach used in the lab. It's just a zip file; you can create it any way you want! The Teams developer portal is important even if you generate your own app package! Import your pacakge into the Teams Developer Portal to run validation checks prior to submitting it to the Teams app store! If you do this periodically during development you can catch issues earlier and avoid rework. Go to your local copy of the A02-TeamsSSO folder on your computer and copy the manifest folder into the working folder you used in the previous lab. This folder contains a template for building the manifest.json file.","title":"Step 1: Copy the manifest folder to your working directory"},{"location":"aad/A02-after-teams-sso/#step-2-examine-the-manifest-template","text":"In the manifest folder you just copied, open manifest.template.json in your code editor. This is the JSON that Teams needs to display your application. Notice that the template contains tokens such as <HOST_NAME> and <CLIENT_ID> . A small build script will take these values from your .env file and plug them into the manifest. However there's one token, <TEAMS_APP_ID> that's not yet in the .env file; we'll add that in the next step. Examine the staticTabs property in the manifest. It defines two tabs, one for the \"My Orders\" page and one for the \"Products\" page. The contentUrl is used within the Teams application, and websiteUrl is used if Teams can't render the tab and needs to launch it in a regular web browser. The Northwind Orders app will use the same code URL's for both. \"staticTabs\": [ { \"entityId\": \"Orders\", \"name\": \"My Orders\", \"contentUrl\": \"https://<HOST_NAME>/pages/myOrders.html\", \"websiteUrl\": \"https://<HOST_NAME>/pages/myOrders.html\", \"scopes\": [ \"personal\" ] }, { \"entityId\": \"Products\", \"name\": \"Products\", \"contentUrl\": \"https://<HOST_NAME>/pages/categories.html\", \"websiteUrl\": \"https://<HOST_NAME>/pages/categories.html\", \"scopes\": [ \"personal\" ] Now examine the webApplicationInfo property. It contains the information Teams needs to obtain an access token using Single Sign On. \"webApplicationInfo\": { \"id\": \"<CLIENT_ID>\", \"resource\": \"api://<HOST_NAME>/<CLIENT_ID>\" }","title":"Step 2: Examine the manifest template"},{"location":"aad/A02-after-teams-sso/#step-3-add-the-teams-app-id-to-the-env-file","text":"Open the .env file in your working directory and add this line to the values from Lab A01 : TEAMS_APP_ID=1331dbd6-08eb-4123-9713-017d9e0fc04a You should generate a different GUID for each application you register; this one is just here for your convenience. We could have hard-coded the app ID in the manifest.json template, but there are times when you need it in your code, so this will make that possible in the future.","title":"Step 3: Add the Teams App ID to the .env file"},{"location":"aad/A02-after-teams-sso/#step-4-add-npm-package-to-create-zip-files","text":"Run this command in your working application folder: npm install adm-zip --save-dev","title":"Step 4: Add npm package to create .zip files"},{"location":"aad/A02-after-teams-sso/#step-5-build-the-package","text":"Open the package.json file in your working directory and add a script that will generate the app package. The script code is in the manifest folder you just copied, so we just need to declare it in package.json. This is what scripts property should look like when you're done. \"scripts\": { \"start\": \"nodemon server/server.js\", \"debug\": \"nodemon --inspect server/server.js\", \"db-download\": \"node northwindDB/dbDownload.js\", \"package\": \"node manifest/makePackage.js\" }, Now you can build a new package at any time with this command: npm run package Go ahead and run it, and two new files, manifest.json and northwind.zip (the app package) should appear in your manifest folder.","title":"Step 5: Build the package"},{"location":"aad/A02-after-teams-sso/#exercise-3-modify-the-application-source-code","text":"","title":"Exercise 3: Modify the application source code"},{"location":"aad/A02-after-teams-sso/#step-1-add-a-module-with-teams-helper-functions","text":"Create a file called teamsHelpers.js in the client/modules folder , and paste in this code: import 'https://res.cdn.office.net/teams-js/2.0.0/js/MicrosoftTeams.min.js'; // Ensure that the Teams SDK is initialized once no matter how often this is called let teamsInitPromise; export function ensureTeamsSdkInitialized() { if (!teamsInitPromise) { teamsInitPromise = microsoftTeams.app.initialize(); } return teamsInitPromise; } // Function returns a promise which resolves to true if we're running in Teams export async function inTeams() { try { await ensureTeamsSdkInitialized(); const context = await microsoftTeams.app.getContext(); return (context.app.host.name === microsoftTeams.HostName.teams); } catch (e) { console.log(`${e} from Teams SDK, may be running outside of Teams`); return false; } } These functions are used throughout the application to manage the Microsoft Teams JavaScript SDK. Before using the Microsoft Teams JavaScript SDK for the first time on a page, you need to call the microsoftTeams.app.initialize() function . The first function in teamsHelpers.js will ensure that initialize() has been called exactly once on the page.W The inTeams() function is used to determine if the application is running in Microsoft Teams or not. You may want to check out the microsoftTeams.Hostname enumeration to see other places where Teams applications will be able to run in the near future!","title":"Step 1: Add a module with Teams helper functions"},{"location":"aad/A02-after-teams-sso/#step-2-update-the-login-code-for-teams-sso","text":"Open the client/identity/identityClient.js file and add these import statements near the top. import { ensureTeamsSdkInitialized, inTeams } from '/modules/teamsHelpers.js'; import 'https://res.cdn.office.net/teams-js/2.0.0/js/MicrosoftTeams.min.js'; The first import, of course, is the Teams helper functions we just added. It's a JavaScript module so there is no bundling; the browser will resolve the import at runtime. The second import will load the Teams JavaScript SDK, which creates a global object microsoftTeams that we can use to access the SDK. You could also load it using a <script> tag or, if you bundle your client-side JavaScript, using the @microsoft/teams-js npm package. Now modify the getAccessToken2() function to include this code at the top: if (await inTeams()) { await ensureTeamsSdkInitialized(); return await microsoftTeams.authentication.getAuthToken(); } else { // existing code } This code checks to see if it's running in Teams and if so, uses the Teams JavaScript SDK's getAuthToken() function to get the access token needed to call the server. The completed getAccessToken2() function should look like this: async function getAccessToken2() { if (await inTeams()) { await ensureTeamsSdkInitialized(); return await microsoftTeams.authentication.getAuthToken(); } else { // If we were waiting for a redirect with an auth code, handle it here await msalClient.handleRedirectPromise(); try { await msalClient.ssoSilent(msalRequest); } catch (error) { await msalClient.loginRedirect(msalRequest); } const accounts = msalClient.getAllAccounts(); if (accounts.length === 1) { msalRequest.account = accounts[0]; } else { throw (\"Error: Too many or no accounts logged in\"); } let accessToken; try { const tokenResponse = await msalClient.acquireTokenSilent(msalRequest); accessToken = tokenResponse.accessToken; return accessToken; } catch (error) { if (error instanceof msal.InteractionRequiredAuthError) { console.warn(\"Silent token acquisition failed; acquiring token using redirect\"); this.msalClient.acquireTokenRedirect(this.request); } else { throw (error); } } } } Finally, update the logoff function to disable logging off if it's running in Teams. export async function logoff() { getLoggedInEmployeeIdPromise = null; getAccessTokenPromise = null; if (!(await inTeams())) { msalClient.logoutRedirect(msalRequest); } }","title":"Step 2: Update the login code for Teams SSO"},{"location":"aad/A02-after-teams-sso/#step-3-hide-the-navigation-within-teams","text":"Microsoft Teams already has multiple levels of navigation, including multiple tabs as configured in the previous exercise. So the applications' built-in navigation is redundant in Teams. To hide the built-in navigation in Teams, open the client/components/navigation.js file and add this import statement at the top. import { inTeams } from '../modules/teamsHelpers.js'; Now modify the connectedCallback() function, which displays the navigation web component, to skip rendering if it's running in Teams. The resulting function should look like this: async connectedCallback() { if (!(await inTeams())) { let listItemHtml = \"\"; topNavLinks.forEach(link => { if (window.location.href.indexOf(link.url) < 0) { listItemHtml += '<li><a href=\"' + link.url + '\">' + link.text + '</a></li>'; } else { return listItemHtml += '<li><a href=\"' + link.url + '\" class=\"selected\">' + link.text + '</a></li>'; } }); this.innerHTML = ` <ul class=\"topnav\">${listItemHtml}</ul> `; } } About web components Web components are encapsulated custom HTML elements. They're not a Teams thing, nor do they use React or another UI library; they're built right into modern web browsers! You can learn more in this article","title":"Step 3: Hide the navigation within Teams"},{"location":"aad/A02-after-teams-sso/#exercise-4-test-your-application-in-microsoft-teams","text":"","title":"Exercise 4: Test your application in Microsoft Teams"},{"location":"aad/A02-after-teams-sso/#step-1-start-the-application","text":"Now it's time to run your updated application and run it in Microsoft Teams. Start the application with this command: npm start","title":"Step 1: Start the application"},{"location":"aad/A02-after-teams-sso/#step-2-upload-the-app-package","text":"In the Teams web or desktop UI, click \"Apps\" in the sidebar 1\ufe0f\u20e3, then \"Manage your apps\" 2\ufe0f\u20e3. At this point you have three choices: Upload a custom app (upload the app for yourself or a specific team or group chat) - this only appears if you have enabled \"Upload custom apps\" in your setup policy; this was a step in the previous lab Upload an app to your org's app catalog (upload the app for use within your organization) - this only appears if you are a tenant administrator Submit an app to your org (initiate a workflow asking a tenant administrator to install your app) - this appears for everyone In this case, choose the first option 3\ufe0f\u20e3. Navigate to the Northwind.zip file in your manifest directory and upload it. Teams will display the application information; click the \"Add\" button to install it for your personal use.","title":"Step 2: Upload the app package"},{"location":"aad/A02-after-teams-sso/#step-3-run-the-application","text":"The application should appear without any login prompt. The app's navigation should not be displayed; instead users can navigate to \"My Orders\" or \"Products\" using the tabs in the Teams app. function showCompletionPopup() { let path = window.location.pathname; path = path.endsWith('/') ? path.slice(0, -1) : path; let pathArray = path.split('/'); let leafFolder = pathArray[pathArray.length-1]; let height = window.outerHeight / 1.5; let width = window.outerWidth / 2; window.open(`${window.origin}/app-camp/congrats/${leafFolder}`, 'Congratulations!', `width=${width}, height=${height}, left=100, top=100,`); }","title":"Step 3: Run the application"},{"location":"aad/A02-after-teams-sso/#congratulations","text":"When you have finished this lab, please click this button to let us know! No personal information is collected; we only want to count how many people have completed the labs so we can continue to fund this work! Challenge You might have noticed the logout button doesn't do anything in Teams! If you wish, hide the logout button just as you hid the navigation bar. The code is in client/identity/userPanel.js.","title":"Congratulations!"},{"location":"aad/A02-after-teams-sso/#known-issues","text":"While it will work on mobile devices, the application is not responsive and will not look good on these devices. This may be addressed in a future version of the lab. For the latest issues, or to file a bug report, see the github issues list for this repository.","title":"Known issues"},{"location":"aad/A02-after-teams-sso/#references","text":"Single sign-on (SSO) support for Tabs","title":"References"},{"location":"aad/A02-after-teams-sso/#next-steps","text":"After completing this lab, you may continue to the next lab in this learning path, A03-after-apply-styling: Teams styling and themes .","title":"Next Steps"},{"location":"aad/A03-after-apply-styling/","text":"(function(c,l,a,r,i,t,y){ c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)}; t=l.createElement(r);t.async=1;t.src=\"https://www.clarity.ms/tag/\"+i; y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y); })(window, document, \"clarity\", \"script\", \"dfh6fjbr5x\"); Lab A03: Teams styling and themes Overview This lab is part of Path A, which begins with a Northwind Orders application that already uses Azure AD. Are you on the right path? Expand these notes to find out! There are two options for doing the labs: The \"A\" path is for developers with apps that are already based on Azure Active Directory. The starting app uses Azure Active Directory and the Microsoft Authentication Library (MSAL). the \"B\" path is for developers with apps that use some other identity system. It includes a simple (and not secure!) cookie-based auth system based on the Employees table in the Northwind database. You will use an identity mapping scheme to allow your existing users to log in directly or via Azure AD Single Sign-On. In this lab you will begin with the completed with the application in folder A02-after-teams-sso , make changes as per the steps below to achieve what is in the folder A03-after-apply-styling . A01-begin-app: Setting up the application with Azure AD A02-after-teams-sso: Creating a Teams app with Azure ADO SSO A03-after-apply-styling: Teams styling and themes (\ud83d\udccdYou are here) In this lab you will learn to: Apply styles based on the Microsoft Teams figma to make your application look like it belongs in Microsoft Teams Display your application with the same color theme the user has selected in Microsoft Teams Switch your application's theme when the user changes the Microsoft Teams theme setting Video briefing Lab A03 Briefing Table of Contents (open to display \u25ba) Overview Features Exercise 1: Add CSS Step 1: Create a CSS file for Teams theme styles Step 2: Import the new CSS Exercise 2: Update and run the project Step 1: Modify modules\\teamsHelpers.js Step 2: Start your local project Step 3: Run the application in Teams client Next steps Features Apply teams styling and themes to your existing application. Display and update themes along with the Microsoft Teams client Project structure Project files before and after this lab (open to display \u25ba) The project structure when you start of this lab and end of this lab is as follows. Use this depiction for comparison. On your left is the contents of folder A03-TeamsSSO and on your right is the contents of folder A04-StyleAndThemes . \ud83c\udd95 New files/folders \ud83d\udd3aFiles changed Project Structure Before Project Structure After A02-after-teams-sso \u251c\u2500\u2500 client \u2502 \u251c\u2500\u2500 components \u2502 \u251c\u2500\u2500 navigation.js \u2502 \u2514\u2500\u2500 identity \u2502 \u251c\u2500\u2500 identityClient.js \u2502 \u2514\u2500\u2500 userPanel.js \u251c\u2500\u2500 modules \u2502 \u2514\u2500\u2500 env.js \u2502 \u2514\u2500\u2500 northwindDataService.js \u2502 \u2514\u2500\u2500 \ud83d\udd3ateamsHelpers.js \u251c\u2500\u2500 pages \u2502 \u2514\u2500\u2500 categories.html \u2502 \u2514\u2500\u2500 categories.js \u2502 \u2514\u2500\u2500 categoryDetails.html \u2502 \u2514\u2500\u2500 categoryDetails.js \u2502 \u2514\u2500\u2500 myOrders.html \u2502 \u2514\u2500\u2500 orderDetail.html \u2502 \u2514\u2500\u2500 orderDetail.js \u2502 \u2514\u2500\u2500 privacy.html \u2502 \u2514\u2500\u2500 productDetail.html \u2502 \u2514\u2500\u2500 productDetail.js \u2502 \u2514\u2500\u2500 termsofuse.html \u251c\u2500\u2500 index.html \u251c\u2500\u2500 index.js \u251c\u2500\u2500 \ud83d\udd3anorthwind.css \u251c\u2500\u2500 manifest \u2502 \u2514\u2500\u2500 makePackage.js \u2502 \u2514\u2500\u2500 \ud83d\udd3amanifest.template.json \u2502 \u2514\u2500\u2500 northwind32.png \u2502 \u2514\u2500\u2500 northwind192.png \u2502 \u2514\u2500\u2500 constants.js \u2502 \u2514\u2500\u2500 identityService.js \u2502 \u2514\u2500\u2500 northwindDataService.js \u2502 \u2514\u2500\u2500 server.js \u251c\u2500\u2500 .env_Sample \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 package.json \u251c\u2500\u2500 README.md A03-after-apply-styling \u251c\u2500\u2500 client \u2502 \u251c\u2500\u2500 components \u2502 \u251c\u2500\u2500 navigation.js \u2502 \u2514\u2500\u2500 identity \u2502 \u251c\u2500\u2500 identityClient.js \u2502 \u2514\u2500\u2500 userPanel.js \u251c\u2500\u2500 modules \u2502 \u2514\u2500\u2500 env.js \u2502 \u2514\u2500\u2500 northwindDataService.js \u2502 \u2514\u2500\u2500 \ud83d\udd3ateamsHelpers.js \u251c\u2500\u2500 pages \u2502 \u2514\u2500\u2500 categories.html \u2502 \u2514\u2500\u2500 categories.js \u2502 \u2514\u2500\u2500 categoryDetails.html \u2502 \u2514\u2500\u2500 categoryDetails.js \u2502 \u2514\u2500\u2500 myOrders.html \u2502 \u2514\u2500\u2500 orderDetail.html \u2502 \u2514\u2500\u2500 orderDetail.js \u2502 \u2514\u2500\u2500 privacy.html \u2502 \u2514\u2500\u2500 productDetail.html \u2502 \u2514\u2500\u2500 productDetail.js \u2502 \u2514\u2500\u2500 termsofuse.html \u251c\u2500\u2500 index.html \u251c\u2500\u2500 index.js \u251c\u2500\u2500 \ud83d\udd3anorthwind.css \u251c\u2500\u2500 \ud83c\udd95teamstyle.css \u251c\u2500\u2500 manifest \u2502 \u2514\u2500\u2500 makePackage.js \u2502 \u2514\u2500\u2500 \ud83d\udd3amanifest.template.json \u2502 \u2514\u2500\u2500 northwind32.png \u2502 \u2514\u2500\u2500 northwind192.png \u2502 \u2514\u2500\u2500 constants.js \u2502 \u2514\u2500\u2500 identityService.js \u2502 \u2514\u2500\u2500 northwindDataService.js \u2502 \u2514\u2500\u2500 server.js \u251c\u2500\u2500 .env_Sample \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 package.json \u251c\u2500\u2500 README.md In the project structure, on the right under A03-after-apply-styling , you will see emoji \ud83c\udd95 near the files & folders. They are the new files and folders that you need to add into the project structure. Exercise 1: Add CSS Step 1: Create a CSS file for Teams theme styles Create a file teamstyle.css in the client folder and copy below code block into it. These styles are based on the Teams UI Toolkit Figma . If you're working in React, you may want to use the Teams UI Toolkit React Components . :root { /* common */ --brand-color: #6264A7; --button-color: #6264A7; --button-text-color: #fff; --button-hover-color: rgb(88, 90, 150); --button-hover-text-color: #fff; --button-active-color: rgb(70, 71, 117); --button-active-text-color: #fff; --button-border: 1px solid hsla(0,0%,100%,.04); --button-shadow: rgb(0 0 0 / 25%) 0px 0.2rem 0.4rem -0.075rem; --button2-color: #fff; --button2-text-color: rgb(37, 36, 35); --button2-hover-color: rgb(237, 235, 233); --button2-active-color: rgb(225, 223, 221); --button2-border: 1px solid rgb(225, 223, 221); --button2-shadow: rgb(0 0 0 / 10%) 0px 0.2rem 0.4rem -0.075rem; --button-disabled-color: rgb(237, 235, 233); --button-disabled-text-color: rgb(200, 198, 196); --input-background-color: rgb(243, 242, 241); --input-border-color: transparent; --input-border-width: 0 0 0.1429rem 0; --input-focus-border-color: transparent; --input-focus-border-bottom-color: #6264A7; --table-color: transparent; --table-border: 1px solid rgb(237, 235, 233); --border-color: rgb(237, 235, 233); /* light theme */ --font-color: rgb(37, 36, 35); --background-color: #fff; --link-color: #6264A7; --border-color: #E1DFDD; --warning-color: #C4314B; } [data-theme=\"dark\"] { --font-color: #fff; --background-color: transparent; --link-color: #A6A7DC; --border-color: #605E5C; --warning-color: #F9526B; } [data-theme=\"contrast\"] { --brand-color: #ffff01; --font-color: #fff; --link-color: #ffff01; --background-color: transparent; --border-color: #fff; --button-color: transparent; --button-text-color: #fff; --button-hover-color: #ffff01; --button-hover-text-color: #000; --button-active-color: #1aebff; --button-active-text-color: #000; --button-border: .2rem solid #fff; --input-background-color: transparent; --input-border-color: #fff; --input-border-width: 1px; --input-focus-border-color: #1aebff; --input-focus-border-bottom-color: #1aebff; --warning-color: #ffff01; } body { background-color: var(--background-color); color: var(--font-color); box-sizing: border-box; font-size: 14px; } a, a:visited { color: var(--link-color); text-decoration: none; } a:hover, a:active { text-decoration: underline; } table, caption, tbody, tfoot, thead, tr, th, td { /*reset */ margin: 0; padding: 0; border: 0; font-size: 100%; font: inherit; vertical-align: middle; border-collapse: collapse; } table { display: table; background-color: var(--table-color); border-spacing: 0; } tr { display: table-row; border-bottom: var(--table-border); } th, td { display: table-cell; height: 3.4286rem; padding: 0 0.5714rem; } th{ font-weight: 600; } button, input, optgroup, select, textarea { font-family: inherit; font-size: 100%; line-height: 1.15; margin: 0; } button { min-width: 6rem; font-weight: 600; height: 2rem; padding: 0 1.25rem; vertical-align: middle; border-radius: 2px; background-color: var(--button-color); color: var(--button-text-color); border: var(--button-border); box-shadow: var(--button-shadow); overflow: visible; } button:hover { background-color: var(--button-hover-color); color: var(--button-active-text-color); } button:active { background-color: var(--button-active-color); color: var(--button-active-text-color); box-shadow: none; } button[disabled] { background-color: var(--button-disabled-color); color: var(--button-disabled-text-color); box-shadow: none; } button:not(:last-child) { margin-right: 0.5rem; } button.secondary { background: var(--button2-color); border: var(--button2-border); color: var(--button2-text-color); box-shadow: var(--button2-shadow); } button.secondary:hover { background-color: var(--button2-hover-color); } button.secondary:active { background-color: var(--button2-active-color); } label { margin: 0 0.7143rem 0.2857rem 0; } input { background-color: var(--input-background-color); padding: 0.3571rem 0.8571rem; line-height: unset; border-width: var(--input-border-width); border-radius: 0.2143rem 0.2143rem 0.1429rem 0.1429rem; border-color: var(--input-border-color); outline-style: none; overflow: visible; margin-bottom: 1.4286rem; } input:focus { border-color: var(--input-focus-border-color); border-bottom-color: var(--input-focus-border-bottom-color); } [type=checkbox], [type=radio] { padding: 0; margin-right: 0.5rem; } hr { border: 0; height: 1px; background: var(--border-color); } /* Text styling classes */ .medium { font-size: 1rem; } .small { font-size: 0.8571rem; } .smaller { font-size: 0.7143rem; } .large { font-size: 1.2857rem; } .larger { font-size: 1.7143rem; } .danger, .warning, .alert, .error { color: var(--warning-color); } /* Font */ @font-face { font-family: 'Segoe UI Web'; src: url('https://static2.sharepointonline.com/files/fabric/assets/fonts/segoeui-westeuropean/segoeui-regular.woff2') format('woff2'), url('https://static2.sharepointonline.com/files/fabric/assets/fonts/segoeui-westeuropean/segoeui-regular.woff') format('woff'); font-weight: 400; font-style: normal; } body { -moz-osx-font-smoothing: grayscale; -webkit-font-smoothing: antialiased; font-family: 'Segoe UI', 'Segoe UI Web', -apple-system, BlinkMacSystemFont, 'Roboto', 'Helvetica Neue', sans-serif; } This CSS contains basic stylings for Teams UI. After applying the styles, the existing web app gets more consistent look-and-feel to Teams client. The CSS also includes dark and high-contrast mode. The color switch is done with CSS variables . In the next exercise, you will enable the theme switching functionality in JavaScript. Step 2: Import the new CSS To import the teamstyle.css so it is loaded in all pages, add this statement at the top of your northwind.css file. @import \"teamstyle.css\"; Exercise 2: Update and run the project Step 1: Modify modules\\teamsHelpers.js The Teams client supports three themes: light mode, dark mode, and high contrast mode, which is an acceissibility feature for users with low visual acuity. As the users switch the themes, your application should also switch its theme so as to blend in. To detect theme switching in Teams client we'll have to use the global microsoftTeams 's context. We 'll add a function setTheme() to switch the css between the application's native style and the team's themes. Add this code to teamsHelpers.js: // Set the CSS to reflect the desired theme function setTheme(theme) { const el = document.documentElement; el.setAttribute('data-theme', theme); }; In order to display the application in a particular theme, setTheme() applies a data-theme value in the root of the content, like, <html data-theme='dark'> , so the teamstyle.css will use a correct set of colors & styles for each theme. The color change is done with the CSS variables. Now add in-line code into teamsHelpers.js to detect current context with getContext() and set the theme to match the current theme in Microsoft Teams. The code also registers an event handler that updates the application's theme when a user changes the theme in Microsoft Teams. Note that some browsers and the Teams desktop client will not honor the await keyword for inline code; therefore this code has been wrapped in an immediately-invoked function expression . Copy and paste below code block for this purpose: // Inline code to set theme on any page using teamsHelpers (async () => { await ensureTeamsSdkInitialized(); const context = await microsoftTeams.app.getContext(); setTheme(context.app.theme); // When the theme changes, update the CSS again microsoftTeams.registerOnThemeChangeHandler((theme) => { setTheme(theme); }); })(); Step 2: Start your local project Now it's time to run your updated application and run it in Microsoft Teams. Start the application by running below command: npm start Step 3: Run the application in Teams client Once the teams tab app is added, the personal tab will open My Orders tab. The application will now have the team's native look and feel. Here's how to change themes in teams client. Notice how the teams tab app also detects and changes its theme. function showCompletionPopup() { let path = window.location.pathname; path = path.endsWith('/') ? path.slice(0, -1) : path; let pathArray = path.split('/'); let leafFolder = pathArray[pathArray.length-1]; let height = window.outerHeight / 1.5; let width = window.outerWidth / 2; window.open(`${window.origin}/app-camp/congrats/${leafFolder}`, 'Congratulations!', `width=${width}, height=${height}, left=100, top=100,`); } Congratulations! When you have finished this lab, please click this button to let us know! No personal information is collected; we only want to count how many people have completed the labs so we can continue to fund this work! Next steps Congratulations! You have completed all core application development labs in path A . It's time to choose your own adventure! Please continue with any of the following labs. Add a Configurable Tab Add a Deep link to a personal Tab Add a Dialog Add a Meeting app Add a Message Extension Selling Your SaaS-based Teams Extension","title":"A03 - Teams styling and themes"},{"location":"aad/A03-after-apply-styling/#lab-a03-teams-styling-and-themes","text":"","title":"Lab A03: Teams styling and themes"},{"location":"aad/A03-after-apply-styling/#overview","text":"This lab is part of Path A, which begins with a Northwind Orders application that already uses Azure AD. Are you on the right path? Expand these notes to find out! There are two options for doing the labs: The \"A\" path is for developers with apps that are already based on Azure Active Directory. The starting app uses Azure Active Directory and the Microsoft Authentication Library (MSAL). the \"B\" path is for developers with apps that use some other identity system. It includes a simple (and not secure!) cookie-based auth system based on the Employees table in the Northwind database. You will use an identity mapping scheme to allow your existing users to log in directly or via Azure AD Single Sign-On. In this lab you will begin with the completed with the application in folder A02-after-teams-sso , make changes as per the steps below to achieve what is in the folder A03-after-apply-styling . A01-begin-app: Setting up the application with Azure AD A02-after-teams-sso: Creating a Teams app with Azure ADO SSO A03-after-apply-styling: Teams styling and themes (\ud83d\udccdYou are here) In this lab you will learn to: Apply styles based on the Microsoft Teams figma to make your application look like it belongs in Microsoft Teams Display your application with the same color theme the user has selected in Microsoft Teams Switch your application's theme when the user changes the Microsoft Teams theme setting Video briefing Lab A03 Briefing Table of Contents (open to display \u25ba) Overview Features Exercise 1: Add CSS Step 1: Create a CSS file for Teams theme styles Step 2: Import the new CSS Exercise 2: Update and run the project Step 1: Modify modules\\teamsHelpers.js Step 2: Start your local project Step 3: Run the application in Teams client Next steps","title":"Overview"},{"location":"aad/A03-after-apply-styling/#features","text":"Apply teams styling and themes to your existing application. Display and update themes along with the Microsoft Teams client","title":"Features"},{"location":"aad/A03-after-apply-styling/#project-structure","text":"Project files before and after this lab (open to display \u25ba) The project structure when you start of this lab and end of this lab is as follows. Use this depiction for comparison. On your left is the contents of folder A03-TeamsSSO and on your right is the contents of folder A04-StyleAndThemes . \ud83c\udd95 New files/folders \ud83d\udd3aFiles changed Project Structure Before Project Structure After A02-after-teams-sso \u251c\u2500\u2500 client \u2502 \u251c\u2500\u2500 components \u2502 \u251c\u2500\u2500 navigation.js \u2502 \u2514\u2500\u2500 identity \u2502 \u251c\u2500\u2500 identityClient.js \u2502 \u2514\u2500\u2500 userPanel.js \u251c\u2500\u2500 modules \u2502 \u2514\u2500\u2500 env.js \u2502 \u2514\u2500\u2500 northwindDataService.js \u2502 \u2514\u2500\u2500 \ud83d\udd3ateamsHelpers.js \u251c\u2500\u2500 pages \u2502 \u2514\u2500\u2500 categories.html \u2502 \u2514\u2500\u2500 categories.js \u2502 \u2514\u2500\u2500 categoryDetails.html \u2502 \u2514\u2500\u2500 categoryDetails.js \u2502 \u2514\u2500\u2500 myOrders.html \u2502 \u2514\u2500\u2500 orderDetail.html \u2502 \u2514\u2500\u2500 orderDetail.js \u2502 \u2514\u2500\u2500 privacy.html \u2502 \u2514\u2500\u2500 productDetail.html \u2502 \u2514\u2500\u2500 productDetail.js \u2502 \u2514\u2500\u2500 termsofuse.html \u251c\u2500\u2500 index.html \u251c\u2500\u2500 index.js \u251c\u2500\u2500 \ud83d\udd3anorthwind.css \u251c\u2500\u2500 manifest \u2502 \u2514\u2500\u2500 makePackage.js \u2502 \u2514\u2500\u2500 \ud83d\udd3amanifest.template.json \u2502 \u2514\u2500\u2500 northwind32.png \u2502 \u2514\u2500\u2500 northwind192.png \u2502 \u2514\u2500\u2500 constants.js \u2502 \u2514\u2500\u2500 identityService.js \u2502 \u2514\u2500\u2500 northwindDataService.js \u2502 \u2514\u2500\u2500 server.js \u251c\u2500\u2500 .env_Sample \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 package.json \u251c\u2500\u2500 README.md A03-after-apply-styling \u251c\u2500\u2500 client \u2502 \u251c\u2500\u2500 components \u2502 \u251c\u2500\u2500 navigation.js \u2502 \u2514\u2500\u2500 identity \u2502 \u251c\u2500\u2500 identityClient.js \u2502 \u2514\u2500\u2500 userPanel.js \u251c\u2500\u2500 modules \u2502 \u2514\u2500\u2500 env.js \u2502 \u2514\u2500\u2500 northwindDataService.js \u2502 \u2514\u2500\u2500 \ud83d\udd3ateamsHelpers.js \u251c\u2500\u2500 pages \u2502 \u2514\u2500\u2500 categories.html \u2502 \u2514\u2500\u2500 categories.js \u2502 \u2514\u2500\u2500 categoryDetails.html \u2502 \u2514\u2500\u2500 categoryDetails.js \u2502 \u2514\u2500\u2500 myOrders.html \u2502 \u2514\u2500\u2500 orderDetail.html \u2502 \u2514\u2500\u2500 orderDetail.js \u2502 \u2514\u2500\u2500 privacy.html \u2502 \u2514\u2500\u2500 productDetail.html \u2502 \u2514\u2500\u2500 productDetail.js \u2502 \u2514\u2500\u2500 termsofuse.html \u251c\u2500\u2500 index.html \u251c\u2500\u2500 index.js \u251c\u2500\u2500 \ud83d\udd3anorthwind.css \u251c\u2500\u2500 \ud83c\udd95teamstyle.css \u251c\u2500\u2500 manifest \u2502 \u2514\u2500\u2500 makePackage.js \u2502 \u2514\u2500\u2500 \ud83d\udd3amanifest.template.json \u2502 \u2514\u2500\u2500 northwind32.png \u2502 \u2514\u2500\u2500 northwind192.png \u2502 \u2514\u2500\u2500 constants.js \u2502 \u2514\u2500\u2500 identityService.js \u2502 \u2514\u2500\u2500 northwindDataService.js \u2502 \u2514\u2500\u2500 server.js \u251c\u2500\u2500 .env_Sample \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 package.json \u251c\u2500\u2500 README.md In the project structure, on the right under A03-after-apply-styling , you will see emoji \ud83c\udd95 near the files & folders. They are the new files and folders that you need to add into the project structure.","title":"Project structure"},{"location":"aad/A03-after-apply-styling/#exercise-1-add-css","text":"","title":"Exercise 1: Add CSS"},{"location":"aad/A03-after-apply-styling/#step-1-create-a-css-file-for-teams-theme-styles","text":"Create a file teamstyle.css in the client folder and copy below code block into it. These styles are based on the Teams UI Toolkit Figma . If you're working in React, you may want to use the Teams UI Toolkit React Components . :root { /* common */ --brand-color: #6264A7; --button-color: #6264A7; --button-text-color: #fff; --button-hover-color: rgb(88, 90, 150); --button-hover-text-color: #fff; --button-active-color: rgb(70, 71, 117); --button-active-text-color: #fff; --button-border: 1px solid hsla(0,0%,100%,.04); --button-shadow: rgb(0 0 0 / 25%) 0px 0.2rem 0.4rem -0.075rem; --button2-color: #fff; --button2-text-color: rgb(37, 36, 35); --button2-hover-color: rgb(237, 235, 233); --button2-active-color: rgb(225, 223, 221); --button2-border: 1px solid rgb(225, 223, 221); --button2-shadow: rgb(0 0 0 / 10%) 0px 0.2rem 0.4rem -0.075rem; --button-disabled-color: rgb(237, 235, 233); --button-disabled-text-color: rgb(200, 198, 196); --input-background-color: rgb(243, 242, 241); --input-border-color: transparent; --input-border-width: 0 0 0.1429rem 0; --input-focus-border-color: transparent; --input-focus-border-bottom-color: #6264A7; --table-color: transparent; --table-border: 1px solid rgb(237, 235, 233); --border-color: rgb(237, 235, 233); /* light theme */ --font-color: rgb(37, 36, 35); --background-color: #fff; --link-color: #6264A7; --border-color: #E1DFDD; --warning-color: #C4314B; } [data-theme=\"dark\"] { --font-color: #fff; --background-color: transparent; --link-color: #A6A7DC; --border-color: #605E5C; --warning-color: #F9526B; } [data-theme=\"contrast\"] { --brand-color: #ffff01; --font-color: #fff; --link-color: #ffff01; --background-color: transparent; --border-color: #fff; --button-color: transparent; --button-text-color: #fff; --button-hover-color: #ffff01; --button-hover-text-color: #000; --button-active-color: #1aebff; --button-active-text-color: #000; --button-border: .2rem solid #fff; --input-background-color: transparent; --input-border-color: #fff; --input-border-width: 1px; --input-focus-border-color: #1aebff; --input-focus-border-bottom-color: #1aebff; --warning-color: #ffff01; } body { background-color: var(--background-color); color: var(--font-color); box-sizing: border-box; font-size: 14px; } a, a:visited { color: var(--link-color); text-decoration: none; } a:hover, a:active { text-decoration: underline; } table, caption, tbody, tfoot, thead, tr, th, td { /*reset */ margin: 0; padding: 0; border: 0; font-size: 100%; font: inherit; vertical-align: middle; border-collapse: collapse; } table { display: table; background-color: var(--table-color); border-spacing: 0; } tr { display: table-row; border-bottom: var(--table-border); } th, td { display: table-cell; height: 3.4286rem; padding: 0 0.5714rem; } th{ font-weight: 600; } button, input, optgroup, select, textarea { font-family: inherit; font-size: 100%; line-height: 1.15; margin: 0; } button { min-width: 6rem; font-weight: 600; height: 2rem; padding: 0 1.25rem; vertical-align: middle; border-radius: 2px; background-color: var(--button-color); color: var(--button-text-color); border: var(--button-border); box-shadow: var(--button-shadow); overflow: visible; } button:hover { background-color: var(--button-hover-color); color: var(--button-active-text-color); } button:active { background-color: var(--button-active-color); color: var(--button-active-text-color); box-shadow: none; } button[disabled] { background-color: var(--button-disabled-color); color: var(--button-disabled-text-color); box-shadow: none; } button:not(:last-child) { margin-right: 0.5rem; } button.secondary { background: var(--button2-color); border: var(--button2-border); color: var(--button2-text-color); box-shadow: var(--button2-shadow); } button.secondary:hover { background-color: var(--button2-hover-color); } button.secondary:active { background-color: var(--button2-active-color); } label { margin: 0 0.7143rem 0.2857rem 0; } input { background-color: var(--input-background-color); padding: 0.3571rem 0.8571rem; line-height: unset; border-width: var(--input-border-width); border-radius: 0.2143rem 0.2143rem 0.1429rem 0.1429rem; border-color: var(--input-border-color); outline-style: none; overflow: visible; margin-bottom: 1.4286rem; } input:focus { border-color: var(--input-focus-border-color); border-bottom-color: var(--input-focus-border-bottom-color); } [type=checkbox], [type=radio] { padding: 0; margin-right: 0.5rem; } hr { border: 0; height: 1px; background: var(--border-color); } /* Text styling classes */ .medium { font-size: 1rem; } .small { font-size: 0.8571rem; } .smaller { font-size: 0.7143rem; } .large { font-size: 1.2857rem; } .larger { font-size: 1.7143rem; } .danger, .warning, .alert, .error { color: var(--warning-color); } /* Font */ @font-face { font-family: 'Segoe UI Web'; src: url('https://static2.sharepointonline.com/files/fabric/assets/fonts/segoeui-westeuropean/segoeui-regular.woff2') format('woff2'), url('https://static2.sharepointonline.com/files/fabric/assets/fonts/segoeui-westeuropean/segoeui-regular.woff') format('woff'); font-weight: 400; font-style: normal; } body { -moz-osx-font-smoothing: grayscale; -webkit-font-smoothing: antialiased; font-family: 'Segoe UI', 'Segoe UI Web', -apple-system, BlinkMacSystemFont, 'Roboto', 'Helvetica Neue', sans-serif; } This CSS contains basic stylings for Teams UI. After applying the styles, the existing web app gets more consistent look-and-feel to Teams client. The CSS also includes dark and high-contrast mode. The color switch is done with CSS variables . In the next exercise, you will enable the theme switching functionality in JavaScript.","title":"Step 1: Create a CSS file for Teams theme styles"},{"location":"aad/A03-after-apply-styling/#step-2-import-the-new-css","text":"To import the teamstyle.css so it is loaded in all pages, add this statement at the top of your northwind.css file. @import \"teamstyle.css\";","title":"Step 2: Import the new CSS"},{"location":"aad/A03-after-apply-styling/#exercise-2-update-and-run-the-project","text":"","title":"Exercise 2: Update and run the project"},{"location":"aad/A03-after-apply-styling/#step-1-modify-modulesteamshelpersjs","text":"The Teams client supports three themes: light mode, dark mode, and high contrast mode, which is an acceissibility feature for users with low visual acuity. As the users switch the themes, your application should also switch its theme so as to blend in. To detect theme switching in Teams client we'll have to use the global microsoftTeams 's context. We 'll add a function setTheme() to switch the css between the application's native style and the team's themes. Add this code to teamsHelpers.js: // Set the CSS to reflect the desired theme function setTheme(theme) { const el = document.documentElement; el.setAttribute('data-theme', theme); }; In order to display the application in a particular theme, setTheme() applies a data-theme value in the root of the content, like, <html data-theme='dark'> , so the teamstyle.css will use a correct set of colors & styles for each theme. The color change is done with the CSS variables. Now add in-line code into teamsHelpers.js to detect current context with getContext() and set the theme to match the current theme in Microsoft Teams. The code also registers an event handler that updates the application's theme when a user changes the theme in Microsoft Teams. Note that some browsers and the Teams desktop client will not honor the await keyword for inline code; therefore this code has been wrapped in an immediately-invoked function expression . Copy and paste below code block for this purpose: // Inline code to set theme on any page using teamsHelpers (async () => { await ensureTeamsSdkInitialized(); const context = await microsoftTeams.app.getContext(); setTheme(context.app.theme); // When the theme changes, update the CSS again microsoftTeams.registerOnThemeChangeHandler((theme) => { setTheme(theme); }); })();","title":"Step 1: Modify modules\\teamsHelpers.js"},{"location":"aad/A03-after-apply-styling/#step-2-start-your-local-project","text":"Now it's time to run your updated application and run it in Microsoft Teams. Start the application by running below command: npm start","title":"Step 2: Start your local project"},{"location":"aad/A03-after-apply-styling/#step-3-run-the-application-in-teams-client","text":"Once the teams tab app is added, the personal tab will open My Orders tab. The application will now have the team's native look and feel. Here's how to change themes in teams client. Notice how the teams tab app also detects and changes its theme. function showCompletionPopup() { let path = window.location.pathname; path = path.endsWith('/') ? path.slice(0, -1) : path; let pathArray = path.split('/'); let leafFolder = pathArray[pathArray.length-1]; let height = window.outerHeight / 1.5; let width = window.outerWidth / 2; window.open(`${window.origin}/app-camp/congrats/${leafFolder}`, 'Congratulations!', `width=${width}, height=${height}, left=100, top=100,`); }","title":"Step 3: Run the application in Teams client"},{"location":"aad/A03-after-apply-styling/#congratulations","text":"When you have finished this lab, please click this button to let us know! No personal information is collected; we only want to count how many people have completed the labs so we can continue to fund this work!","title":"Congratulations!"},{"location":"aad/A03-after-apply-styling/#next-steps","text":"Congratulations! You have completed all core application development labs in path A . It's time to choose your own adventure! Please continue with any of the following labs. Add a Configurable Tab Add a Deep link to a personal Tab Add a Dialog Add a Meeting app Add a Message Extension Selling Your SaaS-based Teams Extension","title":"Next steps"},{"location":"aad/ConfigurableTab/","text":"(function(c,l,a,r,i,t,y){ c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)}; t=l.createElement(r);t.async=1;t.src=\"https://www.clarity.ms/tag/\"+i; y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y); })(window, document, \"clarity\", \"script\", \"dfh6fjbr5x\"); Add a Configurable Tab Important! This lab builds on the completed solution to lab A03-after-apply-styling.md , which is the last of the \"core\" labs. If you haven't done them, you can start here . Up to this point, the Northwind Teams application has had only \"static\" tabs. Static tabs are for personal use, and aren't part of a Teams channel or group chat. Each static tab has a single, static URL. \"Configurable\" tabs are for sharing; they run in Teams channels and group chats. The idea is that a group of people shares the configuration, so there's shared context. In this lab you will add a configurable tab that displays a specific product category so, for example, the Beverages product team can share a tab with a list of beverages. This saves them navigating through the app every time they want to see Beverages. The Teams manifest for a static tab includes the tab's URL, but for a configurable tab it includes the URL of the tab's configuration page . The configuration page will allow users to configure what information is shown on the tab; based on this the configuration page saves the actual tab URL and a unique entity ID using the Teams JavaScript SDK. This URL can lead users directly to the information they want, or the tab to a page that looks at the entity ID to decide what to display. In this lab, the tab URL will display the product category directly, so the entity ID isn't really used. Configuration pages don't just work for tabs; they can also be used as setup pages for Message Extensions or Connectors , so they're worth learning about! In this lab you will learn to: Create a configurable tab with accompanying configuration page Add a configurable page to your Teams application Video briefing Configurable Tabs for Microsoft Teams Features Microsoft Teams configurable tab to display a product category Exercise 1: Create a configuration page Step 1: Add the configuration page markup Create a new file /client/pages/tabconfig.html and add this markup (or copy it from here ): <!doctype html> <html> <head> <meta charset=\"UTF-8\" /> <title>Tab Configuration</title> <link rel=\"stylesheet\" href=\"/northwind.css\" /> <link rel=\"icon\" href=\"data:;base64,=\"> <!-- Suppress favicon error --> </head> <body> <br /><br /> <p>Please select a product category to display in this tab</p> <select id=\"categorySelect\"> <option disabled=\"disabled\" selected=\"selected\">Select a category</option> </select> <div id=\"message\" class=\"errorMessage\"></div> <script type=\"module\" src=\"tabConfig.js\"></script> </body> </html> Step 2: Add the configuration page script Create a new file, /client/pages/tabconfig.js, and paste in this code (or copy it from here ): import 'https://res.cdn.office.net/teams-js/2.0.0/js/MicrosoftTeams.min.js'; import { ensureTeamsSdkInitialized } from '../modules/teamsHelpers.js'; import { getLoggedInEmployee } from '../identity/identityClient.js'; import { getCategories } from '../modules/northwindDataService.js'; async function displayUI() { const categorySelect = document.getElementById('categorySelect'); const messageDiv = document.getElementById('message'); try { const employee = await getLoggedInEmployee(); if (!employee) { // Nobody was logged in, redirect to login page window.location.href = \"/identity/aadLogin.html\"; } let selectedCategoryId = 0; let selectedCategoryName = ''; if (employee) { await ensureTeamsSdkInitialized(); // Set up the save handler for when they save the config microsoftTeams.pages.config.registerOnSaveHandler((saveEvent) => { const url = `${window.location.origin}/pages/categoryDetail.html?categoryId=${selectedCategoryId}`; const entityId = `ProductCategory ${selectedCategoryId}`; microsoftTeams.settings.setSettings({ \"suggestedDisplayName\": selectedCategoryName, \"entityId\": entityId, \"contentUrl\": url, \"websiteUrl\": url }); saveEvent.notifySuccess(); }); // Populate the dropdown so they can choose a config const categories = await getCategories(); categories.forEach((category) => { const option = document.createElement('option'); option.value = category.categoryId; option.innerText = category.displayName; categorySelect.appendChild(option); }); // When a category is selected, it's OK to save categorySelect.addEventListener('change', (ev) => { selectedCategoryName = ev.target.options[ev.target.selectedIndex].innerText; selectedCategoryId = ev.target.value; microsoftTeams.settings.setValidityState(true); }); } } catch (error) { // If here, we had some other error messageDiv.innerText = `Error: ${JSON.stringify(error.message)}`; } } displayUI(); Exercise 2: Add the configurable tab to your app manifest Step 1: Update the manifest template In your code editor, open the manifest/manifest.template.json file. Update the version number so it's greater than it was; for example if your manifest was version 1.4, make it 1.4.1 or 1.5.0. This is required in order for you to update the app in Teams. \"version\": \"1.5.0\" NOTE: Make each new version greater than the last so you can update the application in Teams! Now, immediately under the \"accentColor\" property, add a new property for \"configurableTabs\": \"configurableTabs\": [ { \"configurationUrl\": \"https://<HOST_NAME>/pages/tabConfig.html\", \"canUpdateConfiguration\": true, \"scopes\": [ \"team\", \"groupchat\" ] } ], Step 2: Rebuild your application package Open a command line tool in your working folder and type npm run package This will generate a new manifest.json file and a new application package (northwind.zip). Exercise 3: Test your configurable tab Step 1: Ensure you have a Team to test in If you already have a Team you can test with, skip to the next step. If not, begin by clicking the \"Join or create a Team\" button 1\ufe0f\u20e3 and then \"Create a team\" 2\ufe0f\u20e3. Click \"From scratch\". Then click your choice of \"Private\" or \"Public\". \"Org-wide\" is OK too but be aware this only works for Teams administrators and you can only have 5 of them in your tenant. Then follow the wizard to give your Team a name and description and optionally add some members so you don't have to collaborate all by yourself. Step 2: Run your app In your working directory run this command to start the application npm start Step 3: Upload the app package In the Teams web or desktop UI, click \"Apps\" in the sidebar 1\ufe0f\u20e3, then \"Manage your apps\" 2\ufe0f\u20e3. At this point you have three choices: Upload a custom app (upload the app for yourself or a specific team or group chat) - this only appears if you have enabled \"Upload custom apps\" in your setup policy; this was a step in the previous lab Upload an app to your org's app catalog (upload the app for use within your organization) - this only appears if you are a tenant administrator Submit an app to your org (initiate a workflow asking a tenant administrator to install your app) - this appears for everyone In this case, choose the first option 3\ufe0f\u20e3. Navigate to the Northwind.zip file in your manifest directory and upload it. Although the application is already installed, you are providing a newer version so it will update the application. This time the \"Add\" button will have a little arrow in it so you can add the app to a particular Team or Group Chat. Click the little arrow 1\ufe0f\u20e3 and then \"Add to a Team\" 2\ufe0f\u20e3. Type the name of a Team or channel in the search box 1\ufe0f\u20e3 and select the one where you want to add the application 2\ufe0f\u20e3. This will enable the \"Set up\" button 3\ufe0f\u20e3; click it to add your app to the Team. You should now see your configuration page, which provides the ability to select one product category 1\ufe0f\u20e3 from the Northwind database. When you select one, the save event handler you declared with registerOnSaveHandler() runs and validates the form. If it's valid (it will always be in this case), the code calls notifySuccess() . which enables the \"Save\" button 2\ufe0f\u20e3. Click the Save button to view your new tab. You can click the talk bubble in the upper left of the screen to open the chat; now people in the channel can chat about your app while they use it! This is a lot easier than navigating back and forth between the tab and the chat. Step 4: Run it again If you click the small arrow to the right of the tab name and choose \"Settings\", Teams will open the configuration page again so you can change the settings. This is possible because in the the Teams app manifest the \"canUpdateConfiguration\" property is set to true; if you set it to false, the settings option will not be available. function showCompletionPopup() { let path = window.location.pathname; path = path.endsWith('/') ? path.slice(0, -1) : path; let pathArray = path.split('/'); let leafFolder = pathArray[pathArray.length-1]; let height = window.outerHeight / 1.5; let width = window.outerWidth / 2; window.open(`${window.origin}/app-camp/congrats/${leafFolder}`, 'Congratulations!', `width=${width}, height=${height}, left=100, top=100,`); } Congratulations! When you have finished this lab, please click this button to let us know! No personal information is collected; we only want to count how many people have completed the labs so we can continue to fund this work! Known issues For the latest issues, or to file a bug report, see the github issues list for this repository. References Create a configuration page Next steps After completing this lab, you may continue with additional extended labs! Add a Configurable Tab Add a Deep link to a personal Tab Add a Dialog Add a Meeting app Add a Message Extension Selling Your SaaS-based Teams Extension","title":"Add a configurable tab"},{"location":"aad/ConfigurableTab/#add-a-configurable-tab","text":"Important! This lab builds on the completed solution to lab A03-after-apply-styling.md , which is the last of the \"core\" labs. If you haven't done them, you can start here . Up to this point, the Northwind Teams application has had only \"static\" tabs. Static tabs are for personal use, and aren't part of a Teams channel or group chat. Each static tab has a single, static URL. \"Configurable\" tabs are for sharing; they run in Teams channels and group chats. The idea is that a group of people shares the configuration, so there's shared context. In this lab you will add a configurable tab that displays a specific product category so, for example, the Beverages product team can share a tab with a list of beverages. This saves them navigating through the app every time they want to see Beverages. The Teams manifest for a static tab includes the tab's URL, but for a configurable tab it includes the URL of the tab's configuration page . The configuration page will allow users to configure what information is shown on the tab; based on this the configuration page saves the actual tab URL and a unique entity ID using the Teams JavaScript SDK. This URL can lead users directly to the information they want, or the tab to a page that looks at the entity ID to decide what to display. In this lab, the tab URL will display the product category directly, so the entity ID isn't really used. Configuration pages don't just work for tabs; they can also be used as setup pages for Message Extensions or Connectors , so they're worth learning about! In this lab you will learn to: Create a configurable tab with accompanying configuration page Add a configurable page to your Teams application Video briefing Configurable Tabs for Microsoft Teams","title":"Add a Configurable Tab"},{"location":"aad/ConfigurableTab/#features","text":"Microsoft Teams configurable tab to display a product category","title":"Features"},{"location":"aad/ConfigurableTab/#exercise-1-create-a-configuration-page","text":"","title":"Exercise 1: Create a configuration page"},{"location":"aad/ConfigurableTab/#step-1-add-the-configuration-page-markup","text":"Create a new file /client/pages/tabconfig.html and add this markup (or copy it from here ): <!doctype html> <html> <head> <meta charset=\"UTF-8\" /> <title>Tab Configuration</title> <link rel=\"stylesheet\" href=\"/northwind.css\" /> <link rel=\"icon\" href=\"data:;base64,=\"> <!-- Suppress favicon error --> </head> <body> <br /><br /> <p>Please select a product category to display in this tab</p> <select id=\"categorySelect\"> <option disabled=\"disabled\" selected=\"selected\">Select a category</option> </select> <div id=\"message\" class=\"errorMessage\"></div> <script type=\"module\" src=\"tabConfig.js\"></script> </body> </html>","title":"Step 1: Add the configuration page markup"},{"location":"aad/ConfigurableTab/#step-2-add-the-configuration-page-script","text":"Create a new file, /client/pages/tabconfig.js, and paste in this code (or copy it from here ): import 'https://res.cdn.office.net/teams-js/2.0.0/js/MicrosoftTeams.min.js'; import { ensureTeamsSdkInitialized } from '../modules/teamsHelpers.js'; import { getLoggedInEmployee } from '../identity/identityClient.js'; import { getCategories } from '../modules/northwindDataService.js'; async function displayUI() { const categorySelect = document.getElementById('categorySelect'); const messageDiv = document.getElementById('message'); try { const employee = await getLoggedInEmployee(); if (!employee) { // Nobody was logged in, redirect to login page window.location.href = \"/identity/aadLogin.html\"; } let selectedCategoryId = 0; let selectedCategoryName = ''; if (employee) { await ensureTeamsSdkInitialized(); // Set up the save handler for when they save the config microsoftTeams.pages.config.registerOnSaveHandler((saveEvent) => { const url = `${window.location.origin}/pages/categoryDetail.html?categoryId=${selectedCategoryId}`; const entityId = `ProductCategory ${selectedCategoryId}`; microsoftTeams.settings.setSettings({ \"suggestedDisplayName\": selectedCategoryName, \"entityId\": entityId, \"contentUrl\": url, \"websiteUrl\": url }); saveEvent.notifySuccess(); }); // Populate the dropdown so they can choose a config const categories = await getCategories(); categories.forEach((category) => { const option = document.createElement('option'); option.value = category.categoryId; option.innerText = category.displayName; categorySelect.appendChild(option); }); // When a category is selected, it's OK to save categorySelect.addEventListener('change', (ev) => { selectedCategoryName = ev.target.options[ev.target.selectedIndex].innerText; selectedCategoryId = ev.target.value; microsoftTeams.settings.setValidityState(true); }); } } catch (error) { // If here, we had some other error messageDiv.innerText = `Error: ${JSON.stringify(error.message)}`; } } displayUI();","title":"Step 2: Add the configuration page script"},{"location":"aad/ConfigurableTab/#exercise-2-add-the-configurable-tab-to-your-app-manifest","text":"","title":"Exercise 2: Add the configurable tab to your app manifest"},{"location":"aad/ConfigurableTab/#step-1-update-the-manifest-template","text":"In your code editor, open the manifest/manifest.template.json file. Update the version number so it's greater than it was; for example if your manifest was version 1.4, make it 1.4.1 or 1.5.0. This is required in order for you to update the app in Teams. \"version\": \"1.5.0\" NOTE: Make each new version greater than the last so you can update the application in Teams! Now, immediately under the \"accentColor\" property, add a new property for \"configurableTabs\": \"configurableTabs\": [ { \"configurationUrl\": \"https://<HOST_NAME>/pages/tabConfig.html\", \"canUpdateConfiguration\": true, \"scopes\": [ \"team\", \"groupchat\" ] } ],","title":"Step 1: Update the manifest template"},{"location":"aad/ConfigurableTab/#step-2-rebuild-your-application-package","text":"Open a command line tool in your working folder and type npm run package This will generate a new manifest.json file and a new application package (northwind.zip).","title":"Step 2: Rebuild your application package"},{"location":"aad/ConfigurableTab/#exercise-3-test-your-configurable-tab","text":"","title":"Exercise 3: Test your configurable tab"},{"location":"aad/ConfigurableTab/#step-1-ensure-you-have-a-team-to-test-in","text":"If you already have a Team you can test with, skip to the next step. If not, begin by clicking the \"Join or create a Team\" button 1\ufe0f\u20e3 and then \"Create a team\" 2\ufe0f\u20e3. Click \"From scratch\". Then click your choice of \"Private\" or \"Public\". \"Org-wide\" is OK too but be aware this only works for Teams administrators and you can only have 5 of them in your tenant. Then follow the wizard to give your Team a name and description and optionally add some members so you don't have to collaborate all by yourself.","title":"Step 1: Ensure you have a Team to test in"},{"location":"aad/ConfigurableTab/#step-2-run-your-app","text":"In your working directory run this command to start the application npm start","title":"Step 2: Run your app"},{"location":"aad/ConfigurableTab/#step-3-upload-the-app-package","text":"In the Teams web or desktop UI, click \"Apps\" in the sidebar 1\ufe0f\u20e3, then \"Manage your apps\" 2\ufe0f\u20e3. At this point you have three choices: Upload a custom app (upload the app for yourself or a specific team or group chat) - this only appears if you have enabled \"Upload custom apps\" in your setup policy; this was a step in the previous lab Upload an app to your org's app catalog (upload the app for use within your organization) - this only appears if you are a tenant administrator Submit an app to your org (initiate a workflow asking a tenant administrator to install your app) - this appears for everyone In this case, choose the first option 3\ufe0f\u20e3. Navigate to the Northwind.zip file in your manifest directory and upload it. Although the application is already installed, you are providing a newer version so it will update the application. This time the \"Add\" button will have a little arrow in it so you can add the app to a particular Team or Group Chat. Click the little arrow 1\ufe0f\u20e3 and then \"Add to a Team\" 2\ufe0f\u20e3. Type the name of a Team or channel in the search box 1\ufe0f\u20e3 and select the one where you want to add the application 2\ufe0f\u20e3. This will enable the \"Set up\" button 3\ufe0f\u20e3; click it to add your app to the Team. You should now see your configuration page, which provides the ability to select one product category 1\ufe0f\u20e3 from the Northwind database. When you select one, the save event handler you declared with registerOnSaveHandler() runs and validates the form. If it's valid (it will always be in this case), the code calls notifySuccess() . which enables the \"Save\" button 2\ufe0f\u20e3. Click the Save button to view your new tab. You can click the talk bubble in the upper left of the screen to open the chat; now people in the channel can chat about your app while they use it! This is a lot easier than navigating back and forth between the tab and the chat.","title":"Step 3: Upload the app package"},{"location":"aad/ConfigurableTab/#step-4-run-it-again","text":"If you click the small arrow to the right of the tab name and choose \"Settings\", Teams will open the configuration page again so you can change the settings. This is possible because in the the Teams app manifest the \"canUpdateConfiguration\" property is set to true; if you set it to false, the settings option will not be available. function showCompletionPopup() { let path = window.location.pathname; path = path.endsWith('/') ? path.slice(0, -1) : path; let pathArray = path.split('/'); let leafFolder = pathArray[pathArray.length-1]; let height = window.outerHeight / 1.5; let width = window.outerWidth / 2; window.open(`${window.origin}/app-camp/congrats/${leafFolder}`, 'Congratulations!', `width=${width}, height=${height}, left=100, top=100,`); }","title":"Step 4: Run it again"},{"location":"aad/ConfigurableTab/#congratulations","text":"When you have finished this lab, please click this button to let us know! No personal information is collected; we only want to count how many people have completed the labs so we can continue to fund this work!","title":"Congratulations!"},{"location":"aad/ConfigurableTab/#known-issues","text":"For the latest issues, or to file a bug report, see the github issues list for this repository.","title":"Known issues"},{"location":"aad/ConfigurableTab/#references","text":"Create a configuration page","title":"References"},{"location":"aad/ConfigurableTab/#next-steps","text":"After completing this lab, you may continue with additional extended labs! Add a Configurable Tab Add a Deep link to a personal Tab Add a Dialog Add a Meeting app Add a Message Extension Selling Your SaaS-based Teams Extension","title":"Next steps"},{"location":"aad/Deeplink/","text":"(function(c,l,a,r,i,t,y){ c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)}; t=l.createElement(r);t.async=1;t.src=\"https://www.clarity.ms/tag/\"+i; y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y); })(window, document, \"clarity\", \"script\", \"dfh6fjbr5x\"); Add a Deep link to a personal Tab Important! This lab builds on the completed solution to lab A03-after-apply-styling.md , which is the last of the \"core\" labs. If you haven't done them, you can start here . Deep links help the user to directly navigate to the content. In this lab we will create deep link to entities in Teams so the user can navigate to contents within the app's tab. In this lab you will learn new concepts as below: Generating deep links that open your application in Teams Pass business context in deep links to your application using a the Teams SDK context object Video briefing Deep links to Microsoft Teams applications Features In the application's order details page, add a button to copy the order's tab link into clipboard, that helps users share the link via chat or outlook to colleague, for them to navigate easily to that specific order. How to build the deep link You'll use this syntax to create the deep link for this lab: https://teams.microsoft.com/l/entity/<app-id>/<entitiyId>?context={\"subEntityId\": \"<subEntityId>\"} where: app-id - This teams app id from the manifest file entityId - This is defined in your manifest file in the staticTabs object for the particular entity (tab). In our case this is the entity id Orders of My Orders tab. subEntityId - This is the ID for the item you are displaying information for. This is similar to query parameters. In our case in this lab, it will be the orderId. Note The subEntityId is the query parameter name. When you pass this value, the context will store this information in page.subPageId in Teams JS v2 of the SDK. Previously this was stored in the context as subEntityId. There has been a visual change. Full details are here in the documentation . Exercise 1: Code changes Step 1: Update the Order Detail page HTML In this step, you will edit the Order Detail page to include a \"Copy Link\" button which copies a deep link to this order to the clipboard. In your working folder, open client/page/orderDetail.html . Let's add the copy to clipboard button and a div to display a message to show if the copy was successful. Copy this code code and paste it above orderDetails div element. <div id=\"copySection\" style=\"display: none;\"> <div> <button id=\"btnCopyOrderUrl\">Copy order url</button></div> <div style=\"flex-grow: 1;padding:5px;\" id=\"copyMessage\">Copy to clipboard</div> </div> Step 2: Update the Order Detail page JavaScript In this step, you will add code to the Order Detail page that responds to click events on the \"Copy link\" button. When the button is pressed, the code will generate a deep link back to the currently displayed order. In your working folder, open client/page/orderDetail.js . Import the environment file from the server to get access to the Teams application ID, which is used in creating a deep link. Paste below code above the displayUI() function definition. import { env } from '/modules/env.js'; Now replace the displayUI() function with below definition, which includes code to generate a deep link when the \"Copy URL\" button is pushed. async function displayUI() { const displayElement = document.getElementById('content'); const detailsElement = document.getElementById('orderDetails'); const copyUrlElement = document.getElementById('btnCopyOrderUrl'); const copyMsgElement = document.getElementById('copyMessage'); const copySectionElement = document.getElementById('copySection'); const errorMsgElement = document.getElementById('message'); try { const searchParams = new URLSearchParams(window.location.search); if (searchParams.has('orderId')) { const orderId = searchParams.get('orderId'); const order = await getOrder(orderId); displayElement.innerHTML = ` <h1>Order ${order.orderId}</h1> <p>Customer: ${order.customerName}<br /> Contact: ${order.contactName}, ${order.contactTitle}<br /> Date: ${new Date(order.orderDate).toDateString()}<br /> ${order.employeeTitle}: ${order.employeeName} (${order.employeeId}) </p> `; order.details.forEach(item => { const orderRow = document.createElement('tr'); orderRow.innerHTML = `<tr> <td>${item.quantity}</td> <td><a href=\"/pages/productDetail.html?productId=${item.productId}\">${item.productName}</a></td> <td>${item.unitPrice}</td> <td>${item.discount}</td> </tr>`; detailsElement.append(orderRow); }); copySectionElement.style.display = \"flex\"; copyUrlElement.addEventListener('click', async ev => { try { //temp textarea for copy to clipboard functionality var textarea = document.createElement(\"textarea\"); const encodedContext = encodeURI(`{\"subEntityId\": \"${order.orderId}\"}`); //form the deeplink const deeplink = `https://teams.microsoft.com/l/entity/${env.TEAMS_APP_ID}/Orders?&context=${encodedContext}`; textarea.value = deeplink; document.body.appendChild(textarea); textarea.select(); document.execCommand(\"copy\"); //deprecated but there is an issue with navigator.clipboard api document.body.removeChild(textarea); copyMsgElement.innerHTML = \"Link copied!\" } catch (err) { console.error('Failed to copy: ', err); } }); } else { errorMsgElement.innerText = `No order to show`; displayElement.style.display = \"none\"; orderDetails.style.display = \"none\"; } } catch (error) { // If here, we had some other error errorMsgElement.innerText = `Error: ${JSON.stringify(error)}`; } } Explanation for these code changes The deep link is created in the copyUrlElement.addEventListener() function. The deep link will navigate: * to Microsoft Teams * to the Northwind Orders application * to the Orders tab, which brings up the myOrders.js page * to a specific order ID The App ID is included in the deep link to help Teams display the correct application. The teams app id is taken from .env file, which is the id in the manifest file. The entityId identifies the tab; in this case it is Orders , which is the id for My Orders tab. This is set in the manifest.json file; the relevant section is shown below for your reference. encodedContext is a JSON constant that defines the parameter(subEntityId) to be passed to the tab; in this case it's the order ID. \"staticTabs\": [ { \"entityId\": \"Orders\", \"name\": \"My Orders\", \"contentUrl\": \"https://<HOST_NAME>/pages/myOrders.html\", \"websiteUrl\": \"https://<HOST_NAME>/pages/myOrders.html\", \"scopes\": [ \"personal\" ] }, { \"entityId\": \"Products\", \"name\": \"Products\", \"contentUrl\": \"https://<HOST_NAME>/pages/categories.html\", \"websiteUrl\": \"https://<HOST_NAME>/pages/categories.html\", \"scopes\": [ \"personal\" ] } ], A tab's Entity ID is defined in the app manifest for static tabs Step 3: Update the My Orders page to redirect deep links directly to the order detail page In your working folder, open the client/myOrders.js file. Add import statements for the Microsoft Teams SDK and the Teams helper functions. import { ensureTeamsSdkInitialized, inTeams } from '../modules/teamsHelpers.js'; import 'https://res.cdn.office.net/teams-js/2.0.0/js/MicrosoftTeams.min.js'; Using the My Orders tab as the base, we will redirect the deeplink to the Order details page to show the order only if the subEntitiyId is present in the teams context. In the displayUI() function, at the top of the try block, add code to check for a page.subPageId which is where the passed subEntitiyId is stored in the context from v2 of the Teams JS SDK.Once it is found, do the redirect to the sub page. // Handle incoming deep links by redirecting to the selected order if (await inTeams()) { await ensureTeamsSdkInitialized(); const context = await microsoftTeams.app.getContext(); if (context.page.subPageId) { window.location.href = `/pages/orderDetail.html?orderId=${context.page.subPageId}`; } } The updated function definition looks like below: async function displayUI() { const displayElement = document.getElementById('content'); const ordersElement = document.getElementById('orders'); const messageDiv = document.getElementById('message'); try { // Handle incoming deep links by redirecting to the selected order if (await inTeams()) { await ensureTeamsSdkInitialized(); const context = await microsoftTeams.app.getContext(); if (context.page.subPageId) { window.location.href = `/pages/orderDetail.html?orderId=${context.page.subPageId}`; } } // Display order data const employee = await getLoggedInEmployee(); if (employee) { displayElement.innerHTML = ` <h3>Orders for ${employee.displayName}<h3> `; employee.orders.forEach(order => { const orderRow = document.createElement('tr'); orderRow.innerHTML = `<tr> <td><a href=\"/pages/orderDetail.html?orderId=${order.orderId}\">${order.orderId}</a></td> <td>${(new Date(order.orderDate)).toDateString()}</td> <td>${order.shipName}</td> <td>${order.shipAddress}, ${order.shipCity} ${order.shipRegion || ''} ${order.shipPostalCode || ''} ${order.shipCountry}</td> </tr>`; ordersElement.append(orderRow); }); } } catch (error) { // If here, we had some other error messageDiv.innerText = `Error: ${JSON.stringify(error)}`; } } Step 4: Update the server to provide the Teams app ID as an environment variable In your working folder, open the server/server.js file. This app uses a little trick to provide the client-side code with values from the .env file (or environment settings when the app is deployed). When the client requests /modules.env.js, the server will pass selected environment variables to the client. Care has been taken to not pass any secrets to the client, and the code explicitly copies only a few non-sensitive values. Since the client side needs the Teams app ID, we need to add that to the list of values. Update the request app.get('/modules/env.js') and add TEAMS_APP_ID as below: app.get('/modules/env.js', (req, res) => { res.contentType(\"application/javascript\"); res.send(` export const env = { HOST_NAME: \"${process.env.HOST_NAME}\", TENANT_ID: \"${process.env.TENANT_ID}\", CLIENT_ID: \"${process.env.CLIENT_ID}\", TEAMS_APP_ID: \"${process.env.TEAMS_APP_ID}\" }; `); }); Exercise 2: Test the changes Step 1 : Run the application in Teams client Now that you have applied all code changes, let's test the features. This lab assumes you already completed the Core lab and registered an Azure AD application, built and uploaded your Teams package, etc. So at this point, all you should need to do is run npm start Once you are in the application, go to My orders page and select any order. Select Copy order url . On selection, the message next to button changes from Copy to clipboard to Link copied! Now open the link in a new browser tab. It should open Microsoft Teams showing the Northwind Orders application with the order information displayed. This animated picture shows the solution in action. function showCompletionPopup() { let path = window.location.pathname; path = path.endsWith('/') ? path.slice(0, -1) : path; let pathArray = path.split('/'); let leafFolder = pathArray[pathArray.length-1]; let height = window.outerHeight / 1.5; let width = window.outerWidth / 2; window.open(`${window.origin}/app-camp/congrats/${leafFolder}`, 'Congratulations!', `width=${width}, height=${height}, left=100, top=100,`); } Congratulations! When you have finished this lab, please click this button to let us know! No personal information is collected; we only want to count how many people have completed the labs so we can continue to fund this work! References Deep links Known issues For the latest issues, or to file a bug report, see the github issues list for this repository. Next steps After completing this lab, you may continue with additional extended labs! Add a Configurable Tab Add a Deep link to a personal Tab Add a Dialog Add a Meeting app Add a Message Extension Selling Your SaaS-based Teams Extension","title":"Add a Deep link to a personal Tab"},{"location":"aad/Deeplink/#add-a-deep-link-to-a-personal-tab","text":"Important! This lab builds on the completed solution to lab A03-after-apply-styling.md , which is the last of the \"core\" labs. If you haven't done them, you can start here . Deep links help the user to directly navigate to the content. In this lab we will create deep link to entities in Teams so the user can navigate to contents within the app's tab. In this lab you will learn new concepts as below: Generating deep links that open your application in Teams Pass business context in deep links to your application using a the Teams SDK context object Video briefing Deep links to Microsoft Teams applications","title":"Add a Deep link to a personal Tab"},{"location":"aad/Deeplink/#features","text":"In the application's order details page, add a button to copy the order's tab link into clipboard, that helps users share the link via chat or outlook to colleague, for them to navigate easily to that specific order.","title":"Features"},{"location":"aad/Deeplink/#how-to-build-the-deep-link","text":"You'll use this syntax to create the deep link for this lab: https://teams.microsoft.com/l/entity/<app-id>/<entitiyId>?context={\"subEntityId\": \"<subEntityId>\"} where: app-id - This teams app id from the manifest file entityId - This is defined in your manifest file in the staticTabs object for the particular entity (tab). In our case this is the entity id Orders of My Orders tab. subEntityId - This is the ID for the item you are displaying information for. This is similar to query parameters. In our case in this lab, it will be the orderId. Note The subEntityId is the query parameter name. When you pass this value, the context will store this information in page.subPageId in Teams JS v2 of the SDK. Previously this was stored in the context as subEntityId. There has been a visual change. Full details are here in the documentation .","title":"How to build the deep link"},{"location":"aad/Deeplink/#exercise-1-code-changes","text":"","title":"Exercise 1: Code changes"},{"location":"aad/Deeplink/#step-1-update-the-order-detail-page-html","text":"In this step, you will edit the Order Detail page to include a \"Copy Link\" button which copies a deep link to this order to the clipboard. In your working folder, open client/page/orderDetail.html . Let's add the copy to clipboard button and a div to display a message to show if the copy was successful. Copy this code code and paste it above orderDetails div element. <div id=\"copySection\" style=\"display: none;\"> <div> <button id=\"btnCopyOrderUrl\">Copy order url</button></div> <div style=\"flex-grow: 1;padding:5px;\" id=\"copyMessage\">Copy to clipboard</div> </div>","title":"Step 1: Update the Order Detail page HTML"},{"location":"aad/Deeplink/#step-2-update-the-order-detail-page-javascript","text":"In this step, you will add code to the Order Detail page that responds to click events on the \"Copy link\" button. When the button is pressed, the code will generate a deep link back to the currently displayed order. In your working folder, open client/page/orderDetail.js . Import the environment file from the server to get access to the Teams application ID, which is used in creating a deep link. Paste below code above the displayUI() function definition. import { env } from '/modules/env.js'; Now replace the displayUI() function with below definition, which includes code to generate a deep link when the \"Copy URL\" button is pushed. async function displayUI() { const displayElement = document.getElementById('content'); const detailsElement = document.getElementById('orderDetails'); const copyUrlElement = document.getElementById('btnCopyOrderUrl'); const copyMsgElement = document.getElementById('copyMessage'); const copySectionElement = document.getElementById('copySection'); const errorMsgElement = document.getElementById('message'); try { const searchParams = new URLSearchParams(window.location.search); if (searchParams.has('orderId')) { const orderId = searchParams.get('orderId'); const order = await getOrder(orderId); displayElement.innerHTML = ` <h1>Order ${order.orderId}</h1> <p>Customer: ${order.customerName}<br /> Contact: ${order.contactName}, ${order.contactTitle}<br /> Date: ${new Date(order.orderDate).toDateString()}<br /> ${order.employeeTitle}: ${order.employeeName} (${order.employeeId}) </p> `; order.details.forEach(item => { const orderRow = document.createElement('tr'); orderRow.innerHTML = `<tr> <td>${item.quantity}</td> <td><a href=\"/pages/productDetail.html?productId=${item.productId}\">${item.productName}</a></td> <td>${item.unitPrice}</td> <td>${item.discount}</td> </tr>`; detailsElement.append(orderRow); }); copySectionElement.style.display = \"flex\"; copyUrlElement.addEventListener('click', async ev => { try { //temp textarea for copy to clipboard functionality var textarea = document.createElement(\"textarea\"); const encodedContext = encodeURI(`{\"subEntityId\": \"${order.orderId}\"}`); //form the deeplink const deeplink = `https://teams.microsoft.com/l/entity/${env.TEAMS_APP_ID}/Orders?&context=${encodedContext}`; textarea.value = deeplink; document.body.appendChild(textarea); textarea.select(); document.execCommand(\"copy\"); //deprecated but there is an issue with navigator.clipboard api document.body.removeChild(textarea); copyMsgElement.innerHTML = \"Link copied!\" } catch (err) { console.error('Failed to copy: ', err); } }); } else { errorMsgElement.innerText = `No order to show`; displayElement.style.display = \"none\"; orderDetails.style.display = \"none\"; } } catch (error) { // If here, we had some other error errorMsgElement.innerText = `Error: ${JSON.stringify(error)}`; } } Explanation for these code changes The deep link is created in the copyUrlElement.addEventListener() function. The deep link will navigate: * to Microsoft Teams * to the Northwind Orders application * to the Orders tab, which brings up the myOrders.js page * to a specific order ID The App ID is included in the deep link to help Teams display the correct application. The teams app id is taken from .env file, which is the id in the manifest file. The entityId identifies the tab; in this case it is Orders , which is the id for My Orders tab. This is set in the manifest.json file; the relevant section is shown below for your reference. encodedContext is a JSON constant that defines the parameter(subEntityId) to be passed to the tab; in this case it's the order ID. \"staticTabs\": [ { \"entityId\": \"Orders\", \"name\": \"My Orders\", \"contentUrl\": \"https://<HOST_NAME>/pages/myOrders.html\", \"websiteUrl\": \"https://<HOST_NAME>/pages/myOrders.html\", \"scopes\": [ \"personal\" ] }, { \"entityId\": \"Products\", \"name\": \"Products\", \"contentUrl\": \"https://<HOST_NAME>/pages/categories.html\", \"websiteUrl\": \"https://<HOST_NAME>/pages/categories.html\", \"scopes\": [ \"personal\" ] } ], A tab's Entity ID is defined in the app manifest for static tabs","title":"Step 2: Update the Order Detail page JavaScript"},{"location":"aad/Deeplink/#step-3-update-the-my-orders-page-to-redirect-deep-links-directly-to-the-order-detail-page","text":"In your working folder, open the client/myOrders.js file. Add import statements for the Microsoft Teams SDK and the Teams helper functions. import { ensureTeamsSdkInitialized, inTeams } from '../modules/teamsHelpers.js'; import 'https://res.cdn.office.net/teams-js/2.0.0/js/MicrosoftTeams.min.js'; Using the My Orders tab as the base, we will redirect the deeplink to the Order details page to show the order only if the subEntitiyId is present in the teams context. In the displayUI() function, at the top of the try block, add code to check for a page.subPageId which is where the passed subEntitiyId is stored in the context from v2 of the Teams JS SDK.Once it is found, do the redirect to the sub page. // Handle incoming deep links by redirecting to the selected order if (await inTeams()) { await ensureTeamsSdkInitialized(); const context = await microsoftTeams.app.getContext(); if (context.page.subPageId) { window.location.href = `/pages/orderDetail.html?orderId=${context.page.subPageId}`; } } The updated function definition looks like below: async function displayUI() { const displayElement = document.getElementById('content'); const ordersElement = document.getElementById('orders'); const messageDiv = document.getElementById('message'); try { // Handle incoming deep links by redirecting to the selected order if (await inTeams()) { await ensureTeamsSdkInitialized(); const context = await microsoftTeams.app.getContext(); if (context.page.subPageId) { window.location.href = `/pages/orderDetail.html?orderId=${context.page.subPageId}`; } } // Display order data const employee = await getLoggedInEmployee(); if (employee) { displayElement.innerHTML = ` <h3>Orders for ${employee.displayName}<h3> `; employee.orders.forEach(order => { const orderRow = document.createElement('tr'); orderRow.innerHTML = `<tr> <td><a href=\"/pages/orderDetail.html?orderId=${order.orderId}\">${order.orderId}</a></td> <td>${(new Date(order.orderDate)).toDateString()}</td> <td>${order.shipName}</td> <td>${order.shipAddress}, ${order.shipCity} ${order.shipRegion || ''} ${order.shipPostalCode || ''} ${order.shipCountry}</td> </tr>`; ordersElement.append(orderRow); }); } } catch (error) { // If here, we had some other error messageDiv.innerText = `Error: ${JSON.stringify(error)}`; } }","title":"Step 3: Update the My Orders page to redirect deep links directly to the order detail page"},{"location":"aad/Deeplink/#step-4-update-the-server-to-provide-the-teams-app-id-as-an-environment-variable","text":"In your working folder, open the server/server.js file. This app uses a little trick to provide the client-side code with values from the .env file (or environment settings when the app is deployed). When the client requests /modules.env.js, the server will pass selected environment variables to the client. Care has been taken to not pass any secrets to the client, and the code explicitly copies only a few non-sensitive values. Since the client side needs the Teams app ID, we need to add that to the list of values. Update the request app.get('/modules/env.js') and add TEAMS_APP_ID as below: app.get('/modules/env.js', (req, res) => { res.contentType(\"application/javascript\"); res.send(` export const env = { HOST_NAME: \"${process.env.HOST_NAME}\", TENANT_ID: \"${process.env.TENANT_ID}\", CLIENT_ID: \"${process.env.CLIENT_ID}\", TEAMS_APP_ID: \"${process.env.TEAMS_APP_ID}\" }; `); });","title":"Step 4: Update the server to provide the Teams app ID as an environment variable"},{"location":"aad/Deeplink/#exercise-2-test-the-changes","text":"","title":"Exercise 2: Test the changes"},{"location":"aad/Deeplink/#step-1-run-the-application-in-teams-client","text":"Now that you have applied all code changes, let's test the features. This lab assumes you already completed the Core lab and registered an Azure AD application, built and uploaded your Teams package, etc. So at this point, all you should need to do is run npm start Once you are in the application, go to My orders page and select any order. Select Copy order url . On selection, the message next to button changes from Copy to clipboard to Link copied! Now open the link in a new browser tab. It should open Microsoft Teams showing the Northwind Orders application with the order information displayed. This animated picture shows the solution in action. function showCompletionPopup() { let path = window.location.pathname; path = path.endsWith('/') ? path.slice(0, -1) : path; let pathArray = path.split('/'); let leafFolder = pathArray[pathArray.length-1]; let height = window.outerHeight / 1.5; let width = window.outerWidth / 2; window.open(`${window.origin}/app-camp/congrats/${leafFolder}`, 'Congratulations!', `width=${width}, height=${height}, left=100, top=100,`); }","title":"Step 1 : Run the application in Teams client"},{"location":"aad/Deeplink/#congratulations","text":"When you have finished this lab, please click this button to let us know! No personal information is collected; we only want to count how many people have completed the labs so we can continue to fund this work!","title":"Congratulations!"},{"location":"aad/Deeplink/#references","text":"Deep links","title":"References"},{"location":"aad/Deeplink/#known-issues","text":"For the latest issues, or to file a bug report, see the github issues list for this repository.","title":"Known issues"},{"location":"aad/Deeplink/#next-steps","text":"After completing this lab, you may continue with additional extended labs! Add a Configurable Tab Add a Deep link to a personal Tab Add a Dialog Add a Meeting app Add a Message Extension Selling Your SaaS-based Teams Extension","title":"Next steps"},{"location":"aad/Dialog/","text":"(function(c,l,a,r,i,t,y){ c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)}; t=l.createElement(r);t.async=1;t.src=\"https://www.clarity.ms/tag/\"+i; y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y); })(window, document, \"clarity\", \"script\", \"dfh6fjbr5x\"); Add a Dialog Important! This lab builds on the completed solution to lab A03-after-apply-styling.md , which is the last of the \"core\" labs. If you haven't done them, you can start here . Dialogs as they are call it in version 2 of the SDK are modal pop-up experiences in Teams application that can display web pages as IFrames or adaptive cards. This can greatly simplify the user experience when a data input is required, and gives your application an opportunity to interact one-on-one with a user even in a group environment. There are many ways you can incorporate a dialog. In this lab we focus on using the app's own HTML form. In this lab you will learn to: How to build a Dialog using a web page How to launch a dialog from a tab using the Teams JavaScript SDK How to submit data from the dialog back to the tab that launched it The completed lab is here Video briefing Using Dialogs in Microsoft Teams apps Features In the application's order details page, there will be a button that allows adding notes to the order Pressing the button opens a dialog to capture the notes The notes are passed back to the order details page and displayed there Exercise 1: Code changes Step 1: Add the HTML page and JavaScript file that will be displayed in the dialog In your working folder, under the /client/pages path, create a new file orderNotesForm.html and copy this code to it: <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\" /> <title>Dialog: Update order notes</title> <link rel=\"stylesheet\" href=\"/northwind.css\" /> <link rel=\"icon\" href=\"data:;base64,=\"> <!-- Suppress favicon error --> </head> <body> <form id=\"orderForm\"> <div> <textarea id=\"notes\" name=\"notes\" rows=\"4\" cols=\"50\"></textarea> </div> <div> <button type=\"submit\" tabindex=\"2\">Save</button> </div> </form> <script type=\"module\" src=\"orderNotesForm.js\"></script> </body> </html> In the same folder, under the /client/pages path, create a new file orderNotesForm.js and copy this code to it: import 'https://res.cdn.office.net/teams-js/2.0.0/js/MicrosoftTeams.min.js'; import { ensureTeamsSdkInitialized } from '../modules/teamsHelpers.js'; import {env} from '../modules/env.js' async function displayUI() { await ensureTeamsSdkInitialized(); document.getElementById('orderForm').addEventListener(\"submit\", async (e) => { let orderFormInfo = { notes: document.forms[\"orderForm\"][\"notes\"].value, }; await microsoftTeams.dialog.submit(orderFormInfo,env.TEAMS_APP_ID); return true; }); } displayUI(); This is a web form which captures an input notes which is a multi line text area. The form uses Microsoft Teams SDK's microsoftTeams.dialog.submit function to pass the form values back into a callback function. Step 2: Update the Order Detail HTML In this step, we'll add an \"Add Notes\" button to the Order Detail page and an HTML element to display the notes. In your working folder, open /client/pages/orderDetail.html Copy below block of code and paste it above the <table> element of the page. <div id=\"orderContent\"> </div> <br/> <button id=\"btnTaskModule\">Add notes</button> Step 3: Update the Order Detail JavaScript In your working folder, open /client/pages/orderDetail.js . At the top of the file, import the Teams SDK and Teams helper module. import 'https://res.cdn.office.net/teams-js/2.0.0/js/MicrosoftTeams.min.js'; import { ensureTeamsSdkInitialized } from '/modules/teamsHelpers.js'; Now in the displayUI() function, define two constants to get the two HTML elements we just added. const btnTaskModuleElement = document.getElementById('btnTaskModule'); const orderElement=document.getElementById('orderContent'); To open the dialog, add an event listener for the button btnTaskModule . Paste below code in the dislayUI() function in the end, before closing the try block. btnTaskModuleElement.addEventListener('click', async ev => { await ensureTeamsSdkInitialized(); if (!microsoftTeams.dialog.isSupported()) { alert ('Sorry this button is not supported'); } else { let taskInfo = { title: null, height: null, width: null, url: null, fallbackUrl: null }; taskInfo.url = `https://${window.location.hostname}/pages/orderNotesForm.html`; taskInfo.title = \"Order notes\"; taskInfo.size= {height:210,width: 400}; let submitHandler = (response) => { if(response.result){ const result=response.result; const postDate = new Date().toLocaleString() const newComment = document.createElement('p'); if (result.notes) { newComment.innerHTML = `<div><b>Posted on:</b>${postDate}</div> <div><b>Notes:</b>${result.notes}</div><br/> -----------------------------` orderElement.append(newComment); } }else{ console.log(`Error in response from dialog.submit${response.err}`) } }; microsoftTeams.dialog.open(taskInfo,submitHandler) } }); To open a dialog from a tab, use microsoftTeams.dialog.open() . You can also check if a capability is supported in the app running in Microsoft 365 apps (in case you plan to extend your application across Microsoft365 host apps like outlook/office.com). Here dialog is a capability so we are checking if it is supported using microsoftTeams.dialog.isSupported() function. You can pass the taskInfo object and a callback function called submitHandler to pass the results back from the dialog. The final look of displayUI() function is as below: async function displayUI() { const displayElement = document.getElementById('content'); const detailsElement = document.getElementById('orderDetails'); const btnTaskModuleElement = document.getElementById('btnTaskModule'); const orderElement=document.getElementById('orderContent'); try { const searchParams = new URLSearchParams(window.location.search); if (searchParams.has('orderId')) { const orderId = searchParams.get('orderId'); const order = await getOrder(orderId); displayElement.innerHTML = ` <h1>Order ${order.orderId}</h1> <p>Customer: ${order.customerName}<br /> Contact: ${order.contactName}, ${order.contactTitle}<br /> Date: ${new Date(order.orderDate).toDateString()}<br /> ${order.employeeTitle}: ${order.employeeName} (${order.employeeId}) </p> `; order.details.forEach(item => { const orderRow = document.createElement('tr'); orderRow.innerHTML = `<tr> <td>${item.quantity}</td> <td><a href=\"/pages/productDetail.html?productId=${item.productId}\">${item.productName}</a></td> <td>${item.unitPrice}</td> <td>${item.discount}</td> </tr>`; detailsElement.append(orderRow); }); } btnTaskModuleElement.addEventListener('click', async ev => { await ensureTeamsSdkInitialized(); if (!microsoftTeams.dialog.isSupported()) { alert ('Sorry this button is not supported'); } else { let taskInfo = { title: null, height: null, width: null, url: null, fallbackUrl: null }; taskInfo.url = `https://${window.location.hostname}/pages/orderNotesForm.html`; taskInfo.title = \"Order notes\"; taskInfo.size= {height:210,width: 400}; let submitHandler = (response) => { if(response.result){ const result=response.result; const postDate = new Date().toLocaleString() const newComment = document.createElement('p'); if (result.notes) { newComment.innerHTML = `<div><b>Posted on:</b>${postDate}</div> <div><b>Notes:</b>${result.notes}</div><br/> -----------------------------` orderElement.append(newComment); } }else{ console.log(`Error in response from dialog.submit${response.err}`) } }; microsoftTeams.dialog.open(taskInfo,submitHandler) } }); } catch (error) { // If here, we had some other error message.innerText = `Error: ${JSON.stringify(error)}`; } } Step 4: Update the serve.js file In your working folder, open /server/server.js and update the app.get('/modules/env.js') call to send an additional property TEAMS_APP_ID , which is the teams application's id (as in the manifest file) to be used in client side pages. app.get('/modules/env.js', (req, res) => { res.contentType(\"application/javascript\"); res.send(` export const env = { HOST_NAME: \"${process.env.HOST_NAME}\", TENANT_ID: \"${process.env.TENANT_ID}\", CLIENT_ID: \"${process.env.CLIENT_ID}\", TEAMS_APP_ID:\"${process.env.TEAMS_APP_ID}\" }; `); }); TEAMS_APP_ID is used in the dialog.submit() as a parameter along with the results that needs to be sent back to the submitHandler() callback function. Although this is an optional parameter, there is a known issue in the TeamsJS SDK v2 which needs the parameter to be passed. Exercise 2: Test the changes Step 1 : Run the application in Teams client Now that you have applied all code changes, let's test the features. This lab assumes you already completed the Core lab and registered an Azure AD application, built and uploaded your Teams package, etc. So at this point, all you should need to do is run Once you are in the application, go to My orders page and select any order. Once in the order details page, select the Add notes button to open the dialog. Add comment/note and select Save . Notice the dialog closed and the results getting added into the order details page. Note The comments are not saved back into the northwind database at this time, so they'll only persist as long as you stay on the order details page. function showCompletionPopup() { let path = window.location.pathname; path = path.endsWith('/') ? path.slice(0, -1) : path; let pathArray = path.split('/'); let leafFolder = pathArray[pathArray.length-1]; let height = window.outerHeight / 1.5; let width = window.outerWidth / 2; window.open(`${window.origin}/app-camp/congrats/${leafFolder}`, 'Congratulations!', `width=${width}, height=${height}, left=100, top=100,`); } Congratulations! When you have finished this lab, please click this button to let us know! No personal information is collected; we only want to count how many people have completed the labs so we can continue to fund this work! Known issues For the latest issues, or to file a bug report, see the github issues list for this repository. Next steps After completing this lab, you may continue with additional extended labs! Add a Configurable Tab Add a Deep link to a personal Tab Add a Dialog Add a Meeting app Add a Message Extension Selling Your SaaS-based Teams Extension","title":"Add a Dialog"},{"location":"aad/Dialog/#add-a-dialog","text":"Important! This lab builds on the completed solution to lab A03-after-apply-styling.md , which is the last of the \"core\" labs. If you haven't done them, you can start here . Dialogs as they are call it in version 2 of the SDK are modal pop-up experiences in Teams application that can display web pages as IFrames or adaptive cards. This can greatly simplify the user experience when a data input is required, and gives your application an opportunity to interact one-on-one with a user even in a group environment. There are many ways you can incorporate a dialog. In this lab we focus on using the app's own HTML form. In this lab you will learn to: How to build a Dialog using a web page How to launch a dialog from a tab using the Teams JavaScript SDK How to submit data from the dialog back to the tab that launched it The completed lab is here Video briefing Using Dialogs in Microsoft Teams apps","title":"Add a Dialog"},{"location":"aad/Dialog/#features","text":"In the application's order details page, there will be a button that allows adding notes to the order Pressing the button opens a dialog to capture the notes The notes are passed back to the order details page and displayed there","title":"Features"},{"location":"aad/Dialog/#exercise-1-code-changes","text":"","title":"Exercise 1: Code changes"},{"location":"aad/Dialog/#step-1-add-the-html-page-and-javascript-file-that-will-be-displayed-in-the-dialog","text":"In your working folder, under the /client/pages path, create a new file orderNotesForm.html and copy this code to it: <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\" /> <title>Dialog: Update order notes</title> <link rel=\"stylesheet\" href=\"/northwind.css\" /> <link rel=\"icon\" href=\"data:;base64,=\"> <!-- Suppress favicon error --> </head> <body> <form id=\"orderForm\"> <div> <textarea id=\"notes\" name=\"notes\" rows=\"4\" cols=\"50\"></textarea> </div> <div> <button type=\"submit\" tabindex=\"2\">Save</button> </div> </form> <script type=\"module\" src=\"orderNotesForm.js\"></script> </body> </html> In the same folder, under the /client/pages path, create a new file orderNotesForm.js and copy this code to it: import 'https://res.cdn.office.net/teams-js/2.0.0/js/MicrosoftTeams.min.js'; import { ensureTeamsSdkInitialized } from '../modules/teamsHelpers.js'; import {env} from '../modules/env.js' async function displayUI() { await ensureTeamsSdkInitialized(); document.getElementById('orderForm').addEventListener(\"submit\", async (e) => { let orderFormInfo = { notes: document.forms[\"orderForm\"][\"notes\"].value, }; await microsoftTeams.dialog.submit(orderFormInfo,env.TEAMS_APP_ID); return true; }); } displayUI(); This is a web form which captures an input notes which is a multi line text area. The form uses Microsoft Teams SDK's microsoftTeams.dialog.submit function to pass the form values back into a callback function.","title":"Step 1: Add the HTML page and JavaScript file that will be displayed in the dialog"},{"location":"aad/Dialog/#step-2-update-the-order-detail-html","text":"In this step, we'll add an \"Add Notes\" button to the Order Detail page and an HTML element to display the notes. In your working folder, open /client/pages/orderDetail.html Copy below block of code and paste it above the <table> element of the page. <div id=\"orderContent\"> </div> <br/> <button id=\"btnTaskModule\">Add notes</button>","title":"Step 2: Update the Order Detail HTML"},{"location":"aad/Dialog/#step-3-update-the-order-detail-javascript","text":"In your working folder, open /client/pages/orderDetail.js . At the top of the file, import the Teams SDK and Teams helper module. import 'https://res.cdn.office.net/teams-js/2.0.0/js/MicrosoftTeams.min.js'; import { ensureTeamsSdkInitialized } from '/modules/teamsHelpers.js'; Now in the displayUI() function, define two constants to get the two HTML elements we just added. const btnTaskModuleElement = document.getElementById('btnTaskModule'); const orderElement=document.getElementById('orderContent'); To open the dialog, add an event listener for the button btnTaskModule . Paste below code in the dislayUI() function in the end, before closing the try block. btnTaskModuleElement.addEventListener('click', async ev => { await ensureTeamsSdkInitialized(); if (!microsoftTeams.dialog.isSupported()) { alert ('Sorry this button is not supported'); } else { let taskInfo = { title: null, height: null, width: null, url: null, fallbackUrl: null }; taskInfo.url = `https://${window.location.hostname}/pages/orderNotesForm.html`; taskInfo.title = \"Order notes\"; taskInfo.size= {height:210,width: 400}; let submitHandler = (response) => { if(response.result){ const result=response.result; const postDate = new Date().toLocaleString() const newComment = document.createElement('p'); if (result.notes) { newComment.innerHTML = `<div><b>Posted on:</b>${postDate}</div> <div><b>Notes:</b>${result.notes}</div><br/> -----------------------------` orderElement.append(newComment); } }else{ console.log(`Error in response from dialog.submit${response.err}`) } }; microsoftTeams.dialog.open(taskInfo,submitHandler) } }); To open a dialog from a tab, use microsoftTeams.dialog.open() . You can also check if a capability is supported in the app running in Microsoft 365 apps (in case you plan to extend your application across Microsoft365 host apps like outlook/office.com). Here dialog is a capability so we are checking if it is supported using microsoftTeams.dialog.isSupported() function. You can pass the taskInfo object and a callback function called submitHandler to pass the results back from the dialog. The final look of displayUI() function is as below: async function displayUI() { const displayElement = document.getElementById('content'); const detailsElement = document.getElementById('orderDetails'); const btnTaskModuleElement = document.getElementById('btnTaskModule'); const orderElement=document.getElementById('orderContent'); try { const searchParams = new URLSearchParams(window.location.search); if (searchParams.has('orderId')) { const orderId = searchParams.get('orderId'); const order = await getOrder(orderId); displayElement.innerHTML = ` <h1>Order ${order.orderId}</h1> <p>Customer: ${order.customerName}<br /> Contact: ${order.contactName}, ${order.contactTitle}<br /> Date: ${new Date(order.orderDate).toDateString()}<br /> ${order.employeeTitle}: ${order.employeeName} (${order.employeeId}) </p> `; order.details.forEach(item => { const orderRow = document.createElement('tr'); orderRow.innerHTML = `<tr> <td>${item.quantity}</td> <td><a href=\"/pages/productDetail.html?productId=${item.productId}\">${item.productName}</a></td> <td>${item.unitPrice}</td> <td>${item.discount}</td> </tr>`; detailsElement.append(orderRow); }); } btnTaskModuleElement.addEventListener('click', async ev => { await ensureTeamsSdkInitialized(); if (!microsoftTeams.dialog.isSupported()) { alert ('Sorry this button is not supported'); } else { let taskInfo = { title: null, height: null, width: null, url: null, fallbackUrl: null }; taskInfo.url = `https://${window.location.hostname}/pages/orderNotesForm.html`; taskInfo.title = \"Order notes\"; taskInfo.size= {height:210,width: 400}; let submitHandler = (response) => { if(response.result){ const result=response.result; const postDate = new Date().toLocaleString() const newComment = document.createElement('p'); if (result.notes) { newComment.innerHTML = `<div><b>Posted on:</b>${postDate}</div> <div><b>Notes:</b>${result.notes}</div><br/> -----------------------------` orderElement.append(newComment); } }else{ console.log(`Error in response from dialog.submit${response.err}`) } }; microsoftTeams.dialog.open(taskInfo,submitHandler) } }); } catch (error) { // If here, we had some other error message.innerText = `Error: ${JSON.stringify(error)}`; } }","title":"Step 3: Update the Order Detail JavaScript"},{"location":"aad/Dialog/#step-4-update-the-servejs-file","text":"In your working folder, open /server/server.js and update the app.get('/modules/env.js') call to send an additional property TEAMS_APP_ID , which is the teams application's id (as in the manifest file) to be used in client side pages. app.get('/modules/env.js', (req, res) => { res.contentType(\"application/javascript\"); res.send(` export const env = { HOST_NAME: \"${process.env.HOST_NAME}\", TENANT_ID: \"${process.env.TENANT_ID}\", CLIENT_ID: \"${process.env.CLIENT_ID}\", TEAMS_APP_ID:\"${process.env.TEAMS_APP_ID}\" }; `); }); TEAMS_APP_ID is used in the dialog.submit() as a parameter along with the results that needs to be sent back to the submitHandler() callback function. Although this is an optional parameter, there is a known issue in the TeamsJS SDK v2 which needs the parameter to be passed.","title":"Step 4: Update the serve.js file"},{"location":"aad/Dialog/#exercise-2-test-the-changes","text":"","title":"Exercise 2: Test the changes"},{"location":"aad/Dialog/#step-1-run-the-application-in-teams-client","text":"Now that you have applied all code changes, let's test the features. This lab assumes you already completed the Core lab and registered an Azure AD application, built and uploaded your Teams package, etc. So at this point, all you should need to do is run Once you are in the application, go to My orders page and select any order. Once in the order details page, select the Add notes button to open the dialog. Add comment/note and select Save . Notice the dialog closed and the results getting added into the order details page. Note The comments are not saved back into the northwind database at this time, so they'll only persist as long as you stay on the order details page. function showCompletionPopup() { let path = window.location.pathname; path = path.endsWith('/') ? path.slice(0, -1) : path; let pathArray = path.split('/'); let leafFolder = pathArray[pathArray.length-1]; let height = window.outerHeight / 1.5; let width = window.outerWidth / 2; window.open(`${window.origin}/app-camp/congrats/${leafFolder}`, 'Congratulations!', `width=${width}, height=${height}, left=100, top=100,`); }","title":"Step 1 : Run the application in Teams client"},{"location":"aad/Dialog/#congratulations","text":"When you have finished this lab, please click this button to let us know! No personal information is collected; we only want to count how many people have completed the labs so we can continue to fund this work!","title":"Congratulations!"},{"location":"aad/Dialog/#known-issues","text":"For the latest issues, or to file a bug report, see the github issues list for this repository.","title":"Known issues"},{"location":"aad/Dialog/#next-steps","text":"After completing this lab, you may continue with additional extended labs! Add a Configurable Tab Add a Deep link to a personal Tab Add a Dialog Add a Meeting app Add a Message Extension Selling Your SaaS-based Teams Extension","title":"Next steps"},{"location":"aad/ExtendedLabs/","text":"(function(c,l,a,r,i,t,y){ c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)}; t=l.createElement(r);t.async=1;t.src=\"https://www.clarity.ms/tag/\"+i; y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y); })(window, document, \"clarity\", \"script\", \"dfh6fjbr5x\"); Choose your own adventure! If you have completed Lab A03 then you're ready to choose your own adventure! Lab A03 is just a personal tab app that more or less runs the original Northwind Orders application. Not only is this boring, but it really doesn't harness the power of Microsoft Teams! These labs all build on Lab A03 (or, if you're brave, Lab B04 ). So if you don't have that working, go do that first and then come back. Here are the extended lab adventures we have in store for you. Do one or do 'em all! Add a Configurable Tab Add a Deep link to a personal Tab Add a Dialog Add a Meeting app Add a Message Extension Selling Your SaaS-based Teams Extension Don't see the lab you want? Check out our github issues where we keep our backlog; feel free to comment or add your own request!","title":"Choose your own adventure!"},{"location":"aad/ExtendedLabs/#choose-your-own-adventure","text":"If you have completed Lab A03 then you're ready to choose your own adventure! Lab A03 is just a personal tab app that more or less runs the original Northwind Orders application. Not only is this boring, but it really doesn't harness the power of Microsoft Teams! These labs all build on Lab A03 (or, if you're brave, Lab B04 ). So if you don't have that working, go do that first and then come back. Here are the extended lab adventures we have in store for you. Do one or do 'em all! Add a Configurable Tab Add a Deep link to a personal Tab Add a Dialog Add a Meeting app Add a Message Extension Selling Your SaaS-based Teams Extension Don't see the lab you want? Check out our github issues where we keep our backlog; feel free to comment or add your own request!","title":"Choose your own adventure!"},{"location":"aad/MeetingConfigurableTab/","text":"(function(c,l,a,r,i,t,y){ c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)}; t=l.createElement(r);t.async=1;t.src=\"https://www.clarity.ms/tag/\"+i; y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y); })(window, document, \"clarity\", \"script\", \"dfh6fjbr5x\"); Add a Configurable Tab to Meetings This lab is part of extending with capabilities for your teams app which begins with a Northwind Orders core application using the AAD path. Important! This lab builds on the completed solution to the Configurable Tab lab. Complete labs A01 - A03 to get to the Northwind Orders core application and then complete the Configurable Tab Lab to add a configurable tab to your application before beginning this lab. Following on from the previous lab where you created a Configurable Tab which could be configured to display a list products with a given category, in this lab you will extend the tab so that it can also be used in Microsoft Teams meetings. Extending tabs for use in Microsoft Teams meetings provides the meeting owner the ability to add the tab, which can be accessed by meeting participants before, during, and after the meeting. It also allows sharing the contents of the tab to the meeting content stage without the participants having to switch to another window during the meeting as the content is displayed directly in the meeting window. In this lab you will learn to: Configure your Configurable Tab for use with Microsoft Teams meetings Add your tab to the Microsoft Teams Meeting Pre-meeting stage Add your tab to the Microsoft Teams Meeting Side Panel during a meeting Present your tab in the Microsoft Teams Meeting Content Stage during a meeting Use the Teams JS SDK to understand the current Microsoft Teams Frame Context Use the Teams JS SDK to understand whether the tab is being shared to the Microsoft Teams Meeting Content Stage Warning Currently it is only possible to use tabs in Meetings using the Microsoft Teams Desktop Client. Video briefing Configurable Tabs in Microsoft Teams Meetings Features Microsoft Teams configurable tab to display a product category in during pre-meeting stage Microsoft Teams configurable tab to display a product category in the Meeting Side Panel during a Teams meeting Microosft Teams configurable tab to display a product category and be shared to the Meeting Content Stage Exercise 1: Update your configurable tab for use with Meetings Step 1: Add context array to application manifest In your code editor, open the manifest/manifest.template.json file. Update the version number so it's greater than it was; for example if your manifest was version 1.4, make it 1.4.1 or 1.5.0. This is required in order for you to update the app in Teams. \"version\": \"1.5.0\" NOTE: Make each new version greater than the last so you can update the application in Teams! Now, immediately under the scopes array, in the your configurable tab object, add a new array for defining the context : \"configurableTabs\": [ { \"configurationUrl\": \"https://<HOST_NAME>/pages/tabConfig.html\", \"canUpdateConfiguration\": true, \"scopes\": [ \"teams\", \"groupchat\" ], \"context\": [ \"meetingChatTab\", \"meetingDetailsTab\", \"meetingSidePanel\", \"meetingStage\" ] } ] Step 2: Rebuild your application package Open a command line tool in your working folder and execute npm run package This will generate a new manifest.json file and a new application package (northwind.zip). Step 3: Start your app In your working directory execute this command to start the application npm start Step 4: Upload the app package In the Teams web or desktop UI, click \"Apps\" in the sidebar 1\ufe0f\u20e3, then \"Manage your apps\" 2\ufe0f\u20e3. At this point you have three choices: Upload a custom app (upload the app for yourself or a specific team or group chat) - this only appears if you have enabled \"Upload custom apps\" in your setup policy; this was a step in the previous lab Upload an app to your org's app catalog (upload the app for use within your organization) - this only appears if you are a tenant administrator Submit an app to your org (initiate a workflow asking a tenant administrator to install your app) - this appears for everyone In this case, choose the second option 3\ufe0f\u20e3. Navigate to the Northwind.zip file in your manifest directory and upload it. Although the application is already installed, you are providing a newer version so it will update the application. Exercise 2: Add your tab to the pre-meeting stage Step 1: Create Microsoft Teams meeting Using the Microsoft Teams desktop client, open the Calendar app from the sidebar and select New meeting in the top right corner. Enter a title and add at least one required participant , select Send in the top right corner to create the meeting. Step 2: Add tab Select the meeting that you just created in the Calendar app, in the flyout, select Edit to open the meeting details. Select the (+) Add tab button in the meeting, search for Northwind Orders app and select it. In the tab configuration page, select a Category of products you want to display in the tab. The tab is added at the pre-meeting stage, so that meeting participants can view the tab content before the meeting begins, this also pre-loads the tab in to the meeting when it begins. Click Close in the top right corner to go back to the Calendar view. Excercise 3: Display tab in Meeting Step 1: Start meeting Select the meeting that you just created in the Calendar app, in the flyout, select Join to open the meeting and select Join now to start the meeting. Step 2: Display tab in Meeting Side Panel When a tab has already been added to the meeting at the pre-meeting stage, the tab will be visible in the meeting controls shown at the top of the meeting. To display the tab in the Meeting Side Panel, select the tab icon, this will open the Meeting Side Panel displaying the tab content within it. At the moment the table is too big for the width of the side panel, but don't worry, we will come back to this and fix it in later exercise. Step 3: Present tab in Meeting Content Stage To make the tab content visible to all partipicants in the meeting, you can present the tab by sharing it to the Meeting Content Stage. Select the Share icon in the Meeting Side Panel to present the tab to the stage. Exercise 4: Update tab display when in Meeting Side Panel In the previous exercise we saw that when the tab was displayed in the Meeting Side Panel, the products table width was too wide for the space given to us by the Side Panel, to do this we need to use the Teams JS SDK v2 to help us understand the context in which our tab is running and whether it has been shared to the stage. Step 1: Add code to detect Frame Context We can use the Teams JS SDK FrameContexts capability to obtain the current FrameContext type from the page context and check whether the app is running in the sidePanel frame. In client/modules/teamsHelpers.js , add the following function. // async function returns true if app is running in side panel in a Teams meeting export async function inSidePanel() { try { await ensureTeamsSdkInitialized(); const { page } = await microsoftTeams.app.getContext(); return page.frameContext === microsoftTeams.FrameContexts.sidePanel; } catch (e) { console.log(`${e} from Teams SDK, may be running outside of Teams`); return false; } } Step 2: Add code to detect whether tab is shared to stage We can use the Teams JS SDK meeting capability to obtain the current state of the meeting stage. In client/modules/teamsHelpers.js , add the following function. // async function returns true if app has been shared to stage in a Teams meeting export async function sharedToStage() { try { await ensureTeamsSdkInitialized(); const { isAppSharing } = await microsoftTeams.meeting.getAppContentStageSharingState(); return isAppSharing; } catch (e) { console.log(`${e} from Teams SDK, may be running outside of Teams`); return false; } } Step 3: Add code to hide table columns when tab is displayed in Meeting Side Panel We can use the two helper functions that we just added to hide some of the table columns when the tab is shown in the side panel, but to not remove them when the same tab is presented to the stage so we can make utilise the full width of the meeting content stage. In client/pages/categoryDetail.js , add the following import statement to the top of the file. import { inSidePanel, sharedToStage } from '../modules/teamsHelpers.js'; Add the following code into the displayUI function around line 40. if (await inSidePanel() && !(await sharedToStage())) { const table = document.getElementById('products'); table.queryS electorAll('th:nth-child(n+4)').forEach((e) => { e.style.display = 'none'; }); table.querySelectorAll('td:nth-child(n+4)').forEach((e) => { e.style.display = 'none'; }); } The if statement that creates the products table if a category is selected, should look like if (category) { displayElement.innerHTML = ` <img src=\"data:image/bmp;base64,${category.picture}\" class=\"categoryImage\"></img> <h3>${category.displayName}</h3> <p>${category.description}</p> `; category.products.forEach(product => { const row = document.createElement('tr'); row.innerHTML = `<tr> <td><a href=\"/pages/productDetail.html?productId=${product.productId}\">${product.productName}</a></td> <td>${product.quantityPerUnit}</td> <td>${product.unitPrice}</td> <td>${product.unitsInStock}</td> <td>${product.unitsOnOrder}</td> <td>${product.supplierName} (${product.supplierCountry})</td> </tr>`; productsElement.append(row); }); if (await inSidePanel() && !(await sharedToStage())) { const table = document.getElementById('products'); table.querySelectorAll('th:nth-child(n+4)').forEach((e) => { e.style.display = 'none'; }); table.querySelectorAll('td:nth-child(n+4)').forEach((e) => { e.style.display = 'none'; }); } } Step 4: Test your changes After you have made the changes, you will need to close and re-open the app in the Meeting, you can do so by selecting the Tab icon in the meeting controls shown at the top of the meeting to close the Meeting Side Panel and again to re-open it. When you re-open the tab in the Meeting Side Panel, only three table columns will now be visible. function showCompletionPopup() { let path = window.location.pathname; path = path.endsWith('/') ? path.slice(0, -1) : path; let pathArray = path.split('/'); let leafFolder = pathArray[pathArray.length-1]; let height = window.outerHeight / 1.5; let width = window.outerWidth / 2; window.open(`${window.origin}/app-camp/congrats/${leafFolder}`, 'Congratulations!', `width=${width}, height=${height}, left=100, top=100,`); } Congratulations! When you have finished this lab, please click this button to let us know! No personal information is collected; we only want to count how many people have completed the labs so we can continue to fund this work! Known issues For the latest issues, or to file a bug report, see the github issues list for this repository. References Apps for Teams meetings Create a configuration page Enable and configure your apps for Teams meetings Meeting apps API references Next steps After completing this lab, you may continue with any of the following labs. Add a Configurable Tab Add a Deep link to a personal Tab Add a Dialog Add a Meeting app Add a Message Extension Selling Your SaaS-based Teams Extension","title":"Add a Meeting app"},{"location":"aad/MeetingConfigurableTab/#add-a-configurable-tab-to-meetings","text":"This lab is part of extending with capabilities for your teams app which begins with a Northwind Orders core application using the AAD path. Important! This lab builds on the completed solution to the Configurable Tab lab. Complete labs A01 - A03 to get to the Northwind Orders core application and then complete the Configurable Tab Lab to add a configurable tab to your application before beginning this lab. Following on from the previous lab where you created a Configurable Tab which could be configured to display a list products with a given category, in this lab you will extend the tab so that it can also be used in Microsoft Teams meetings. Extending tabs for use in Microsoft Teams meetings provides the meeting owner the ability to add the tab, which can be accessed by meeting participants before, during, and after the meeting. It also allows sharing the contents of the tab to the meeting content stage without the participants having to switch to another window during the meeting as the content is displayed directly in the meeting window. In this lab you will learn to: Configure your Configurable Tab for use with Microsoft Teams meetings Add your tab to the Microsoft Teams Meeting Pre-meeting stage Add your tab to the Microsoft Teams Meeting Side Panel during a meeting Present your tab in the Microsoft Teams Meeting Content Stage during a meeting Use the Teams JS SDK to understand the current Microsoft Teams Frame Context Use the Teams JS SDK to understand whether the tab is being shared to the Microsoft Teams Meeting Content Stage Warning Currently it is only possible to use tabs in Meetings using the Microsoft Teams Desktop Client. Video briefing Configurable Tabs in Microsoft Teams Meetings","title":"Add a Configurable Tab to Meetings"},{"location":"aad/MeetingConfigurableTab/#features","text":"Microsoft Teams configurable tab to display a product category in during pre-meeting stage Microsoft Teams configurable tab to display a product category in the Meeting Side Panel during a Teams meeting Microosft Teams configurable tab to display a product category and be shared to the Meeting Content Stage","title":"Features"},{"location":"aad/MeetingConfigurableTab/#exercise-1-update-your-configurable-tab-for-use-with-meetings","text":"","title":"Exercise 1: Update your configurable tab for use with Meetings"},{"location":"aad/MeetingConfigurableTab/#step-1-add-context-array-to-application-manifest","text":"In your code editor, open the manifest/manifest.template.json file. Update the version number so it's greater than it was; for example if your manifest was version 1.4, make it 1.4.1 or 1.5.0. This is required in order for you to update the app in Teams. \"version\": \"1.5.0\" NOTE: Make each new version greater than the last so you can update the application in Teams! Now, immediately under the scopes array, in the your configurable tab object, add a new array for defining the context : \"configurableTabs\": [ { \"configurationUrl\": \"https://<HOST_NAME>/pages/tabConfig.html\", \"canUpdateConfiguration\": true, \"scopes\": [ \"teams\", \"groupchat\" ], \"context\": [ \"meetingChatTab\", \"meetingDetailsTab\", \"meetingSidePanel\", \"meetingStage\" ] } ]","title":"Step 1: Add context array to application manifest"},{"location":"aad/MeetingConfigurableTab/#step-2-rebuild-your-application-package","text":"Open a command line tool in your working folder and execute npm run package This will generate a new manifest.json file and a new application package (northwind.zip).","title":"Step 2: Rebuild your application package"},{"location":"aad/MeetingConfigurableTab/#step-3-start-your-app","text":"In your working directory execute this command to start the application npm start","title":"Step 3: Start your app"},{"location":"aad/MeetingConfigurableTab/#step-4-upload-the-app-package","text":"In the Teams web or desktop UI, click \"Apps\" in the sidebar 1\ufe0f\u20e3, then \"Manage your apps\" 2\ufe0f\u20e3. At this point you have three choices: Upload a custom app (upload the app for yourself or a specific team or group chat) - this only appears if you have enabled \"Upload custom apps\" in your setup policy; this was a step in the previous lab Upload an app to your org's app catalog (upload the app for use within your organization) - this only appears if you are a tenant administrator Submit an app to your org (initiate a workflow asking a tenant administrator to install your app) - this appears for everyone In this case, choose the second option 3\ufe0f\u20e3. Navigate to the Northwind.zip file in your manifest directory and upload it. Although the application is already installed, you are providing a newer version so it will update the application.","title":"Step 4: Upload the app package"},{"location":"aad/MeetingConfigurableTab/#exercise-2-add-your-tab-to-the-pre-meeting-stage","text":"","title":"Exercise 2: Add your tab to the pre-meeting stage"},{"location":"aad/MeetingConfigurableTab/#step-1-create-microsoft-teams-meeting","text":"Using the Microsoft Teams desktop client, open the Calendar app from the sidebar and select New meeting in the top right corner. Enter a title and add at least one required participant , select Send in the top right corner to create the meeting.","title":"Step 1: Create Microsoft Teams meeting"},{"location":"aad/MeetingConfigurableTab/#step-2-add-tab","text":"Select the meeting that you just created in the Calendar app, in the flyout, select Edit to open the meeting details. Select the (+) Add tab button in the meeting, search for Northwind Orders app and select it. In the tab configuration page, select a Category of products you want to display in the tab. The tab is added at the pre-meeting stage, so that meeting participants can view the tab content before the meeting begins, this also pre-loads the tab in to the meeting when it begins. Click Close in the top right corner to go back to the Calendar view.","title":"Step 2: Add tab"},{"location":"aad/MeetingConfigurableTab/#excercise-3-display-tab-in-meeting","text":"","title":"Excercise 3: Display tab in Meeting"},{"location":"aad/MeetingConfigurableTab/#step-1-start-meeting","text":"Select the meeting that you just created in the Calendar app, in the flyout, select Join to open the meeting and select Join now to start the meeting.","title":"Step 1: Start meeting"},{"location":"aad/MeetingConfigurableTab/#step-2-display-tab-in-meeting-side-panel","text":"When a tab has already been added to the meeting at the pre-meeting stage, the tab will be visible in the meeting controls shown at the top of the meeting. To display the tab in the Meeting Side Panel, select the tab icon, this will open the Meeting Side Panel displaying the tab content within it. At the moment the table is too big for the width of the side panel, but don't worry, we will come back to this and fix it in later exercise.","title":"Step 2: Display tab in Meeting Side Panel"},{"location":"aad/MeetingConfigurableTab/#step-3-present-tab-in-meeting-content-stage","text":"To make the tab content visible to all partipicants in the meeting, you can present the tab by sharing it to the Meeting Content Stage. Select the Share icon in the Meeting Side Panel to present the tab to the stage.","title":"Step 3: Present tab in Meeting Content Stage"},{"location":"aad/MeetingConfigurableTab/#exercise-4-update-tab-display-when-in-meeting-side-panel","text":"In the previous exercise we saw that when the tab was displayed in the Meeting Side Panel, the products table width was too wide for the space given to us by the Side Panel, to do this we need to use the Teams JS SDK v2 to help us understand the context in which our tab is running and whether it has been shared to the stage.","title":"Exercise 4: Update tab display when in Meeting Side Panel"},{"location":"aad/MeetingConfigurableTab/#step-1-add-code-to-detect-frame-context","text":"We can use the Teams JS SDK FrameContexts capability to obtain the current FrameContext type from the page context and check whether the app is running in the sidePanel frame. In client/modules/teamsHelpers.js , add the following function. // async function returns true if app is running in side panel in a Teams meeting export async function inSidePanel() { try { await ensureTeamsSdkInitialized(); const { page } = await microsoftTeams.app.getContext(); return page.frameContext === microsoftTeams.FrameContexts.sidePanel; } catch (e) { console.log(`${e} from Teams SDK, may be running outside of Teams`); return false; } }","title":"Step 1: Add code to detect Frame Context"},{"location":"aad/MeetingConfigurableTab/#step-2-add-code-to-detect-whether-tab-is-shared-to-stage","text":"We can use the Teams JS SDK meeting capability to obtain the current state of the meeting stage. In client/modules/teamsHelpers.js , add the following function. // async function returns true if app has been shared to stage in a Teams meeting export async function sharedToStage() { try { await ensureTeamsSdkInitialized(); const { isAppSharing } = await microsoftTeams.meeting.getAppContentStageSharingState(); return isAppSharing; } catch (e) { console.log(`${e} from Teams SDK, may be running outside of Teams`); return false; } }","title":"Step 2: Add code to detect whether tab is shared to stage"},{"location":"aad/MeetingConfigurableTab/#step-3-add-code-to-hide-table-columns-when-tab-is-displayed-in-meeting-side-panel","text":"We can use the two helper functions that we just added to hide some of the table columns when the tab is shown in the side panel, but to not remove them when the same tab is presented to the stage so we can make utilise the full width of the meeting content stage. In client/pages/categoryDetail.js , add the following import statement to the top of the file. import { inSidePanel, sharedToStage } from '../modules/teamsHelpers.js'; Add the following code into the displayUI function around line 40. if (await inSidePanel() && !(await sharedToStage())) { const table = document.getElementById('products'); table.queryS electorAll('th:nth-child(n+4)').forEach((e) => { e.style.display = 'none'; }); table.querySelectorAll('td:nth-child(n+4)').forEach((e) => { e.style.display = 'none'; }); } The if statement that creates the products table if a category is selected, should look like if (category) { displayElement.innerHTML = ` <img src=\"data:image/bmp;base64,${category.picture}\" class=\"categoryImage\"></img> <h3>${category.displayName}</h3> <p>${category.description}</p> `; category.products.forEach(product => { const row = document.createElement('tr'); row.innerHTML = `<tr> <td><a href=\"/pages/productDetail.html?productId=${product.productId}\">${product.productName}</a></td> <td>${product.quantityPerUnit}</td> <td>${product.unitPrice}</td> <td>${product.unitsInStock}</td> <td>${product.unitsOnOrder}</td> <td>${product.supplierName} (${product.supplierCountry})</td> </tr>`; productsElement.append(row); }); if (await inSidePanel() && !(await sharedToStage())) { const table = document.getElementById('products'); table.querySelectorAll('th:nth-child(n+4)').forEach((e) => { e.style.display = 'none'; }); table.querySelectorAll('td:nth-child(n+4)').forEach((e) => { e.style.display = 'none'; }); } }","title":"Step 3: Add code to hide table columns when tab is displayed in Meeting Side Panel"},{"location":"aad/MeetingConfigurableTab/#step-4-test-your-changes","text":"After you have made the changes, you will need to close and re-open the app in the Meeting, you can do so by selecting the Tab icon in the meeting controls shown at the top of the meeting to close the Meeting Side Panel and again to re-open it. When you re-open the tab in the Meeting Side Panel, only three table columns will now be visible. function showCompletionPopup() { let path = window.location.pathname; path = path.endsWith('/') ? path.slice(0, -1) : path; let pathArray = path.split('/'); let leafFolder = pathArray[pathArray.length-1]; let height = window.outerHeight / 1.5; let width = window.outerWidth / 2; window.open(`${window.origin}/app-camp/congrats/${leafFolder}`, 'Congratulations!', `width=${width}, height=${height}, left=100, top=100,`); }","title":"Step 4: Test your changes"},{"location":"aad/MeetingConfigurableTab/#congratulations","text":"When you have finished this lab, please click this button to let us know! No personal information is collected; we only want to count how many people have completed the labs so we can continue to fund this work!","title":"Congratulations!"},{"location":"aad/MeetingConfigurableTab/#known-issues","text":"For the latest issues, or to file a bug report, see the github issues list for this repository.","title":"Known issues"},{"location":"aad/MeetingConfigurableTab/#references","text":"Apps for Teams meetings Create a configuration page Enable and configure your apps for Teams meetings Meeting apps API references","title":"References"},{"location":"aad/MeetingConfigurableTab/#next-steps","text":"After completing this lab, you may continue with any of the following labs. Add a Configurable Tab Add a Deep link to a personal Tab Add a Dialog Add a Meeting app Add a Message Extension Selling Your SaaS-based Teams Extension","title":"Next steps"},{"location":"aad/MessagingExtension/","text":"(function(c,l,a,r,i,t,y){ c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)}; t=l.createElement(r);t.async=1;t.src=\"https://www.clarity.ms/tag/\"+i; y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y); })(window, document, \"clarity\", \"script\", \"dfh6fjbr5x\"); Add a Message Extension Important! This lab builds on the completed solution to lab A03-after-apply-styling.md , which is the last of the \"core\" labs. If you haven't done them, you can start here . In this lab, you'll add a Search Message Extension to the Northwind Orders application so users can access and share order information in Microsoft Teams conversations. The information will be shared on an adaptive card; users receiving the card can then take action on the data. There are several kinds of message extensions A Search message extension is useful when you want to let users look up information in a Teams conversation. You can also create Action message extension to do things like create, add or update data in your application, and still share all this in a conversation in Teams. All this is possible using Message extensions capability in Teams. We will cover the following concepts in this exercise: Message extensions Bot Framework Adaptive cards Video briefing Search Message Extension with Adaptive Cards Features A search based message extension to search for products and share result in the form of a rich card in a conversation. In the rich card, provide an input field and a submit button for users to take action to update stock value of a product in the Northwind Database, all happening in the same conversation Exercise 1: Bot registration Message extensions allow users to bring the application into a conversation in Teams. You can search data in your application, perform actions on them and send back results of your interaction to your application as well as Teams to display all results in a rich card in the conversation. Since it is a conversation between your application's web service and teams, you'll need a secure communication protocol to send and receive messages. Microsoft Teams uses the Azure Bot Framework for this purpose. For that reason, you'll need to register your web service as a bot in the Bot Framework and update the app manifest file to define your web service so Teams client can know about it. Step 1: Run ngrok Ignore this step if you have ngrok already running Start ngrok to obtain the URL for your application. Run this command in the command line tool of your choice: ngrok http 3978 -host-header=localhost The terminal will display a screen like below; Save the URL for Step 2 . Step 2: Register your web service as an bot using Teams Developer Portal Microsoft Teams will communicate with your web service using the [Azure Bot Service]. In order to use this service, you need to register a bot with Microsoft Azure. There are two ways to set this up: if you have an Azure subscription, you can register your bot using the Azure Portal ; if not, you can use the Teams Developer Portal . VIDEO: Register your bot using the Azure Portal Register and configure a bot in Microsoft Azure These instructions will guide you through the second option, which is to register your bot using the Teams Developer Portal. The Teams Developer Portal is a valuable tool for Teams developers that is tightly integrated with the Teams Toolkit . Go to https://dev.teams.microsoft.com/home/ . Select Apps on the left navigation. Search for the app Northwind Orders . If you don't find it, simply create a new app at random; we really just need for the Developer Portal to register our bot and we won't be managing the manifest using Developer Portal. On the left side, under Configure , select App features . From below features to add, select Bot . To configure the bot, under Identify your bot , select the link Create new bot . This will take you to Bot management page. Select the + New Bot button, which opens a dialog to input the bot name. Add a name and select Add . Once the bot is added, you will be taken to the configuration page for the bot. Update the Endpoint address to the ngrok url and append /api/messages to the url. Select Save . Select link Client Secrets in the left navigation within the bot configuration page. Select the button, Add client secret for your bot A new secret will be generated in a dialog. Copy the client secret and keep safe. We will need this later. Now on top of the same page, Select Bots to go back to all the bots you have created, including the new one we created just now. Copy the bot id of the new bot, keep this copied somewhere as well. We will need this later. Exercise 2: Code changes Step 1: Add new files & folders There are new files and folders that you need to add into the project structure. Create a new images folder under client folder and copy over the 9 image files needed for the rich adaptive cards to display products' inventory. Note The Northwind Database does not have nice images for us to show rich cards with images so we have added some images and mapped them to each product using hashing mechanism. As long as you got the names of the images right, we don't have to worry what images your want to add in the folder \ud83d\ude09. You can get creative here! Create a new cards folder under the server folder and add three files errorCard.js , productCard.js and stockUpdateSuccess.js . They are adaptive cards needed for the message extension to display in a conversation based on what state the cards are in. For example, to display the product card, the bot code will use productCard.js ; if the form is submitted by a user to update the stock value, the bot will use the stockUpdateSuccess.js card to let users know the action is completed; and in case of any error errorCard.js will be displayed. Note Adaptive cards are light-weight interactive content you can place in Teams conversations and many other places. They are simple JSON. These files contain adaptive card templates which allow binding data to the JSON when the card is created. Copy below content into errorCard.js . Notice the data binding expressions such as ${productName} and ${unitsInStock} . export default{ \"type\": \"AdaptiveCard\", \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\", \"version\": \"1.4\", \"body\": [ { \"type\": \"TextBlock\", \"text\": \"Oops! Something went wrong:\", \"wrap\": true }, { \"type\": \"Graph\", \"someProperty\": \"foo\", \"fallback\": { \"type\": \"TextBlock\", \"text\": \"Could not update stock at this time\", \"wrap\": true } } ] } Copy below content into productCard.js export default { \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\", \"type\": \"AdaptiveCard\", \"version\": \"1.4\", \"refresh\": { \"userIds\": [], \"action\": { \"type\": \"Action.Execute\", \"verb\": \"refresh\", \"title\": \"Refresh\", \"data\": { \"pdtId\": \"${productId}\", \"pdtName\": \"${productName}\", \"categoryId\": \"${categoryId}\" } } }, \"body\": [ { \"type\": \"ColumnSet\", \"columns\": [ { \"type\": \"Column\", \"width\": \"stretch\", \"items\": [ { \"type\": \"TextBlock\", \"text\": \"Stock form\", \"horizontalAlignment\": \"right\", \"isSubtle\": true, \"wrap\": true }, { \"type\": \"TextBlock\", \"text\": \"${productName}\", \"horizontalAlignment\": \"right\", \"spacing\": \"none\", \"size\": \"large\", \"color\": \"warning\", \"wrap\": true }, { \"type\": \"TextBlock\", \"text\": \"Use this form to chat with dealer or update the stock details of ${productName} \", \"isSubtle\": true, \"wrap\": true } ] } ] }, { \"type\": \"ColumnSet\", \"columns\": [ { \"type\": \"Column\", \"width\": 2, \"items\": [ { \"type\": \"TextBlock\", \"text\": \"Existing stock\", \"weight\": \"bolder\", \"size\": \"medium\", \"wrap\": true, \"style\": \"heading\" }, { \"type\": \"TextBlock\", \"text\": \"${unitsInStock}\", \"isSubtle\": true, \"spacing\": \"None\" }, { \"type\": \"Input.Text\", \"id\": \"txtStock\", \"label\": \"New stock count\", \"min\": 0, \"max\": 9999, \"errorMessage\": \"Invalid input, use whole positive number\", \"style\": \"tel\" } ] }, { \"type\": \"Column\", \"width\": 1, \"items\": [ { \"type\": \"Image\", \"url\": \"${imageUrl}\", \"size\": \"auto\", \"altText\": \"Image of product in warehouse\" } ] } ] } ], \"actions\": [ { \"type\": \"Action.Execute\", \"title\": \"Update stock\", \"verb\": \"ok\", \"data\": { \"pdtId\": \"${productId}\", \"pdtName\": \"${productName}\", \"categoryId\": \"${categoryId}\" }, \"style\": \"positive\" } ] } Copy below content into stockUpdateSuccess.js export default { \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\", \"type\": \"AdaptiveCard\", \"version\": \"1.4\", \"refresh\": { \"userIds\": [], \"action\": { \"type\": \"Action.Execute\", \"verb\": \"refresh\", \"title\": \"Refresh\", \"data\": { \"pdtId\": \"${productId}\", \"pdtName\": \"${productName}\", \"categoryId\": \"${categoryId}\" } } }, \"body\": [ { \"type\": \"ColumnSet\", \"columns\": [ { \"type\": \"Column\", \"width\": \"stretch\", \"items\": [ { \"type\": \"TextBlock\", \"text\": \"Stock form\", \"horizontalAlignment\": \"right\", \"isSubtle\": true, \"wrap\": true }, { \"type\": \"TextBlock\", \"text\": \"${productName}\", \"horizontalAlignment\": \"right\", \"spacing\": \"none\", \"size\": \"large\", \"color\": \"warning\", \"wrap\": true }, { \"type\": \"TextBlock\", \"text\": \"Use this form to chat with dealer or update the stock details of ${productName} \", \"isSubtle\": true, \"wrap\": true } ] } ] }, { \"type\": \"ColumnSet\", \"columns\": [ { \"type\": \"Column\", \"width\": 2, \"items\": [ { \"type\": \"TextBlock\", \"text\": \"Existing stock\", \"weight\": \"bolder\", \"size\": \"medium\", \"wrap\": true, \"style\": \"heading\" }, { \"type\": \"TextBlock\", \"text\": \"${unitsInStock}\", \"isSubtle\": true, \"spacing\": \"None\" } ] }, { \"type\": \"Column\", \"width\": 1, \"items\": [ { \"type\": \"Image\", \"url\": \"${imageUrl}\", \"size\": \"auto\", \"altText\": \"Image of product in warehouse\" } ] } ] } ] } Create a file bot.js inside the server folder. This is the StockManagerBot for the message extension which will handle the search, display and update functionality of products within the conversation. Notice the event handlers The code contains these event handlers which are invoked by the Bot Framework adapter: handleTeamsMessagingExtensionQuery() - Used in creating a Search-based Message Extension when you query which then returns the Message Extension Response for the query. handleTeamsMessagingExtensionSelectItem() - Used in creating a Search-based Message Extension when select a search query result, which then returns the Message Extension Response for the query. onInvokeActivity() - If the bots receive a message activity, then the turn handler receives a notification of that incoming activity. The turn handler then sends the incoming activity to Team's activity handler onInvokeActivity which routes all Teams invoke activities. To implement our own logic for, you must override this method in your bot. Copy the following content into bot.js file. import { TeamsActivityHandler, CardFactory } from 'botbuilder'; import { getProductByName, updateProductUnitStock } from './northwindDataService.js'; import * as ACData from \"adaptivecards-templating\"; import * as AdaptiveCards from \"adaptivecards\"; import pdtCardPayload from './cards/productCard.js' import successCard from './cards/stockUpdateSuccess.js'; import errorCard from './cards/errorCard.js' export class StockManagerBot extends TeamsActivityHandler { constructor() { super(); // Registers an activity event handler for the message event, emitted for every incoming message activity. this.onMessage(async (context, next) => { console.log('Running on Message Activity.'); await next(); //go to the next handler }); } //When you perform a search from the message extension app async handleTeamsMessagingExtensionQuery(context, query) { const { name, value } = query.parameters[0]; if (name !== 'productName') { return; } const products = await getProductByName(value); const attachments = []; for (const pdt of products) { const heroCard = CardFactory.heroCard(pdt.productName); const preview = CardFactory.heroCard(pdt.productName); preview.content.tap = { type: 'invoke', value: { productName: pdt.productName, productId: pdt.productId, unitsInStock: pdt.unitsInStock, categoryId: pdt.categoryId } }; const attachment = { ...heroCard, preview }; attachments.push(attachment); } var result = { composeExtension: { type: \"result\", attachmentLayout: \"list\", attachments: attachments } }; return result; } //on preview tap of an item from the list of search result items async handleTeamsMessagingExtensionSelectItem(context, pdt) { const preview = CardFactory.thumbnailCard(pdt.productName); var template = new ACData.Template(pdtCardPayload); const imageGenerator = Math.floor((pdt.productId / 1) % 10); const imgUrl = `https://${process.env.HOSTNAME}/images/${imageGenerator}.PNG` var card = template.expand({ $root: { productName: pdt.productName, unitsInStock: pdt.unitsInStock, productId: pdt.productId, categoryId: pdt.categoryId, imageUrl: imgUrl } }); var adaptiveCard = new AdaptiveCards.AdaptiveCard(); adaptiveCard.parse(card); const adaptive = CardFactory.adaptiveCard(card); const attachment = { ...adaptive, preview }; return { composeExtension: { type: 'result', attachmentLayout: 'grid', attachments: [attachment] }, }; } //on every activity async onInvokeActivity(context) { let runEvents = true; try { if (!context.activity.name && context.activity.channelId === 'msteams') { return await this.handleTeamsCardActionInvoke(context); } else { switch (context.activity.name) { case 'composeExtension/query': return this.createInvokeResponse( await this.handleTeamsMessagingExtensionQuery(context, context.activity.value) ); case 'composeExtension/selectItem': return this.createInvokeResponse( await this.handleTeamsMessagingExtensionSelectItem(context, context.activity.value) ); case 'adaptiveCard/action': const request = context.activity.value; if (request) { if (request.action.verb === 'ok') { const data = request.action.data; await updateProductUnitStock(data.pdtId, data.txtStock); var template = new ACData.Template(successCard); const imageGenerator = Math.floor((data.pdtId / 1) % 10); const imgUrl = `https://${process.env.HOSTNAME}/images/${imageGenerator}.PNG` var card = template.expand({ $root: { productName: data.pdtName, unitsInStock: data.txtStock, imageUrl: imgUrl } }); var responseBody = { statusCode: 200, type: \"application/vnd.microsoft.card.adaptive\", value: card } return this.createInvokeResponse(responseBody); } else if (request.action.verb === 'refresh') { //refresh card } else { var responseBody = { statusCode: 200, type: \"application/vnd.microsoft.card.adaptive\", value: errorCard } return this.createInvokeResponse(responseBody); } } default: runEvents = false; return super.onInvokeActivity(context); } } } catch (err) { if (err.message === 'NotImplemented') { return { status: 501 }; } else if (err.message === 'BadRequest') { return { status: 400 }; } throw err; } finally { if (runEvents) { this.defaultNextEvent(context)(); } } } defaultNextEvent = (context) => { const runDialogs = async () => { await this.handle(context, 'Dialog', async () => { // noop }); }; return runDialogs; } createInvokeResponse(body) { return { status: 200, body }; } } Step 2: Update existing files There are files that were updated to add the new features. Let's take files one by one to understand what changes you need to make for this exercise. 1. .env Open the .env file in your working directory and add two new tokens BOT_REG_AAD_APP_ID (Bot id) and BOT_REG_AAD_APP_PASSWORD (client secret) with values copied in Step 2 . The .env file contents will now look like below: COMPANY_NAME=Northwind Traders PORT=3978 TEAMS_APP_ID=c42d89e3-19b2-40a3-b20c-44cc05e6ee26 HOST_NAME=yourhostname.ngrok.io TENANT_ID=c8888ec7-a322-45cf-a170-7ce0bdb538c5 CLIENT_ID=b323630b-b67c-4954-a6e2-7cfa7572bbc6 CLIENT_SECRET=111111.ABCD BOT_REG_AAD_APP_ID=88888888-0d02-43af-85d7-72ba1d66ae1d BOT_REG_AAD_APP_PASSWORD=111111vk 2. manifest/makePackage.js The npm script that builds a manifest file by taking the values from your local development configuration like .env file, need an extra token for the Bot we just created. Let's add that token BOT_REG_AAD_APP_ID (bot id) into the script. Replace code block: if (key.indexOf('TEAMS_APP_ID') === 0 || key.indexOf('HOST_NAME') === 0 || key.indexOf('CLIENT_ID') === 0) { With: if (key.indexOf('TEAMS_APP_ID') === 0 || key.indexOf('HOST_NAME') === 0 || key.indexOf('CLIENT_ID') === 0|| key.indexOf('BOT_REG_AAD_APP_ID') === 0) { 3.manifest/manifest.template.json Add the message extension command information (bolded) in the manifest after showLoadingIndicator property: { \"$schema\": \"https://developer.microsoft.com/en-us/json-schemas/teams/v1.8/MicrosoftTeams.schema.json\", \"manifestVersion\": \"1.8\", \"version\": \"1.6.0\", \"id\": \"<TEAMS_APP_ID>\", \"packageName\": \"io.github.officedev.teamsappcamp1.northwind\", \"developer\": { \"name\": \"Northwind Traders\", \"websiteUrl\": \"https://<HOST_NAME>/\", \"privacyUrl\": \"https://<HOST_NAME>/privacy.html\", \"termsOfUseUrl\": \"https://<HOST_NAME>/termsofuse.html\" }, \"icons\": { \"color\": \"northwind192.png\", \"outline\": \"northwind32.png\" }, \"name\": { \"short\": \"Northwind Orders\", \"full\": \"Northwind Traders Order System\" }, \"description\": { \"short\": \"Sample enterprise app using the Northwind Traders sample database\", \"full\": \"Simple app to demonstrate porting a SaaS app to Microsoft Teams\" }, \"accentColor\": \"#FFFFFF\", \"configurableTabs\": [ { \"configurationUrl\": \"https://<HOST_NAME>/pages/tabConfig.html\", \"canUpdateConfiguration\": true, \"scopes\": [ \"team\", \"groupchat\" ] } ], \"staticTabs\": [ { \"entityId\": \"Orders\", \"name\": \"My Orders\", \"contentUrl\": \"https://<HOST_NAME>/pages/myOrders.html\", \"websiteUrl\": \"https://<HOST_NAME>/pages/myOrders.html\", \"scopes\": [ \"personal\" ] }, { \"entityId\": \"Products\", \"name\": \"Products\", \"contentUrl\": \"https://<HOST_NAME>/pages/categories.html\", \"websiteUrl\": \"https://<HOST_NAME>/pages/categories.html\", \"scopes\": [ \"personal\" ] } ], \"showLoadingIndicator\": false, \"composeExtensions\": [ { \"botId\": \"<BOT_REG_AAD_APP_ID>\", \"canUpdateConfiguration\": true, \"commands\": [ { \"id\": \"productSearch\", \"type\": \"query\", \"title\": \"Find product\", \"description\": \"\", \"initialRun\": false, \"fetchTask\": false, \"context\": [ \"commandBox\", \"compose\" ], \"parameters\": [ { \"name\": \"productName\", \"title\": \"product name\", \"description\": \"Enter the product name\", \"inputType\": \"text\" } ] } ] } ], \"bots\": [ { \"botId\": \"<BOT_REG_AAD_APP_ID>\", \"scopes\": [ \"personal\", \"team\", \"groupchat\" ], \"isNotificationOnly\": false, \"supportsFiles\": false } ], \"permissions\": [ \"identity\", \"messageTeamMembers\" ], \"validDomains\": [ \"<HOST_NAME>\" ], \"webApplicationInfo\": { \"id\": \"<CLIENT_ID>\", \"resource\": \"api://<HOST_NAME>/<CLIENT_ID>\" } } Update the version number so it's greater than it was; for example if your manifest was version 1.4, make it 1.4.1 or 1.5.0. This is required in order for you to update the app in Teams. \"version\": \"1.5.0\" 4.server/identityService.js Add a condition to let validation be performed by Bot Framework Adapter. In the function validateApiRequest() , add an if condition and check if request is from bot then move to next step. if (req.path===\"/messages\") { console.log('Request for bot, validation will be performed by Bot Framework Adapter'); next(); } else { //do the rest } The final form of the function definition will look as below: async function validateApiRequest(req, res, next) { const audience = `api://${process.env.HOSTNAME}/${process.env.CLIENT_ID}`; const token = req.headers['authorization'].split(' ')[1]; if (req.path===\"/messages\") { console.log('Request for bot, validation will be performed by Bot Framework Adapter'); next(); } else { aad.verify(token, { audience: audience }, async (err, result) => { if (result) { console.log(`Validated authentication on /api${req.path}`); next(); } else { console.error(`Invalid authentication on /api${req.path}: ${err.message}`); res.status(401).json({ status: 401, statusText: \"Access denied\" }); } }); } } 5.server/northwindDataService.js Add two new functions as below - getProductByName() - This will search products by name and bring the top 5 results back to the message extension's search results. - updateProductUnitStock() - This will update the value of unit stock based on the input action of a user on the product result card. Add the two new function definitions by appending below code block into the file: export async function getProductByName(productNameStartsWith) { let result = {}; const products = await db.getTable(\"Products\", \"ProductID\"); const match = productNameStartsWith.toLowerCase(); const matchingProducts = products.data.filter((item) => item.ProductName.toLowerCase().startsWith(match)); result = matchingProducts.map(product => ({ productId: product.ProductID, productName: product.ProductName, unitsInStock: product.UnitsInStock, categoryId: product.CategoryID })); return result; } export async function updateProductUnitStock(productId, unitsInStock) { const products = await db.getTable(\"Products\", \"ProductID\"); const product = products.item(productId); product.UnitsInStock = unitsInStock; productCache[productId] = null; // Clear the product cache categoryCache[product.CategoryID]=null;// Clear the category cache for this product await products.save(); // Write the products \"table\" } 6.server/server.js Import the needed modules for bot related code. Import required bot service from botbuilder package and the bot StockManagerBot from the newly added file bot.js import {StockManagerBot} from './bot.js'; import { BotFrameworkAdapter } from 'botbuilder'; Note As a standard , app.listen() should always be at the end of the file, so make sure your code updates happen before this request. A bot adapter authenticates and connects a bot to a service endpoint to send and receive message. So to authenticate, we'll need to pass the bot registration's AAD app id and app secret. Add below code to initialize the bot adapter. const adapter = new BotFrameworkAdapter({ appId: process.env.BOT_REG_AAD_APP_ID, appPassword:process.env.BOT_REG_AAD_APP_PASSWORD }); Create the bot that will handle incoming messages. const stockManagerBot = new StockManagerBot(); For the main dialog add error handling. // Catch-all for errors. const onTurnErrorHandler = async (context, error) => { // This check writes out errors to console log .vs. app insights. // NOTE: In production environment, you should consider logging this to Azure // application insights. console.error(`\\n [onTurnError] unhandled error: ${ error }`); // Send a trace activity, which will be displayed in Bot Framework Emulator await context.sendTraceActivity( 'OnTurnError Trace', `${ error }`, 'https://www.botframework.com/schemas/error', 'TurnError' ); // Send a message to the user await context.sendActivity('The bot encountered an error or bug.'); await context.sendActivity('To continue to run this bot, please fix the bot source code.'); }; // Set the onTurnError for the singleton BotFrameworkAdapter. adapter.onTurnError = onTurnErrorHandler; Listen for incoming requests. app.post('/api/messages', (req, res) => { adapter.processActivity(req, res, async (context) => { await stockManagerBot.run(context); }).catch(error=>{ console.log(error) }); }); The final server/server.js file should look like this (changes from other extended labs notwithstanding). 7. package.json You'll need to install additional packages for adaptive cards and botbuilder. Add below packages into the package.json file by run below script to install new packages: npm i adaptive-expressions adaptivecards adaptivecards-templating botbuilder Check if packages are added into dependencies in the package.json file: \"adaptive-expressions\": \"^4.15.0\", \"adaptivecards\": \"^2.10.0\", \"adaptivecards-templating\": \"^2.2.0\", \"botbuilder\": \"^4.15.0\" Exercise 3: Test the changes Now that you have applied all code changes, let's test the features. Step 1 : Create new teams app package Make sure the env file is configured as per the sample file .env_Sample. Make sure all npm packages are installed, run below script in the command line tool npm i Create updated teams app package by running below script: npm run package Step 2: Start your local project Now it's time to run your updated application and run it in Microsoft Teams. Start the application by running below command: npm start Step 3: Upload the app package In the Teams web or desktop UI, click \"Apps\" in the sidebar 1\ufe0f\u20e3, then \"Manage your apps\" 2\ufe0f\u20e3. At this point you have three choices: Upload a custom app (upload the app for yourself or a specific team or group chat) - this only appears if you have enabled \"Upload custom apps\" in your setup policy; this was a step in the previous lab Upload an app to your org's app catalog (upload the app for use within your organization) - this only appears if you are a tenant administrator Submit an app to your org (initiate a workflow asking a tenant administrator to install your app) - this appears for everyone In this case, choose the first option. Navigate to the Northwind.zip file in your manifest directory and upload it. The Teams client will display the application information, add the application to a team or a group chat. Step 4 : Run the application in Teams client We have added the app into a Group chat for demonstration. Go to the chat where the app is installed. Open the message extension app from the compose area. Search for the product from the message extension (This should be easy if you have used GIPHY before \ud83d\ude09) Select the product you want to add in the conversation. Note A little preview will be shown in the message compose area. Note at the time this lab was created, there is an outstanding platform issue related to the preview. If you are in a Teams team, this will be blank. Hence showing this capability in a group chat. This is the product card, with a form to fill in and submit, incase the unit stock value has to be changed. Fill in a new value in the form, and select Update stock . Once it's success fully updated, the card refreshes to show the new stock value. The stock values are saved into the JSON version of the Northwind database; if you find the product in the Products tab, you'll see the new value. function showCompletionPopup() { let path = window.location.pathname; path = path.endsWith('/') ? path.slice(0, -1) : path; let pathArray = path.split('/'); let leafFolder = pathArray[pathArray.length-1]; let height = window.outerHeight / 1.5; let width = window.outerWidth / 2; window.open(`${window.origin}/app-camp/congrats/${leafFolder}`, 'Congratulations!', `width=${width}, height=${height}, left=100, top=100,`); } Congratulations! When you have finished this lab, please click this button to let us know! No personal information is collected; we only want to count how many people have completed the labs so we can continue to fund this work! Next steps After completing this lab, you may continue with additional extended labs! Add a Configurable Tab Add a Deep link to a personal Tab Add a Dialog Add a Meeting app Add a Message Extension Selling Your SaaS-based Teams Extension","title":"Add a Message Extension"},{"location":"aad/MessagingExtension/#add-a-message-extension","text":"Important! This lab builds on the completed solution to lab A03-after-apply-styling.md , which is the last of the \"core\" labs. If you haven't done them, you can start here . In this lab, you'll add a Search Message Extension to the Northwind Orders application so users can access and share order information in Microsoft Teams conversations. The information will be shared on an adaptive card; users receiving the card can then take action on the data. There are several kinds of message extensions A Search message extension is useful when you want to let users look up information in a Teams conversation. You can also create Action message extension to do things like create, add or update data in your application, and still share all this in a conversation in Teams. All this is possible using Message extensions capability in Teams. We will cover the following concepts in this exercise: Message extensions Bot Framework Adaptive cards Video briefing Search Message Extension with Adaptive Cards","title":"Add a Message Extension"},{"location":"aad/MessagingExtension/#features","text":"A search based message extension to search for products and share result in the form of a rich card in a conversation. In the rich card, provide an input field and a submit button for users to take action to update stock value of a product in the Northwind Database, all happening in the same conversation","title":"Features"},{"location":"aad/MessagingExtension/#exercise-1-bot-registration","text":"Message extensions allow users to bring the application into a conversation in Teams. You can search data in your application, perform actions on them and send back results of your interaction to your application as well as Teams to display all results in a rich card in the conversation. Since it is a conversation between your application's web service and teams, you'll need a secure communication protocol to send and receive messages. Microsoft Teams uses the Azure Bot Framework for this purpose. For that reason, you'll need to register your web service as a bot in the Bot Framework and update the app manifest file to define your web service so Teams client can know about it.","title":"Exercise 1: Bot registration"},{"location":"aad/MessagingExtension/#step-1-run-ngrok","text":"Ignore this step if you have ngrok already running Start ngrok to obtain the URL for your application. Run this command in the command line tool of your choice: ngrok http 3978 -host-header=localhost The terminal will display a screen like below; Save the URL for Step 2 .","title":"Step 1: Run ngrok"},{"location":"aad/MessagingExtension/#step-2-register-your-web-service-as-an-bot-using-teams-developer-portal","text":"Microsoft Teams will communicate with your web service using the [Azure Bot Service]. In order to use this service, you need to register a bot with Microsoft Azure. There are two ways to set this up: if you have an Azure subscription, you can register your bot using the Azure Portal ; if not, you can use the Teams Developer Portal . VIDEO: Register your bot using the Azure Portal Register and configure a bot in Microsoft Azure These instructions will guide you through the second option, which is to register your bot using the Teams Developer Portal. The Teams Developer Portal is a valuable tool for Teams developers that is tightly integrated with the Teams Toolkit . Go to https://dev.teams.microsoft.com/home/ . Select Apps on the left navigation. Search for the app Northwind Orders . If you don't find it, simply create a new app at random; we really just need for the Developer Portal to register our bot and we won't be managing the manifest using Developer Portal. On the left side, under Configure , select App features . From below features to add, select Bot . To configure the bot, under Identify your bot , select the link Create new bot . This will take you to Bot management page. Select the + New Bot button, which opens a dialog to input the bot name. Add a name and select Add . Once the bot is added, you will be taken to the configuration page for the bot. Update the Endpoint address to the ngrok url and append /api/messages to the url. Select Save . Select link Client Secrets in the left navigation within the bot configuration page. Select the button, Add client secret for your bot A new secret will be generated in a dialog. Copy the client secret and keep safe. We will need this later. Now on top of the same page, Select Bots to go back to all the bots you have created, including the new one we created just now. Copy the bot id of the new bot, keep this copied somewhere as well. We will need this later.","title":"Step 2: Register your web service as an bot using Teams Developer Portal"},{"location":"aad/MessagingExtension/#exercise-2-code-changes","text":"","title":"Exercise 2: Code changes"},{"location":"aad/MessagingExtension/#step-1-add-new-files-folders","text":"There are new files and folders that you need to add into the project structure. Create a new images folder under client folder and copy over the 9 image files needed for the rich adaptive cards to display products' inventory. Note The Northwind Database does not have nice images for us to show rich cards with images so we have added some images and mapped them to each product using hashing mechanism. As long as you got the names of the images right, we don't have to worry what images your want to add in the folder \ud83d\ude09. You can get creative here! Create a new cards folder under the server folder and add three files errorCard.js , productCard.js and stockUpdateSuccess.js . They are adaptive cards needed for the message extension to display in a conversation based on what state the cards are in. For example, to display the product card, the bot code will use productCard.js ; if the form is submitted by a user to update the stock value, the bot will use the stockUpdateSuccess.js card to let users know the action is completed; and in case of any error errorCard.js will be displayed. Note Adaptive cards are light-weight interactive content you can place in Teams conversations and many other places. They are simple JSON. These files contain adaptive card templates which allow binding data to the JSON when the card is created. Copy below content into errorCard.js . Notice the data binding expressions such as ${productName} and ${unitsInStock} . export default{ \"type\": \"AdaptiveCard\", \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\", \"version\": \"1.4\", \"body\": [ { \"type\": \"TextBlock\", \"text\": \"Oops! Something went wrong:\", \"wrap\": true }, { \"type\": \"Graph\", \"someProperty\": \"foo\", \"fallback\": { \"type\": \"TextBlock\", \"text\": \"Could not update stock at this time\", \"wrap\": true } } ] } Copy below content into productCard.js export default { \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\", \"type\": \"AdaptiveCard\", \"version\": \"1.4\", \"refresh\": { \"userIds\": [], \"action\": { \"type\": \"Action.Execute\", \"verb\": \"refresh\", \"title\": \"Refresh\", \"data\": { \"pdtId\": \"${productId}\", \"pdtName\": \"${productName}\", \"categoryId\": \"${categoryId}\" } } }, \"body\": [ { \"type\": \"ColumnSet\", \"columns\": [ { \"type\": \"Column\", \"width\": \"stretch\", \"items\": [ { \"type\": \"TextBlock\", \"text\": \"Stock form\", \"horizontalAlignment\": \"right\", \"isSubtle\": true, \"wrap\": true }, { \"type\": \"TextBlock\", \"text\": \"${productName}\", \"horizontalAlignment\": \"right\", \"spacing\": \"none\", \"size\": \"large\", \"color\": \"warning\", \"wrap\": true }, { \"type\": \"TextBlock\", \"text\": \"Use this form to chat with dealer or update the stock details of ${productName} \", \"isSubtle\": true, \"wrap\": true } ] } ] }, { \"type\": \"ColumnSet\", \"columns\": [ { \"type\": \"Column\", \"width\": 2, \"items\": [ { \"type\": \"TextBlock\", \"text\": \"Existing stock\", \"weight\": \"bolder\", \"size\": \"medium\", \"wrap\": true, \"style\": \"heading\" }, { \"type\": \"TextBlock\", \"text\": \"${unitsInStock}\", \"isSubtle\": true, \"spacing\": \"None\" }, { \"type\": \"Input.Text\", \"id\": \"txtStock\", \"label\": \"New stock count\", \"min\": 0, \"max\": 9999, \"errorMessage\": \"Invalid input, use whole positive number\", \"style\": \"tel\" } ] }, { \"type\": \"Column\", \"width\": 1, \"items\": [ { \"type\": \"Image\", \"url\": \"${imageUrl}\", \"size\": \"auto\", \"altText\": \"Image of product in warehouse\" } ] } ] } ], \"actions\": [ { \"type\": \"Action.Execute\", \"title\": \"Update stock\", \"verb\": \"ok\", \"data\": { \"pdtId\": \"${productId}\", \"pdtName\": \"${productName}\", \"categoryId\": \"${categoryId}\" }, \"style\": \"positive\" } ] } Copy below content into stockUpdateSuccess.js export default { \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\", \"type\": \"AdaptiveCard\", \"version\": \"1.4\", \"refresh\": { \"userIds\": [], \"action\": { \"type\": \"Action.Execute\", \"verb\": \"refresh\", \"title\": \"Refresh\", \"data\": { \"pdtId\": \"${productId}\", \"pdtName\": \"${productName}\", \"categoryId\": \"${categoryId}\" } } }, \"body\": [ { \"type\": \"ColumnSet\", \"columns\": [ { \"type\": \"Column\", \"width\": \"stretch\", \"items\": [ { \"type\": \"TextBlock\", \"text\": \"Stock form\", \"horizontalAlignment\": \"right\", \"isSubtle\": true, \"wrap\": true }, { \"type\": \"TextBlock\", \"text\": \"${productName}\", \"horizontalAlignment\": \"right\", \"spacing\": \"none\", \"size\": \"large\", \"color\": \"warning\", \"wrap\": true }, { \"type\": \"TextBlock\", \"text\": \"Use this form to chat with dealer or update the stock details of ${productName} \", \"isSubtle\": true, \"wrap\": true } ] } ] }, { \"type\": \"ColumnSet\", \"columns\": [ { \"type\": \"Column\", \"width\": 2, \"items\": [ { \"type\": \"TextBlock\", \"text\": \"Existing stock\", \"weight\": \"bolder\", \"size\": \"medium\", \"wrap\": true, \"style\": \"heading\" }, { \"type\": \"TextBlock\", \"text\": \"${unitsInStock}\", \"isSubtle\": true, \"spacing\": \"None\" } ] }, { \"type\": \"Column\", \"width\": 1, \"items\": [ { \"type\": \"Image\", \"url\": \"${imageUrl}\", \"size\": \"auto\", \"altText\": \"Image of product in warehouse\" } ] } ] } ] } Create a file bot.js inside the server folder. This is the StockManagerBot for the message extension which will handle the search, display and update functionality of products within the conversation. Notice the event handlers The code contains these event handlers which are invoked by the Bot Framework adapter: handleTeamsMessagingExtensionQuery() - Used in creating a Search-based Message Extension when you query which then returns the Message Extension Response for the query. handleTeamsMessagingExtensionSelectItem() - Used in creating a Search-based Message Extension when select a search query result, which then returns the Message Extension Response for the query. onInvokeActivity() - If the bots receive a message activity, then the turn handler receives a notification of that incoming activity. The turn handler then sends the incoming activity to Team's activity handler onInvokeActivity which routes all Teams invoke activities. To implement our own logic for, you must override this method in your bot. Copy the following content into bot.js file. import { TeamsActivityHandler, CardFactory } from 'botbuilder'; import { getProductByName, updateProductUnitStock } from './northwindDataService.js'; import * as ACData from \"adaptivecards-templating\"; import * as AdaptiveCards from \"adaptivecards\"; import pdtCardPayload from './cards/productCard.js' import successCard from './cards/stockUpdateSuccess.js'; import errorCard from './cards/errorCard.js' export class StockManagerBot extends TeamsActivityHandler { constructor() { super(); // Registers an activity event handler for the message event, emitted for every incoming message activity. this.onMessage(async (context, next) => { console.log('Running on Message Activity.'); await next(); //go to the next handler }); } //When you perform a search from the message extension app async handleTeamsMessagingExtensionQuery(context, query) { const { name, value } = query.parameters[0]; if (name !== 'productName') { return; } const products = await getProductByName(value); const attachments = []; for (const pdt of products) { const heroCard = CardFactory.heroCard(pdt.productName); const preview = CardFactory.heroCard(pdt.productName); preview.content.tap = { type: 'invoke', value: { productName: pdt.productName, productId: pdt.productId, unitsInStock: pdt.unitsInStock, categoryId: pdt.categoryId } }; const attachment = { ...heroCard, preview }; attachments.push(attachment); } var result = { composeExtension: { type: \"result\", attachmentLayout: \"list\", attachments: attachments } }; return result; } //on preview tap of an item from the list of search result items async handleTeamsMessagingExtensionSelectItem(context, pdt) { const preview = CardFactory.thumbnailCard(pdt.productName); var template = new ACData.Template(pdtCardPayload); const imageGenerator = Math.floor((pdt.productId / 1) % 10); const imgUrl = `https://${process.env.HOSTNAME}/images/${imageGenerator}.PNG` var card = template.expand({ $root: { productName: pdt.productName, unitsInStock: pdt.unitsInStock, productId: pdt.productId, categoryId: pdt.categoryId, imageUrl: imgUrl } }); var adaptiveCard = new AdaptiveCards.AdaptiveCard(); adaptiveCard.parse(card); const adaptive = CardFactory.adaptiveCard(card); const attachment = { ...adaptive, preview }; return { composeExtension: { type: 'result', attachmentLayout: 'grid', attachments: [attachment] }, }; } //on every activity async onInvokeActivity(context) { let runEvents = true; try { if (!context.activity.name && context.activity.channelId === 'msteams') { return await this.handleTeamsCardActionInvoke(context); } else { switch (context.activity.name) { case 'composeExtension/query': return this.createInvokeResponse( await this.handleTeamsMessagingExtensionQuery(context, context.activity.value) ); case 'composeExtension/selectItem': return this.createInvokeResponse( await this.handleTeamsMessagingExtensionSelectItem(context, context.activity.value) ); case 'adaptiveCard/action': const request = context.activity.value; if (request) { if (request.action.verb === 'ok') { const data = request.action.data; await updateProductUnitStock(data.pdtId, data.txtStock); var template = new ACData.Template(successCard); const imageGenerator = Math.floor((data.pdtId / 1) % 10); const imgUrl = `https://${process.env.HOSTNAME}/images/${imageGenerator}.PNG` var card = template.expand({ $root: { productName: data.pdtName, unitsInStock: data.txtStock, imageUrl: imgUrl } }); var responseBody = { statusCode: 200, type: \"application/vnd.microsoft.card.adaptive\", value: card } return this.createInvokeResponse(responseBody); } else if (request.action.verb === 'refresh') { //refresh card } else { var responseBody = { statusCode: 200, type: \"application/vnd.microsoft.card.adaptive\", value: errorCard } return this.createInvokeResponse(responseBody); } } default: runEvents = false; return super.onInvokeActivity(context); } } } catch (err) { if (err.message === 'NotImplemented') { return { status: 501 }; } else if (err.message === 'BadRequest') { return { status: 400 }; } throw err; } finally { if (runEvents) { this.defaultNextEvent(context)(); } } } defaultNextEvent = (context) => { const runDialogs = async () => { await this.handle(context, 'Dialog', async () => { // noop }); }; return runDialogs; } createInvokeResponse(body) { return { status: 200, body }; } }","title":"Step 1: Add new files &amp; folders"},{"location":"aad/MessagingExtension/#step-2-update-existing-files","text":"There are files that were updated to add the new features. Let's take files one by one to understand what changes you need to make for this exercise. 1. .env Open the .env file in your working directory and add two new tokens BOT_REG_AAD_APP_ID (Bot id) and BOT_REG_AAD_APP_PASSWORD (client secret) with values copied in Step 2 . The .env file contents will now look like below: COMPANY_NAME=Northwind Traders PORT=3978 TEAMS_APP_ID=c42d89e3-19b2-40a3-b20c-44cc05e6ee26 HOST_NAME=yourhostname.ngrok.io TENANT_ID=c8888ec7-a322-45cf-a170-7ce0bdb538c5 CLIENT_ID=b323630b-b67c-4954-a6e2-7cfa7572bbc6 CLIENT_SECRET=111111.ABCD BOT_REG_AAD_APP_ID=88888888-0d02-43af-85d7-72ba1d66ae1d BOT_REG_AAD_APP_PASSWORD=111111vk 2. manifest/makePackage.js The npm script that builds a manifest file by taking the values from your local development configuration like .env file, need an extra token for the Bot we just created. Let's add that token BOT_REG_AAD_APP_ID (bot id) into the script. Replace code block: if (key.indexOf('TEAMS_APP_ID') === 0 || key.indexOf('HOST_NAME') === 0 || key.indexOf('CLIENT_ID') === 0) { With: if (key.indexOf('TEAMS_APP_ID') === 0 || key.indexOf('HOST_NAME') === 0 || key.indexOf('CLIENT_ID') === 0|| key.indexOf('BOT_REG_AAD_APP_ID') === 0) { 3.manifest/manifest.template.json Add the message extension command information (bolded) in the manifest after showLoadingIndicator property: { \"$schema\": \"https://developer.microsoft.com/en-us/json-schemas/teams/v1.8/MicrosoftTeams.schema.json\", \"manifestVersion\": \"1.8\", \"version\": \"1.6.0\", \"id\": \"<TEAMS_APP_ID>\", \"packageName\": \"io.github.officedev.teamsappcamp1.northwind\", \"developer\": { \"name\": \"Northwind Traders\", \"websiteUrl\": \"https://<HOST_NAME>/\", \"privacyUrl\": \"https://<HOST_NAME>/privacy.html\", \"termsOfUseUrl\": \"https://<HOST_NAME>/termsofuse.html\" }, \"icons\": { \"color\": \"northwind192.png\", \"outline\": \"northwind32.png\" }, \"name\": { \"short\": \"Northwind Orders\", \"full\": \"Northwind Traders Order System\" }, \"description\": { \"short\": \"Sample enterprise app using the Northwind Traders sample database\", \"full\": \"Simple app to demonstrate porting a SaaS app to Microsoft Teams\" }, \"accentColor\": \"#FFFFFF\", \"configurableTabs\": [ { \"configurationUrl\": \"https://<HOST_NAME>/pages/tabConfig.html\", \"canUpdateConfiguration\": true, \"scopes\": [ \"team\", \"groupchat\" ] } ], \"staticTabs\": [ { \"entityId\": \"Orders\", \"name\": \"My Orders\", \"contentUrl\": \"https://<HOST_NAME>/pages/myOrders.html\", \"websiteUrl\": \"https://<HOST_NAME>/pages/myOrders.html\", \"scopes\": [ \"personal\" ] }, { \"entityId\": \"Products\", \"name\": \"Products\", \"contentUrl\": \"https://<HOST_NAME>/pages/categories.html\", \"websiteUrl\": \"https://<HOST_NAME>/pages/categories.html\", \"scopes\": [ \"personal\" ] } ], \"showLoadingIndicator\": false, \"composeExtensions\": [ { \"botId\": \"<BOT_REG_AAD_APP_ID>\", \"canUpdateConfiguration\": true, \"commands\": [ { \"id\": \"productSearch\", \"type\": \"query\", \"title\": \"Find product\", \"description\": \"\", \"initialRun\": false, \"fetchTask\": false, \"context\": [ \"commandBox\", \"compose\" ], \"parameters\": [ { \"name\": \"productName\", \"title\": \"product name\", \"description\": \"Enter the product name\", \"inputType\": \"text\" } ] } ] } ], \"bots\": [ { \"botId\": \"<BOT_REG_AAD_APP_ID>\", \"scopes\": [ \"personal\", \"team\", \"groupchat\" ], \"isNotificationOnly\": false, \"supportsFiles\": false } ], \"permissions\": [ \"identity\", \"messageTeamMembers\" ], \"validDomains\": [ \"<HOST_NAME>\" ], \"webApplicationInfo\": { \"id\": \"<CLIENT_ID>\", \"resource\": \"api://<HOST_NAME>/<CLIENT_ID>\" } } Update the version number so it's greater than it was; for example if your manifest was version 1.4, make it 1.4.1 or 1.5.0. This is required in order for you to update the app in Teams. \"version\": \"1.5.0\" 4.server/identityService.js Add a condition to let validation be performed by Bot Framework Adapter. In the function validateApiRequest() , add an if condition and check if request is from bot then move to next step. if (req.path===\"/messages\") { console.log('Request for bot, validation will be performed by Bot Framework Adapter'); next(); } else { //do the rest } The final form of the function definition will look as below: async function validateApiRequest(req, res, next) { const audience = `api://${process.env.HOSTNAME}/${process.env.CLIENT_ID}`; const token = req.headers['authorization'].split(' ')[1]; if (req.path===\"/messages\") { console.log('Request for bot, validation will be performed by Bot Framework Adapter'); next(); } else { aad.verify(token, { audience: audience }, async (err, result) => { if (result) { console.log(`Validated authentication on /api${req.path}`); next(); } else { console.error(`Invalid authentication on /api${req.path}: ${err.message}`); res.status(401).json({ status: 401, statusText: \"Access denied\" }); } }); } } 5.server/northwindDataService.js Add two new functions as below - getProductByName() - This will search products by name and bring the top 5 results back to the message extension's search results. - updateProductUnitStock() - This will update the value of unit stock based on the input action of a user on the product result card. Add the two new function definitions by appending below code block into the file: export async function getProductByName(productNameStartsWith) { let result = {}; const products = await db.getTable(\"Products\", \"ProductID\"); const match = productNameStartsWith.toLowerCase(); const matchingProducts = products.data.filter((item) => item.ProductName.toLowerCase().startsWith(match)); result = matchingProducts.map(product => ({ productId: product.ProductID, productName: product.ProductName, unitsInStock: product.UnitsInStock, categoryId: product.CategoryID })); return result; } export async function updateProductUnitStock(productId, unitsInStock) { const products = await db.getTable(\"Products\", \"ProductID\"); const product = products.item(productId); product.UnitsInStock = unitsInStock; productCache[productId] = null; // Clear the product cache categoryCache[product.CategoryID]=null;// Clear the category cache for this product await products.save(); // Write the products \"table\" } 6.server/server.js Import the needed modules for bot related code. Import required bot service from botbuilder package and the bot StockManagerBot from the newly added file bot.js import {StockManagerBot} from './bot.js'; import { BotFrameworkAdapter } from 'botbuilder'; Note As a standard , app.listen() should always be at the end of the file, so make sure your code updates happen before this request. A bot adapter authenticates and connects a bot to a service endpoint to send and receive message. So to authenticate, we'll need to pass the bot registration's AAD app id and app secret. Add below code to initialize the bot adapter. const adapter = new BotFrameworkAdapter({ appId: process.env.BOT_REG_AAD_APP_ID, appPassword:process.env.BOT_REG_AAD_APP_PASSWORD }); Create the bot that will handle incoming messages. const stockManagerBot = new StockManagerBot(); For the main dialog add error handling. // Catch-all for errors. const onTurnErrorHandler = async (context, error) => { // This check writes out errors to console log .vs. app insights. // NOTE: In production environment, you should consider logging this to Azure // application insights. console.error(`\\n [onTurnError] unhandled error: ${ error }`); // Send a trace activity, which will be displayed in Bot Framework Emulator await context.sendTraceActivity( 'OnTurnError Trace', `${ error }`, 'https://www.botframework.com/schemas/error', 'TurnError' ); // Send a message to the user await context.sendActivity('The bot encountered an error or bug.'); await context.sendActivity('To continue to run this bot, please fix the bot source code.'); }; // Set the onTurnError for the singleton BotFrameworkAdapter. adapter.onTurnError = onTurnErrorHandler; Listen for incoming requests. app.post('/api/messages', (req, res) => { adapter.processActivity(req, res, async (context) => { await stockManagerBot.run(context); }).catch(error=>{ console.log(error) }); }); The final server/server.js file should look like this (changes from other extended labs notwithstanding). 7. package.json You'll need to install additional packages for adaptive cards and botbuilder. Add below packages into the package.json file by run below script to install new packages: npm i adaptive-expressions adaptivecards adaptivecards-templating botbuilder Check if packages are added into dependencies in the package.json file: \"adaptive-expressions\": \"^4.15.0\", \"adaptivecards\": \"^2.10.0\", \"adaptivecards-templating\": \"^2.2.0\", \"botbuilder\": \"^4.15.0\"","title":"Step 2: Update existing files"},{"location":"aad/MessagingExtension/#exercise-3-test-the-changes","text":"Now that you have applied all code changes, let's test the features.","title":"Exercise 3: Test the changes"},{"location":"aad/MessagingExtension/#step-1-create-new-teams-app-package","text":"Make sure the env file is configured as per the sample file .env_Sample. Make sure all npm packages are installed, run below script in the command line tool npm i Create updated teams app package by running below script: npm run package","title":"Step 1 : Create new teams app package"},{"location":"aad/MessagingExtension/#step-2-start-your-local-project","text":"Now it's time to run your updated application and run it in Microsoft Teams. Start the application by running below command: npm start","title":"Step 2: Start your local project"},{"location":"aad/MessagingExtension/#step-3-upload-the-app-package","text":"In the Teams web or desktop UI, click \"Apps\" in the sidebar 1\ufe0f\u20e3, then \"Manage your apps\" 2\ufe0f\u20e3. At this point you have three choices: Upload a custom app (upload the app for yourself or a specific team or group chat) - this only appears if you have enabled \"Upload custom apps\" in your setup policy; this was a step in the previous lab Upload an app to your org's app catalog (upload the app for use within your organization) - this only appears if you are a tenant administrator Submit an app to your org (initiate a workflow asking a tenant administrator to install your app) - this appears for everyone In this case, choose the first option. Navigate to the Northwind.zip file in your manifest directory and upload it. The Teams client will display the application information, add the application to a team or a group chat.","title":"Step 3: Upload the app package"},{"location":"aad/MessagingExtension/#step-4-run-the-application-in-teams-client","text":"We have added the app into a Group chat for demonstration. Go to the chat where the app is installed. Open the message extension app from the compose area. Search for the product from the message extension (This should be easy if you have used GIPHY before \ud83d\ude09) Select the product you want to add in the conversation. Note A little preview will be shown in the message compose area. Note at the time this lab was created, there is an outstanding platform issue related to the preview. If you are in a Teams team, this will be blank. Hence showing this capability in a group chat. This is the product card, with a form to fill in and submit, incase the unit stock value has to be changed. Fill in a new value in the form, and select Update stock . Once it's success fully updated, the card refreshes to show the new stock value. The stock values are saved into the JSON version of the Northwind database; if you find the product in the Products tab, you'll see the new value. function showCompletionPopup() { let path = window.location.pathname; path = path.endsWith('/') ? path.slice(0, -1) : path; let pathArray = path.split('/'); let leafFolder = pathArray[pathArray.length-1]; let height = window.outerHeight / 1.5; let width = window.outerWidth / 2; window.open(`${window.origin}/app-camp/congrats/${leafFolder}`, 'Congratulations!', `width=${width}, height=${height}, left=100, top=100,`); }","title":"Step 4 : Run the application in Teams client"},{"location":"aad/MessagingExtension/#congratulations","text":"When you have finished this lab, please click this button to let us know! No personal information is collected; we only want to count how many people have completed the labs so we can continue to fund this work!","title":"Congratulations!"},{"location":"aad/MessagingExtension/#next-steps","text":"After completing this lab, you may continue with additional extended labs! Add a Configurable Tab Add a Deep link to a personal Tab Add a Dialog Add a Meeting app Add a Message Extension Selling Your SaaS-based Teams Extension","title":"Next steps"},{"location":"aad/Monetization/","text":"(function(c,l,a,r,i,t,y){ c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)}; t=l.createElement(r);t.async=1;t.src=\"https://www.clarity.ms/tag/\"+i; y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y); })(window, document, \"clarity\", \"script\", \"dfh6fjbr5x\"); Selling Your SaaS-based Teams Extension Important! This lab builds on the completed solution to lab A03-after-apply-styling.md , which is the last of the \"core\" labs. If you haven't done them, you can start here . In this lab, you'll allow users to purchase subscriptions for your Northwind Orders application as a transactable offer in a mock AppSource marketplace. This is similar to the purchase experience for apps listed in the Teams App Store, and it allows you to do this lab without a Partner Center account, which is required to create offers in the real AppSource. Additionally, you will integrate the Northwind Orders application with a simple licensing service that allows you to purchase licenses for your SaaS application. When you're done the Northwind Orders application will require a license to run in Teams, but will not require a license when accessing it directly. The AppSource simulator, as well as a sample license service, can be found in this github repository . The repo includes: An AppSource simulator (web site) A sample license service similar to one you need to provide for your app A web site with a landing page similar to the one you need to provide for your app If you'd like to install these services for yourself, the instructions are here , but we've also hosted these services for you. These instructions assume you're just going to use the hosted services. In any case, be aware that the license service and web site with landing page are only samples and that your app would need to implement something similar! Video briefing Anatomy of a SaaS Application Monetization lab walkthrough Key learning resource For a complete on-demand workshop focused on Commercial Marketplace, complete with hands-on labs and videos, please visit Mastering the Marketplace. Monetized Teams Store Apps are \"SaaS Offers\", so the link will bring you directly into that section of the training. Exercise 1: Update .env In this exercise, you will add information to your environment file about the hosted licensing service. Your .env file on the Northwind Orders application needs to be updated to include values that will allow it to interact with the licensing service. This service is centrally located and you share it with the other lab participants. Go back to your working directory and add the below entries into .env file: # These values are TEMPORARY and may change without notice! SAAS_API=https://BGmonetizationwebapi.azurewebsites.net/api/Subscriptions/CheckOrActivateLicense SAAS_SCOPES=api://dd82efdc-c77f-49c1-9b18-ca3d76a36264/user_impersonation OFFER_ID=contoso_o365_addin Warning THE HOSTED SERVICES ARE TEMPORARY AND LIKELY TO MOVE. Please be aware and check back here for updates. Exercise 2: Northwind Orders calls the licensing service In this exercise, you will update the Northwind Orders app to call the licensing service. Step 1: Add server side code to validate the user has a license In your working folder, create a new file /server/validateLicenseService.js Paste in the following code (or copy the file from here ). This code verifies the user has a license to use the Northwind Orders application. The license will only be checked when the application is being used via Teams. import aad from 'azure-ad-jwt'; import fetch from 'node-fetch'; export async function validateLicense(thisAppAccessToken) { const audience = `api://${process.env.HOSTNAME}/${process.env.CLIENT_ID}`; return new Promise((resolve, reject) => { aad.verify(thisAppAccessToken, { audience: audience }, async (err, result) => { if (result) { const licensingAppUrl = `${process.env.SAAS_API}/${process.env.OFFER_ID}` const licensingAppAccessToken = await getOboAccessToken(thisAppAccessToken); if (licensingAppAccessToken === \"interaction_required\") { reject({ \"status\":401, \"message\": \"Interaction required\"}); } const licensingResponse = await fetch(licensingAppUrl, { method: \"POST\", headers: { \"Accept\": \"application/json\", \"Content-Type\": \"application/json\", \"Authorization\" :`Bearer ${licensingAppAccessToken}` } }); if (licensingResponse.ok) { const licensingData = await licensingResponse.json(); console.log(licensingData.reason); resolve(licensingData); } else { reject({ \"status\": licensingResponse.status, \"message\": licensingResponse.statusText }); } } else { reject({ \"status\": 401, \"message\": \"Invalid client access token in northwindLicenseService.js\"}); } }); }); } // TODO: Securely cache the results of this function for the lifetime of the resulting token async function getOboAccessToken(clientSideToken) { const tenantId = process.env.TENANT_ID; const clientId = process.env.CLIENT_ID; const clientSecret = process.env.CLIENT_SECRET; const scopes = process.env.SAAS_SCOPES; // Use On Behalf Of flow to exchange the client-side token for an // access token with the needed permissions const INTERACTION_REQUIRED_STATUS_TEXT = \"interaction_required\"; const url = \"https://login.microsoftonline.com/\" + tenantId + \"/oauth2/v2.0/token\"; const params = { client_id: clientId, client_secret: clientSecret, grant_type: \"urn:ietf:params:oauth:grant-type:jwt-bearer\", assertion: clientSideToken, requested_token_use: \"on_behalf_of\", scope: scopes }; const accessTokenQueryParams = new URLSearchParams(params).toString(); try { const oboResponse = await fetch(url, { method: \"POST\", body: accessTokenQueryParams, headers: { Accept: \"application/json\", \"Content-Type\": \"application/x-www-form-urlencoded\" } }); const oboData = await oboResponse.json(); if (oboResponse.status !== 200) { // We got an error on the OBO request. Check if it is consent required. if (oboData.error.toLowerCase() === 'invalid_grant' || oboData.error.toLowerCase() === 'interaction_required') { throw (INTERACTION_REQUIRED_STATUS_TEXT); } else { console.log(`Error returned in OBO: ${JSON.stringify(oboData)}`); throw (`Error in OBO exchange ${oboResponse.status}: ${oboResponse.statusText}`); } } return oboData.access_token; } catch (error) { return error; } } Step 2: Add a server side API to validate the user's license Now that you have server-side code that checks the user has a license, you need to add code that validates the that license. You'll add a POST request to the the Northwind Orders application that calls the licensing service API. In your working folder, locate the file server/server.js and open it in your code editor. Add these lines to the top of the file. import aad from 'azure-ad-jwt'; import { validateLicense } from './validateLicenseService.js'; Immediately below the call to await initializeIdentityService() , add the following code. // Web service validates a user's license app.post('/api/validateLicense', async (req, res) => { try { const token = req.headers['authorization'].split(' ')[1]; try { let hasLicense = await validateLicense(token); res.send(JSON.stringify({ \"validLicense\" : hasLicense })); } catch (error) { console.log (`Error ${error.status} in validateLicense(): ${error.message}`); res.status(error.status).send(error.message); } } catch (error) { console.log(`Error in /api/validateAadLogin handling: ${error}`); res.status(500).json({ status: 500, statusText: error }); } }); Step 3: Add client pages to display a license error The app needs to be able to show if there is a licensing error. This step adds that code to the client. Add a new file, client/pages/needLicense.html . Paste in the following HTML (or copy the file from here ). <!doctype html> <html> <head> <meta charset=\"UTF-8\" /> <title>Northwind Privacy</title> <link rel=\"icon\" href=\"data:;base64,=\"> <!-- Suppress favicon error --> <link rel=\"stylesheet\" href=\"/northwind.css\" /> </head> <body class=\"ms-Fabric\" dir=\"ltr\"> <h1>Sorry you need a valid license to use this application</h1> <p>Please purchase a license from the Microsoft Teams store. </p> <div id=\"errorMsg\"></div> <script type=\"module\" src=\"needLicense.js\"></script> </body> </html> The HTML page needs some JavaScript to work properly. Create a file /client/pages/needLicense.js . Paste in the following code (or copy the file from here ). const searchParams = new URLSearchParams(window.location.search); if (searchParams.has('error')) { const error = searchParams.get('error'); const displayElementError = document.getElementById('errorMsg'); displayElementError.innerHTML = error; } Step 4: Check if the user has a license In this step, you will add client side function to check if the user has a license. Add a new file, client/modules/northwindLicensing.js . Paste in the following code (or copy the file from here ). This code calls the server-side API we just added using an Azure AD token obtained using Microsoft Teams SSO. import 'https://res.cdn.office.net/teams-js/2.0.0/js/MicrosoftTeams.min.js'; import { ensureTeamsSdkInitialized } from './teamsHelpers.js'; export async function hasValidLicense() { await new Promise((resolve, reject) => { microsoftTeams.initialize(() => { resolve(); }); }); await ensureTeamsSdkInitialized(); const authToken = await microsoftTeams.authentication.getAuthToken(); const response = await fetch(`/api/validateLicense`, { \"method\": \"post\", \"headers\": { \"content-type\": \"application/json\", \"authorization\": `Bearer ${authToken}` }, \"cache\": \"no-cache\" }); if (response.ok) { const data = await response.json(); return data.validLicense; } else { const error = await response.json(); console.log(`ERROR: ${error}`); } } Step 5: Call the license API In this step, you'll add client side code that checks the user's license on every request. Open the file client/identity/userPanel.js in your code editor. This is a web component that displays the user's picture and name on every page, so it's an easy place to check the license. Add these imports at the top of the file. import { hasValidLicense } from '../modules/northwindLicensing.js'; import { inTeams } from '../modules/teamsHelpers.js'; Add the following code at the top of the else clause within the connectedCallback() function. if (await inTeams()) { const validLicense = await hasValidLicense(); if (validLicense.status && validLicense.status.toString().toLowerCase()===\"failure\") { window.location.href =`/pages/needLicense.html?error=${validLicense.reason}`; } } The completed userPanel.js should look like the following code. import { getLoggedInEmployee, logoff } from './identityClient.js'; import { inTeams } from '../modules/teamsHelpers.js'; import { hasValidLicense } from '../modules/northwindLicensing.js'; class northwindUserPanel extends HTMLElement { async connectedCallback() { const employee = await getLoggedInEmployee(); if (!employee) { logoff(); } else { if (await inTeams()) { const validLicense = await hasValidLicense(); if (validLicense.status && validLicense.status.toString().toLowerCase()===\"failure\") { window.location.href =`/pages/needLicense.html?error=${validLicense.reason}`; } } this.innerHTML = `<div class=\"userPanel\"> <img src=\"data:image/bmp;base64,${employee.photo}\"></img> <p>${employee.displayName}</p> <p>${employee.jobTitle}</p> <hr /> <button id=\"logout\">Log out</button> </div> `; const logoutButton = document.getElementById('logout'); logoutButton.addEventListener('click', async ev => { logoff(); }); } } } // Define the web component and insert an instance at the top of the page customElements.define('northwind-user-panel', northwindUserPanel); const panel = document.createElement('northwind-user-panel'); document.body.insertBefore(panel, document.body.firstChild); Note There are many ways to make the license check more robust, such as checking it on every web service call and caching this on the server side to avoid excessive calls to the licensing server. However this is just a lab so we wanted to keep it simple. Exercise 3: Grant consent to the licensing API In this exercise you will grant consent to the licensing API to be called from an application running in your tenant. Without this step, you server-side API call to the licensing service would fail. Step 1: Add the API to APIs that your organization uses Here you will construct and call a URL that grants tenant-wide admin consent. The form this URL will take is as follows, where tenant-id is your tenant and client-id is the ID of the licensing API being called by the server code. https://login.microsoftonline.com/{tenant-id}/adminconsent?client_id={client-id} Open your .env file. All the information you need to construct the URL is in this file. In a separate file, paste the URL as shown above. Replace {tenant-id} with the TENANT_ID value from the .env file. In the SAAS_SCOPES section is the scope of the licensing service API. Copy the GUID from this scope and use it to replace {client-id} in the URL you are constructing. The result should look something like this. https://login.microsoftonline.com/1661a74b-21d8-4cc9-9e09-e258e0a18291/adminconsent?client_id=dd82efdc-c77f-49c1-9b18-ca3d76a36264 Now make your tenant aware of the licensing API by going to this URL in a browser. Paste the URL into a browser and hit enter . You will be redirected to a page that looks for localhost and throws an error. Don't worry, this is expected behavior. You can close this browser window. Open your browser to your Azure portal using your M365 credentials used for this class. Click on Azure Active Directory > App registrations . Click the Northwind Orders app registration. Click API permissions . You are going to add a permission to this app registration allowing the Northwind Orders application to communicate with the licensing service API. Click Add a permission . At the top of the flyout, click APIs my organization uses . Because you granted cross tenant access above, the Contoso Web API will be in the list of APIs. Type Contoso Monetization Code Sample Web API . Select the API. Ensure the user_impersonation permission is selected. Click Add a permission . Click Grant admin consent for (tenant name)\" to the right of the Add a Permission button, and click the Yes button to confirm. Now the Northwind Orders app registration allows the Northwind Orders application to call the licensing service API. Exercise 4: Run the application Now that all the pieces are in place, it's time to run the application you've set up. Step 1: Run Teams without a license In this initial step, you'll run the application without a user license to see how the application behaves. Ensure your NW Trader Orders application is running with the new code you just added. Restart if it is currently running. Return to your application in Microsoft Teams. Refresh the tab or browser if necessary. The UI will begin to render, and then it will detect the license failure and display an error page. Note The sample application checks the license in JavaScript, which is convenient for this lab but it would be easy for someone to bypass the license check. In a real application you'd probably check the license on all accesses to your application web site. Step 2: Purchase a subscription and set licensing policy In a real-world situation, your SaaS offer is listed in the Teams Store and the Microsoft AppSource marketplace . Users can purchase your app in either location. For this lab you will use an AppSource simulator to mock your interactions with the actual marketplace. Just know that Teams users can purchase apps directly from the user interface when they're listed in the Teams app store. Note For your convenience, app service simulator is temporarily hosted at https://bgmonetizationappsource.azurewebsites.net/. If you'd prefer to host it yourself, the instructions are here . Browse to mock AppSource URL. This should display the AppSource simulator. Click the Purchase button to purchase a subscription to the Northwind Orders application. Note Notice that the AppSource simulator's background color is green to make it easy to distinguish from your app's landing page, which has a blue background. Note The AppSource simulator has a mock offer name, \"Contoso Apps\", rather than showing the \"Northwind Orders\" app. This is just a constant defined in the monetization project's SaasOfferMockData/Offers.cs file. The real AppSource web page shows the application name and other information you would configure in Partner Center. The AppSource simulator displays the plans available for the offer. The simulator has two hard-coded plans, \"SeatBasedPlan\" (which uses a per-user pricing model ), and a \"SiteBasedPlan\" (which uses a flat-rate pricing model ). The real AppSource would show the plans you had defined in Partner Center, the publisher's portal for defining and publishing AppSource offers. Microsoft Teams currently supports only the per-user pricing model Select the \"SeatBasedPlan\" and click the Purchase button. Because this is a simulator, your credit card will not be charged. The simulated purchase is now complete, so you will be redirected to the app's landing page. Warning For your convenience, the web site containing the landing page is temporarily hosted at https://bgmonetizationwebapp.azurewebsites.net/. If you'd prefer to install the services on Azure and host it yourself, the instructions are here . The landing page gives the app a chance to interact with the user and capture any configuration information it needs. Users who purchase the app in the Teams store would be brought to this same page. You will need to supply a page like this as part of your application; it interprets a token sent by AppSource and logs the user in with AAD SSO. This token is then sent to the SaaS Fulfillment API v2 , which provides the details of the customer's subscription. The sample app's landing page allows the user to select a region; the app stores this information in its own database. Notice the background color of these pages is blue; the blue pages are for your application to implement and are only a sample we've hosted based on this sample . Note Notice that the Landing Page and licensing pages' background color is blue to make it easy to distinguish from the App Source Simulator, which has a green background. Warning Even though this lab didn't walk you through creating the landing page and other licnsing pages (the blue ones) - you as an application developer need to provide these. Many SaaS services may already have a licensing service and want to extend it to work with the Microsoft Commercial Marketplace. We're working on more options to make this easier, both for ISV's with existing licensing services and those who need a new one. Once the region is selected, the sample app shows a welcome page with the user's name, which is obtained by reading the user's profile with the Microsoft Graph API . Click License Settings to view the license assignment screen. On this screen you can add individual user licenses using the Add User button, or you can set a policy that allows users to claim licenses on a first come, first served basis. Turn on the First come first served switch to enable this option. Warning Everything on this screen is defined by the your SaaS application. It's intended to be flexible since publishers have a wide range of licensing approaches. Apps can tell who's logging in via Azure AD and use the user ID and tenant ID to authorize access, provide personalization, etc. Step 3: Run the application in Teams Now that you've purchased a subscription, you can see the Northwind Orders application in Teams. Return to Microsoft Teams and refresh your application. The license will be approved and the user can interact with the application normally. Return to the licensing application. If you've closed the tab, you can find it at the mock AppSource URL you received earlier. Notice that your username has been assigned a license. The sample app stored this in a SQL Server database. When the Teams application called the licensing service, the access token contained the tenant ID and user ID, enabling the licensing service to determine that the user has a license. Exercise 5: Inspect the licensing code In this exercise, you'll inspect key areas of the sample licensing service used in this lab. In an actual application, you would write your own licensing service or extend your existing licensing service to integrate it with your SaaS offer on AppSource. Step 1: Resolving the Marketplace Token When a user completes the process of purchasing your application in AppSource or the Microsoft Teams app store, they are directed to the app's landing page . This URL is for a web page provided by the software vendor and registered in Partner Center. In this lab, the landing page is part of the SaaSSampleWebApp sample. Microsoft sends a marketplace token to the landing page; eventually this is resolved in the sample app's Subscription service . [Route(\"resolve\")] [HttpPost] public async Task<IActionResult> ResolveAsync([FromForm] string AuthCode) { using var requestMessage = new HttpRequestMessage(HttpMethod.Post, $\"{_configuration[\"SaaSfulfillmentAPIs:ApiEndPoint\"]}/api/saas/subscriptions/resolve?api-version={_configuration[\"SaaSfulfillmentAPIs:ApiVersion\"]}\"); // the token is not required for Mock APIs // requestMessage.Headers.Authorization = new AuthenticationHeaderValue(\"Bearer\", your_token); requestMessage.Headers.Add(\"x-ms-marketplace-token\", AuthCode); var httpClient = _httpClientFactory.CreateClient(); using (var response = await httpClient.SendAsync(requestMessage).ConfigureAwait(false)) { if (response.StatusCode == HttpStatusCode.OK) { var content = await response.Content.ReadAsStringAsync().ConfigureAwait(false); var resolvedSubscription = JsonConvert.DeserializeObject<ResolvedSubscription>(content); var subscription = new Subscription { Id = resolvedSubscription.Id, OfferId = resolvedSubscription.OfferId, PlanId = resolvedSubscription.PlanId, SubscriptionName = resolvedSubscription.SubscriptionName, Purchaser = HttpContext.User.Identity.Name, PurchaserId = Guid.Parse(HttpContext.User.GetObjectId()), TenantId = Guid.Parse(HttpContext.User.GetTenantId()), PurchaseSeatsCount = resolvedSubscription.Quantity, AllowOverAssignment = false, FirstComeFirstServedAssignment = false }; return Ok(subscription); } return BadRequest(response.ReasonPhrase); } } The sample calls the AppSource simulator to get information about the subscription that was purchased. In your service, you would call this Marketplace API to do this exchange. Step 2: Examine web hooks In addition to a landing page, your application will need to provide a set of web hooks that Microsoft can call to let you know about subscription changes. The sample app doesn't implement all the webhooks, but does implement a subset that are supported by the AppSource simulator. The WebHookController responds to these events: ChangePlan - called when a user changes their offer plan, such as moving from a Silver to a Gold plan. Plans are defined by the software using Partner Center. ChangeQuantity - called when a user changes the quantity of seats in a per-seat SaaS offer Unsubscribe - called when a user cancels their subscription The full list of webhooks events is documented here . Step 3: Examine the license check In Exercise 2 you added code to check if the user has a license . This call is handled here, in the CheckOrAdtivateLicense method in the Subscriptions controller. Notice that this code includes some business logic and accesses a license database in Azure SQL using Entity Framework. The point of this is that the application is managing licenses in its own way and keeping track of them in its own database. Microsoft Commercial Marketplace manages subscriptions which grant licenses, but each application can manage those licenses however it wants to. This allows applications flexibility in how they implement licensing. function showCompletionPopup() { let path = window.location.pathname; path = path.endsWith('/') ? path.slice(0, -1) : path; let pathArray = path.split('/'); let leafFolder = pathArray[pathArray.length-1]; let height = window.outerHeight / 1.5; let width = window.outerWidth / 2; window.open(`${window.origin}/app-camp/congrats/${leafFolder}`, 'Congratulations!', `width=${width}, height=${height}, left=100, top=100,`); } Congratulations! When you have finished this lab, please click this button to let us know! No personal information is collected; we only want to count how many people have completed the labs so we can continue to fund this work! Known issues For the latest issues, or to file a bug report, see the github issues list for this repository. Next steps After completing this lab, you may continue with additional extended labs! Add a Configurable Tab Add a Deep link to a personal Tab Add a Dialog Add a Meeting app Add a Message Extension Selling Your SaaS-based Teams Extension","title":"Selling Your SaaS-based Teams Extension"},{"location":"aad/Monetization/#selling-your-saas-based-teams-extension","text":"Important! This lab builds on the completed solution to lab A03-after-apply-styling.md , which is the last of the \"core\" labs. If you haven't done them, you can start here . In this lab, you'll allow users to purchase subscriptions for your Northwind Orders application as a transactable offer in a mock AppSource marketplace. This is similar to the purchase experience for apps listed in the Teams App Store, and it allows you to do this lab without a Partner Center account, which is required to create offers in the real AppSource. Additionally, you will integrate the Northwind Orders application with a simple licensing service that allows you to purchase licenses for your SaaS application. When you're done the Northwind Orders application will require a license to run in Teams, but will not require a license when accessing it directly. The AppSource simulator, as well as a sample license service, can be found in this github repository . The repo includes: An AppSource simulator (web site) A sample license service similar to one you need to provide for your app A web site with a landing page similar to the one you need to provide for your app If you'd like to install these services for yourself, the instructions are here , but we've also hosted these services for you. These instructions assume you're just going to use the hosted services. In any case, be aware that the license service and web site with landing page are only samples and that your app would need to implement something similar! Video briefing Anatomy of a SaaS Application Monetization lab walkthrough Key learning resource For a complete on-demand workshop focused on Commercial Marketplace, complete with hands-on labs and videos, please visit Mastering the Marketplace. Monetized Teams Store Apps are \"SaaS Offers\", so the link will bring you directly into that section of the training.","title":"Selling Your SaaS-based Teams Extension"},{"location":"aad/Monetization/#exercise-1-update-env","text":"In this exercise, you will add information to your environment file about the hosted licensing service. Your .env file on the Northwind Orders application needs to be updated to include values that will allow it to interact with the licensing service. This service is centrally located and you share it with the other lab participants. Go back to your working directory and add the below entries into .env file: # These values are TEMPORARY and may change without notice! SAAS_API=https://BGmonetizationwebapi.azurewebsites.net/api/Subscriptions/CheckOrActivateLicense SAAS_SCOPES=api://dd82efdc-c77f-49c1-9b18-ca3d76a36264/user_impersonation OFFER_ID=contoso_o365_addin Warning THE HOSTED SERVICES ARE TEMPORARY AND LIKELY TO MOVE. Please be aware and check back here for updates.","title":"Exercise 1: Update .env"},{"location":"aad/Monetization/#exercise-2-northwind-orders-calls-the-licensing-service","text":"In this exercise, you will update the Northwind Orders app to call the licensing service.","title":"Exercise 2: Northwind Orders calls the licensing service"},{"location":"aad/Monetization/#step-1-add-server-side-code-to-validate-the-user-has-a-license","text":"In your working folder, create a new file /server/validateLicenseService.js Paste in the following code (or copy the file from here ). This code verifies the user has a license to use the Northwind Orders application. The license will only be checked when the application is being used via Teams. import aad from 'azure-ad-jwt'; import fetch from 'node-fetch'; export async function validateLicense(thisAppAccessToken) { const audience = `api://${process.env.HOSTNAME}/${process.env.CLIENT_ID}`; return new Promise((resolve, reject) => { aad.verify(thisAppAccessToken, { audience: audience }, async (err, result) => { if (result) { const licensingAppUrl = `${process.env.SAAS_API}/${process.env.OFFER_ID}` const licensingAppAccessToken = await getOboAccessToken(thisAppAccessToken); if (licensingAppAccessToken === \"interaction_required\") { reject({ \"status\":401, \"message\": \"Interaction required\"}); } const licensingResponse = await fetch(licensingAppUrl, { method: \"POST\", headers: { \"Accept\": \"application/json\", \"Content-Type\": \"application/json\", \"Authorization\" :`Bearer ${licensingAppAccessToken}` } }); if (licensingResponse.ok) { const licensingData = await licensingResponse.json(); console.log(licensingData.reason); resolve(licensingData); } else { reject({ \"status\": licensingResponse.status, \"message\": licensingResponse.statusText }); } } else { reject({ \"status\": 401, \"message\": \"Invalid client access token in northwindLicenseService.js\"}); } }); }); } // TODO: Securely cache the results of this function for the lifetime of the resulting token async function getOboAccessToken(clientSideToken) { const tenantId = process.env.TENANT_ID; const clientId = process.env.CLIENT_ID; const clientSecret = process.env.CLIENT_SECRET; const scopes = process.env.SAAS_SCOPES; // Use On Behalf Of flow to exchange the client-side token for an // access token with the needed permissions const INTERACTION_REQUIRED_STATUS_TEXT = \"interaction_required\"; const url = \"https://login.microsoftonline.com/\" + tenantId + \"/oauth2/v2.0/token\"; const params = { client_id: clientId, client_secret: clientSecret, grant_type: \"urn:ietf:params:oauth:grant-type:jwt-bearer\", assertion: clientSideToken, requested_token_use: \"on_behalf_of\", scope: scopes }; const accessTokenQueryParams = new URLSearchParams(params).toString(); try { const oboResponse = await fetch(url, { method: \"POST\", body: accessTokenQueryParams, headers: { Accept: \"application/json\", \"Content-Type\": \"application/x-www-form-urlencoded\" } }); const oboData = await oboResponse.json(); if (oboResponse.status !== 200) { // We got an error on the OBO request. Check if it is consent required. if (oboData.error.toLowerCase() === 'invalid_grant' || oboData.error.toLowerCase() === 'interaction_required') { throw (INTERACTION_REQUIRED_STATUS_TEXT); } else { console.log(`Error returned in OBO: ${JSON.stringify(oboData)}`); throw (`Error in OBO exchange ${oboResponse.status}: ${oboResponse.statusText}`); } } return oboData.access_token; } catch (error) { return error; } }","title":"Step 1: Add server side code to validate the user has a license"},{"location":"aad/Monetization/#step-2-add-a-server-side-api-to-validate-the-users-license","text":"Now that you have server-side code that checks the user has a license, you need to add code that validates the that license. You'll add a POST request to the the Northwind Orders application that calls the licensing service API. In your working folder, locate the file server/server.js and open it in your code editor. Add these lines to the top of the file. import aad from 'azure-ad-jwt'; import { validateLicense } from './validateLicenseService.js'; Immediately below the call to await initializeIdentityService() , add the following code. // Web service validates a user's license app.post('/api/validateLicense', async (req, res) => { try { const token = req.headers['authorization'].split(' ')[1]; try { let hasLicense = await validateLicense(token); res.send(JSON.stringify({ \"validLicense\" : hasLicense })); } catch (error) { console.log (`Error ${error.status} in validateLicense(): ${error.message}`); res.status(error.status).send(error.message); } } catch (error) { console.log(`Error in /api/validateAadLogin handling: ${error}`); res.status(500).json({ status: 500, statusText: error }); } });","title":"Step 2: Add a server side API to validate the user's license"},{"location":"aad/Monetization/#step-3-add-client-pages-to-display-a-license-error","text":"The app needs to be able to show if there is a licensing error. This step adds that code to the client. Add a new file, client/pages/needLicense.html . Paste in the following HTML (or copy the file from here ). <!doctype html> <html> <head> <meta charset=\"UTF-8\" /> <title>Northwind Privacy</title> <link rel=\"icon\" href=\"data:;base64,=\"> <!-- Suppress favicon error --> <link rel=\"stylesheet\" href=\"/northwind.css\" /> </head> <body class=\"ms-Fabric\" dir=\"ltr\"> <h1>Sorry you need a valid license to use this application</h1> <p>Please purchase a license from the Microsoft Teams store. </p> <div id=\"errorMsg\"></div> <script type=\"module\" src=\"needLicense.js\"></script> </body> </html> The HTML page needs some JavaScript to work properly. Create a file /client/pages/needLicense.js . Paste in the following code (or copy the file from here ). const searchParams = new URLSearchParams(window.location.search); if (searchParams.has('error')) { const error = searchParams.get('error'); const displayElementError = document.getElementById('errorMsg'); displayElementError.innerHTML = error; }","title":"Step 3: Add client pages to display a license error"},{"location":"aad/Monetization/#step-4-check-if-the-user-has-a-license","text":"In this step, you will add client side function to check if the user has a license. Add a new file, client/modules/northwindLicensing.js . Paste in the following code (or copy the file from here ). This code calls the server-side API we just added using an Azure AD token obtained using Microsoft Teams SSO. import 'https://res.cdn.office.net/teams-js/2.0.0/js/MicrosoftTeams.min.js'; import { ensureTeamsSdkInitialized } from './teamsHelpers.js'; export async function hasValidLicense() { await new Promise((resolve, reject) => { microsoftTeams.initialize(() => { resolve(); }); }); await ensureTeamsSdkInitialized(); const authToken = await microsoftTeams.authentication.getAuthToken(); const response = await fetch(`/api/validateLicense`, { \"method\": \"post\", \"headers\": { \"content-type\": \"application/json\", \"authorization\": `Bearer ${authToken}` }, \"cache\": \"no-cache\" }); if (response.ok) { const data = await response.json(); return data.validLicense; } else { const error = await response.json(); console.log(`ERROR: ${error}`); } }","title":"Step 4: Check if the user has a license"},{"location":"aad/Monetization/#step-5-call-the-license-api","text":"In this step, you'll add client side code that checks the user's license on every request. Open the file client/identity/userPanel.js in your code editor. This is a web component that displays the user's picture and name on every page, so it's an easy place to check the license. Add these imports at the top of the file. import { hasValidLicense } from '../modules/northwindLicensing.js'; import { inTeams } from '../modules/teamsHelpers.js'; Add the following code at the top of the else clause within the connectedCallback() function. if (await inTeams()) { const validLicense = await hasValidLicense(); if (validLicense.status && validLicense.status.toString().toLowerCase()===\"failure\") { window.location.href =`/pages/needLicense.html?error=${validLicense.reason}`; } } The completed userPanel.js should look like the following code. import { getLoggedInEmployee, logoff } from './identityClient.js'; import { inTeams } from '../modules/teamsHelpers.js'; import { hasValidLicense } from '../modules/northwindLicensing.js'; class northwindUserPanel extends HTMLElement { async connectedCallback() { const employee = await getLoggedInEmployee(); if (!employee) { logoff(); } else { if (await inTeams()) { const validLicense = await hasValidLicense(); if (validLicense.status && validLicense.status.toString().toLowerCase()===\"failure\") { window.location.href =`/pages/needLicense.html?error=${validLicense.reason}`; } } this.innerHTML = `<div class=\"userPanel\"> <img src=\"data:image/bmp;base64,${employee.photo}\"></img> <p>${employee.displayName}</p> <p>${employee.jobTitle}</p> <hr /> <button id=\"logout\">Log out</button> </div> `; const logoutButton = document.getElementById('logout'); logoutButton.addEventListener('click', async ev => { logoff(); }); } } } // Define the web component and insert an instance at the top of the page customElements.define('northwind-user-panel', northwindUserPanel); const panel = document.createElement('northwind-user-panel'); document.body.insertBefore(panel, document.body.firstChild); Note There are many ways to make the license check more robust, such as checking it on every web service call and caching this on the server side to avoid excessive calls to the licensing server. However this is just a lab so we wanted to keep it simple.","title":"Step 5: Call the license API"},{"location":"aad/Monetization/#exercise-3-grant-consent-to-the-licensing-api","text":"In this exercise you will grant consent to the licensing API to be called from an application running in your tenant. Without this step, you server-side API call to the licensing service would fail.","title":"Exercise 3: Grant consent to the licensing API"},{"location":"aad/Monetization/#step-1-add-the-api-to-apis-that-your-organization-uses","text":"Here you will construct and call a URL that grants tenant-wide admin consent. The form this URL will take is as follows, where tenant-id is your tenant and client-id is the ID of the licensing API being called by the server code. https://login.microsoftonline.com/{tenant-id}/adminconsent?client_id={client-id} Open your .env file. All the information you need to construct the URL is in this file. In a separate file, paste the URL as shown above. Replace {tenant-id} with the TENANT_ID value from the .env file. In the SAAS_SCOPES section is the scope of the licensing service API. Copy the GUID from this scope and use it to replace {client-id} in the URL you are constructing. The result should look something like this. https://login.microsoftonline.com/1661a74b-21d8-4cc9-9e09-e258e0a18291/adminconsent?client_id=dd82efdc-c77f-49c1-9b18-ca3d76a36264 Now make your tenant aware of the licensing API by going to this URL in a browser. Paste the URL into a browser and hit enter . You will be redirected to a page that looks for localhost and throws an error. Don't worry, this is expected behavior. You can close this browser window. Open your browser to your Azure portal using your M365 credentials used for this class. Click on Azure Active Directory > App registrations . Click the Northwind Orders app registration. Click API permissions . You are going to add a permission to this app registration allowing the Northwind Orders application to communicate with the licensing service API. Click Add a permission . At the top of the flyout, click APIs my organization uses . Because you granted cross tenant access above, the Contoso Web API will be in the list of APIs. Type Contoso Monetization Code Sample Web API . Select the API. Ensure the user_impersonation permission is selected. Click Add a permission . Click Grant admin consent for (tenant name)\" to the right of the Add a Permission button, and click the Yes button to confirm. Now the Northwind Orders app registration allows the Northwind Orders application to call the licensing service API.","title":"Step 1: Add the API to APIs that your organization uses"},{"location":"aad/Monetization/#exercise-4-run-the-application","text":"Now that all the pieces are in place, it's time to run the application you've set up.","title":"Exercise 4: Run the application"},{"location":"aad/Monetization/#step-1-run-teams-without-a-license","text":"In this initial step, you'll run the application without a user license to see how the application behaves. Ensure your NW Trader Orders application is running with the new code you just added. Restart if it is currently running. Return to your application in Microsoft Teams. Refresh the tab or browser if necessary. The UI will begin to render, and then it will detect the license failure and display an error page. Note The sample application checks the license in JavaScript, which is convenient for this lab but it would be easy for someone to bypass the license check. In a real application you'd probably check the license on all accesses to your application web site.","title":"Step 1: Run Teams without a license"},{"location":"aad/Monetization/#step-2-purchase-a-subscription-and-set-licensing-policy","text":"In a real-world situation, your SaaS offer is listed in the Teams Store and the Microsoft AppSource marketplace . Users can purchase your app in either location. For this lab you will use an AppSource simulator to mock your interactions with the actual marketplace. Just know that Teams users can purchase apps directly from the user interface when they're listed in the Teams app store. Note For your convenience, app service simulator is temporarily hosted at https://bgmonetizationappsource.azurewebsites.net/. If you'd prefer to host it yourself, the instructions are here . Browse to mock AppSource URL. This should display the AppSource simulator. Click the Purchase button to purchase a subscription to the Northwind Orders application. Note Notice that the AppSource simulator's background color is green to make it easy to distinguish from your app's landing page, which has a blue background. Note The AppSource simulator has a mock offer name, \"Contoso Apps\", rather than showing the \"Northwind Orders\" app. This is just a constant defined in the monetization project's SaasOfferMockData/Offers.cs file. The real AppSource web page shows the application name and other information you would configure in Partner Center. The AppSource simulator displays the plans available for the offer. The simulator has two hard-coded plans, \"SeatBasedPlan\" (which uses a per-user pricing model ), and a \"SiteBasedPlan\" (which uses a flat-rate pricing model ). The real AppSource would show the plans you had defined in Partner Center, the publisher's portal for defining and publishing AppSource offers. Microsoft Teams currently supports only the per-user pricing model Select the \"SeatBasedPlan\" and click the Purchase button. Because this is a simulator, your credit card will not be charged. The simulated purchase is now complete, so you will be redirected to the app's landing page. Warning For your convenience, the web site containing the landing page is temporarily hosted at https://bgmonetizationwebapp.azurewebsites.net/. If you'd prefer to install the services on Azure and host it yourself, the instructions are here . The landing page gives the app a chance to interact with the user and capture any configuration information it needs. Users who purchase the app in the Teams store would be brought to this same page. You will need to supply a page like this as part of your application; it interprets a token sent by AppSource and logs the user in with AAD SSO. This token is then sent to the SaaS Fulfillment API v2 , which provides the details of the customer's subscription. The sample app's landing page allows the user to select a region; the app stores this information in its own database. Notice the background color of these pages is blue; the blue pages are for your application to implement and are only a sample we've hosted based on this sample . Note Notice that the Landing Page and licensing pages' background color is blue to make it easy to distinguish from the App Source Simulator, which has a green background. Warning Even though this lab didn't walk you through creating the landing page and other licnsing pages (the blue ones) - you as an application developer need to provide these. Many SaaS services may already have a licensing service and want to extend it to work with the Microsoft Commercial Marketplace. We're working on more options to make this easier, both for ISV's with existing licensing services and those who need a new one. Once the region is selected, the sample app shows a welcome page with the user's name, which is obtained by reading the user's profile with the Microsoft Graph API . Click License Settings to view the license assignment screen. On this screen you can add individual user licenses using the Add User button, or you can set a policy that allows users to claim licenses on a first come, first served basis. Turn on the First come first served switch to enable this option. Warning Everything on this screen is defined by the your SaaS application. It's intended to be flexible since publishers have a wide range of licensing approaches. Apps can tell who's logging in via Azure AD and use the user ID and tenant ID to authorize access, provide personalization, etc.","title":"Step 2: Purchase a subscription and set licensing policy"},{"location":"aad/Monetization/#step-3-run-the-application-in-teams","text":"Now that you've purchased a subscription, you can see the Northwind Orders application in Teams. Return to Microsoft Teams and refresh your application. The license will be approved and the user can interact with the application normally. Return to the licensing application. If you've closed the tab, you can find it at the mock AppSource URL you received earlier. Notice that your username has been assigned a license. The sample app stored this in a SQL Server database. When the Teams application called the licensing service, the access token contained the tenant ID and user ID, enabling the licensing service to determine that the user has a license.","title":"Step 3: Run the application in Teams"},{"location":"aad/Monetization/#exercise-5-inspect-the-licensing-code","text":"In this exercise, you'll inspect key areas of the sample licensing service used in this lab. In an actual application, you would write your own licensing service or extend your existing licensing service to integrate it with your SaaS offer on AppSource.","title":"Exercise 5: Inspect the licensing code"},{"location":"aad/Monetization/#step-1-resolving-the-marketplace-token","text":"When a user completes the process of purchasing your application in AppSource or the Microsoft Teams app store, they are directed to the app's landing page . This URL is for a web page provided by the software vendor and registered in Partner Center. In this lab, the landing page is part of the SaaSSampleWebApp sample. Microsoft sends a marketplace token to the landing page; eventually this is resolved in the sample app's Subscription service . [Route(\"resolve\")] [HttpPost] public async Task<IActionResult> ResolveAsync([FromForm] string AuthCode) { using var requestMessage = new HttpRequestMessage(HttpMethod.Post, $\"{_configuration[\"SaaSfulfillmentAPIs:ApiEndPoint\"]}/api/saas/subscriptions/resolve?api-version={_configuration[\"SaaSfulfillmentAPIs:ApiVersion\"]}\"); // the token is not required for Mock APIs // requestMessage.Headers.Authorization = new AuthenticationHeaderValue(\"Bearer\", your_token); requestMessage.Headers.Add(\"x-ms-marketplace-token\", AuthCode); var httpClient = _httpClientFactory.CreateClient(); using (var response = await httpClient.SendAsync(requestMessage).ConfigureAwait(false)) { if (response.StatusCode == HttpStatusCode.OK) { var content = await response.Content.ReadAsStringAsync().ConfigureAwait(false); var resolvedSubscription = JsonConvert.DeserializeObject<ResolvedSubscription>(content); var subscription = new Subscription { Id = resolvedSubscription.Id, OfferId = resolvedSubscription.OfferId, PlanId = resolvedSubscription.PlanId, SubscriptionName = resolvedSubscription.SubscriptionName, Purchaser = HttpContext.User.Identity.Name, PurchaserId = Guid.Parse(HttpContext.User.GetObjectId()), TenantId = Guid.Parse(HttpContext.User.GetTenantId()), PurchaseSeatsCount = resolvedSubscription.Quantity, AllowOverAssignment = false, FirstComeFirstServedAssignment = false }; return Ok(subscription); } return BadRequest(response.ReasonPhrase); } } The sample calls the AppSource simulator to get information about the subscription that was purchased. In your service, you would call this Marketplace API to do this exchange.","title":"Step 1: Resolving the Marketplace Token"},{"location":"aad/Monetization/#step-2-examine-web-hooks","text":"In addition to a landing page, your application will need to provide a set of web hooks that Microsoft can call to let you know about subscription changes. The sample app doesn't implement all the webhooks, but does implement a subset that are supported by the AppSource simulator. The WebHookController responds to these events: ChangePlan - called when a user changes their offer plan, such as moving from a Silver to a Gold plan. Plans are defined by the software using Partner Center. ChangeQuantity - called when a user changes the quantity of seats in a per-seat SaaS offer Unsubscribe - called when a user cancels their subscription The full list of webhooks events is documented here .","title":"Step 2: Examine web hooks"},{"location":"aad/Monetization/#step-3-examine-the-license-check","text":"In Exercise 2 you added code to check if the user has a license . This call is handled here, in the CheckOrAdtivateLicense method in the Subscriptions controller. Notice that this code includes some business logic and accesses a license database in Azure SQL using Entity Framework. The point of this is that the application is managing licenses in its own way and keeping track of them in its own database. Microsoft Commercial Marketplace manages subscriptions which grant licenses, but each application can manage those licenses however it wants to. This allows applications flexibility in how they implement licensing. function showCompletionPopup() { let path = window.location.pathname; path = path.endsWith('/') ? path.slice(0, -1) : path; let pathArray = path.split('/'); let leafFolder = pathArray[pathArray.length-1]; let height = window.outerHeight / 1.5; let width = window.outerWidth / 2; window.open(`${window.origin}/app-camp/congrats/${leafFolder}`, 'Congratulations!', `width=${width}, height=${height}, left=100, top=100,`); }","title":"Step 3: Examine the license check"},{"location":"aad/Monetization/#congratulations","text":"When you have finished this lab, please click this button to let us know! No personal information is collected; we only want to count how many people have completed the labs so we can continue to fund this work!","title":"Congratulations!"},{"location":"aad/Monetization/#known-issues","text":"For the latest issues, or to file a bug report, see the github issues list for this repository.","title":"Known issues"},{"location":"aad/Monetization/#next-steps","text":"After completing this lab, you may continue with additional extended labs! Add a Configurable Tab Add a Deep link to a personal Tab Add a Dialog Add a Meeting app Add a Message Extension Selling Your SaaS-based Teams Extension","title":"Next steps"},{"location":"bespoke/B01-begin-app/","text":"(function(c,l,a,r,i,t,y){ c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)}; t=l.createElement(r);t.async=1;t.src=\"https://www.clarity.ms/tag/\"+i; y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y); })(window, document, \"clarity\", \"script\", \"dfh6fjbr5x\"); Lab B01: Start with a non-Azure Active Directory Identity System Overview This is the very first lab in Path B, which begins with an application that uses an authorization system other than Azure AD. You will learn a pattern for adding Azure AD authentication for users while maintaining another identity system's user profiles and authorization. This won't work everywhere but a number of partners have been successful with this kind of approach. In this case, the application has a simple cookie-based authentication scheme that's not secure but is easy to understand. If you use an identity provider such as Auth0, Google Identity Services, Identity Server, Okta, or Ping Federate, this is the path for you. Even Azure AD B2C - which isn't at all the same as Azure AD - would follow this path. Are you on the right path? Expand these notes to find out! There are two options for doing the labs: The \"A\" path is for developers with apps that are already based on Azure Active Directory. The starting app uses Azure Active Directory and the Microsoft Authentication Library (MSAL). the \"B\" path is for developers with apps that use some other identity system. It includes a simple (and not secure!) cookie-based auth system based on the Employees table in the Northwind database. You will use an identity mapping scheme to allow your existing users to log in directly or via Azure AD Single Sign-On. In this lab you will set up the Northwind Orders application, which can be found in the B01-begin-app folder. The labs that follow will lead you step by step into extending the web application to be a Microsoft Teams application with Azure AD Single Sign-On. B01-begin-app: Setting up the application (\ud83d\udccdYou are here) B02-after-teams-login: Creating a Teams application B03-after-teams-sso: Adding Azure AD SSO to your app B04-after-apply-styling: Teams styling and themes In this lab you will learn to: Run a web application using NodeJS Expose a local web application using ngrok Video briefing \"B Path\" Lab Briefing Features View orders associated with the logged-in user (sales representative) View products by category View product details and orders for a product View order details The application is based on the Northwind Traders Database, which is a sample relational database that originally shipped with Microsoft Access. The Northwind Traders Database is now available as a demonstration OData service , which is queried in this lab. This is a read-only data source; some of the later exercises appear to update the data but the changes are only stored in the server memory and will only persist until the server is restarted. Exercise 1: Install prerequisites You can complete these labs on a Windows, Mac, or Linux machine, but you do need the ability to install the prerequisites. If you are not permitted to install applications on your computer, you'll need to find another machine (or virtual machine) to use throughout the workshop. Step 1: Install NodeJS NodeJS is a program that allows you to run JavaScript on your computer; it uses the open source \"V8\" engine, which is used in popular web browsers such as Microsoft Edge and Google Chrome. You will need NodeJS to run the web server code used throughout this workshop. Browse to https://nodejs.org/en/download/ and install the \"LTS\" (Long Term Support) version for your operating system. This lab has been ested using NodeJS version 14.17.4 and 16.14.0. If you already have another version of NodeJS installed, you may want to set up the Node Version Manager (or this variation for Microsoft Windows), which allows you to easily switch Node versions on the same computer. Step 2: Install a Code Editor You can really use any code editor you wish, but we recommend Visual Studio Code . Step 3: Install ngrok ngrok is a tunneling program that allows you to access your local web server (running in NodeJS in this case) from the Internet. To complete this exercise, sign up for a free ngrok account and install ngrok on your computer. The free version of ngrok will assign a URL similar to https://something.ngrok.io, where \"something\" is a random identifier. As long as ngrok is running (leave it going in a command or terminal window), you can browse your web site at that URL. If you start and stop ngrok, or try to keep it running for more than 8 hours, you'll get a new identifier and you'll need to update your app registration, environment variables, etc. The paid version of ngrok allows you to reserve the same URL for use over time, removing the need to update it when you return to the lab. Tip If you restart ngrok and get a new URL under the free plan, you can refer to this page for details on all the places in the labs where you need to update the URL. While ngrok isn't strictly required for developing Microsoft Teams applications, it makes things much easier, especially if Bots are involved. An example of this is the Message Extension lab since Message Extensions use a Bot to communicate with Microsoft Teams. More information What is ngrok and do you really need it? Step 4: Start ngrok In the command line tool of your choice, navigate to the folder where you've saved ngrok.exe and run this command: ngrok http 3978 The terminal will display a screen like this; note the https forwarding URL for use in this lab. ngrok will tunnel requests on this URL to your local host on port 3978 for easy debugging. Save this URL for use throughout the labs. Warning Do not stop ngrok for the duration of these labs. If you do stop ngrok and are assigned a new URL, this page lists all the exercises which involve the ngrok URL so you can easily update it. Exercise 2: Configure and run the application Step 1: Download the starting application The starting application is in github at https://github.com/microsoft/app-camp . Click the \"Code\" button and clone or download the content to your computer. The starting code for the \"B\" path is in the src/create-core-app/bespoke/B01-begin-app folder. Copy this folder to nother location on your computer; this will be your working copy to keep the original source separate. Folders are also provided with the final code for the other labs. Step 2: Install the app's dependencies Using a command line tool of your choice, navigate to your working directory and type the command: npm install This will install the libraries required to run the server side of your solution. Step 3: Download the sample data The Northwind Orders application uses the venerable Northwind database for sample data. The Northwind Database originally shipped with Microsoft Access, then SQL Server, and now is available as a test OData service from the OData organization . In this step, you'll download the entire Northwind database from this test service to local JSON files, which are used by the Northwind Orders application. Using a command line tool in your working directory, type: npm run db-download This will create a JSON file in the northwindDB folder for each table in the Northwind database. The appliction reads and writes these JSON files. It's generous to call these files a \"database\", but it works well for a single-user lab environment. Step 4: Configure the app settings In a code editor, open the working folder you created in Step 2. Copy the .env_sample file to a new file called .env and open the new file. It will look like this: COMPANY_NAME=Northwind Traders PORT=3978 No changes are required to this file until future labs in the series, but you do need to create the .env file for the app to run. Step 5: Run the application To run the application, open a command line in your working folder and type: npm start At this point you should be able to browse to your ngrok URL (saved in Exercise 1 Step 4) and use the application. Note that due to the ngrok tunnel, you can try your app from anywhere on the Internet. At first you will be directed to the Northwind login page. The login system is ridiculously simple; usernames just the last names of each employee, which are stored in the Northwind employee database. Any employee last name with any password will work! As if that wasn't insecure enough, the employees are listed right on the page! (This is intended for instructional purposes, not to be secure. Do not use this code in a real application!) Log in using one of the last names shown with a blank password; the system will ensure the employee exists and place the employee ID in a browser session cookie. Each web service request is validated by checking that the cookie contains a number. Of course a real authentication scheme would require a password or other proof of identity, and would issue a secure token in the cookie or elsewhere. When you've logged in, you will see the Northwind Orders application. The home page contains two pieces of information from the user profile, the user's full name and a small profile card showing the user's name, job title, and a logoff button. Click \"My Orders\" in the top navigation bar to view the employee's orders. You can click on any order to view the details. From here you can click on any product to view its details. Much of the data is hyperlinked in this fashion. You can also click on \"Products\" in the top navigation to view a list of product categories. From there you can click into a product category to view a list of products, and then you can click into a product to see its details. The product detail page shows all the orders for the product, which leads to a list of orders, and so you can click your way around the sample data. Try logging out and logging in; you should be able to view the orders for another user based on the employee ID field in the Orders table. Danger The sample application uses a browser session cookie to establish who is logged in. It is not secure and would be easy to fake - do not use this in a real application! Also be aware during testing that your login will persist until you close all instances of your web browser. For example if you leave your browser logged in after this lab and then run Microsoft Teams in another instance of the same browser, your user will already be logged in when you get to the next lab. function showCompletionPopup() { let path = window.location.pathname; path = path.endsWith('/') ? path.slice(0, -1) : path; let pathArray = path.split('/'); let leafFolder = pathArray[pathArray.length-1]; let height = window.outerHeight / 1.5; let width = window.outerWidth / 2; window.open(`${window.origin}/app-camp/congrats/${leafFolder}`, 'Congratulations!', `width=${width}, height=${height}, left=100, top=100,`); } Congratulations! When you have finished this lab, please click this button to let us know! No personal information is collected; we only want to count how many people have completed the labs so we can continue to fund this work! Known issues While it will work on mobile devices, the application is not responsive and will not look good on these devices. This may be addressed in a future version of the lab. For the latest issues, or to file a bug report, see the github issues list for this repository. Next lab Here is the next lab , in which you will create a simple Teams application that displays pages from the app you just set up.","title":"B01 - Start with a non-Azure Active Directory Identity System"},{"location":"bespoke/B01-begin-app/#lab-b01-start-with-a-non-azure-active-directory-identity-system","text":"","title":"Lab B01: Start with a non-Azure Active Directory Identity System"},{"location":"bespoke/B01-begin-app/#overview","text":"This is the very first lab in Path B, which begins with an application that uses an authorization system other than Azure AD. You will learn a pattern for adding Azure AD authentication for users while maintaining another identity system's user profiles and authorization. This won't work everywhere but a number of partners have been successful with this kind of approach. In this case, the application has a simple cookie-based authentication scheme that's not secure but is easy to understand. If you use an identity provider such as Auth0, Google Identity Services, Identity Server, Okta, or Ping Federate, this is the path for you. Even Azure AD B2C - which isn't at all the same as Azure AD - would follow this path. Are you on the right path? Expand these notes to find out! There are two options for doing the labs: The \"A\" path is for developers with apps that are already based on Azure Active Directory. The starting app uses Azure Active Directory and the Microsoft Authentication Library (MSAL). the \"B\" path is for developers with apps that use some other identity system. It includes a simple (and not secure!) cookie-based auth system based on the Employees table in the Northwind database. You will use an identity mapping scheme to allow your existing users to log in directly or via Azure AD Single Sign-On. In this lab you will set up the Northwind Orders application, which can be found in the B01-begin-app folder. The labs that follow will lead you step by step into extending the web application to be a Microsoft Teams application with Azure AD Single Sign-On. B01-begin-app: Setting up the application (\ud83d\udccdYou are here) B02-after-teams-login: Creating a Teams application B03-after-teams-sso: Adding Azure AD SSO to your app B04-after-apply-styling: Teams styling and themes In this lab you will learn to: Run a web application using NodeJS Expose a local web application using ngrok Video briefing \"B Path\" Lab Briefing","title":"Overview"},{"location":"bespoke/B01-begin-app/#features","text":"View orders associated with the logged-in user (sales representative) View products by category View product details and orders for a product View order details The application is based on the Northwind Traders Database, which is a sample relational database that originally shipped with Microsoft Access. The Northwind Traders Database is now available as a demonstration OData service , which is queried in this lab. This is a read-only data source; some of the later exercises appear to update the data but the changes are only stored in the server memory and will only persist until the server is restarted.","title":"Features"},{"location":"bespoke/B01-begin-app/#exercise-1-install-prerequisites","text":"You can complete these labs on a Windows, Mac, or Linux machine, but you do need the ability to install the prerequisites. If you are not permitted to install applications on your computer, you'll need to find another machine (or virtual machine) to use throughout the workshop.","title":"Exercise 1: Install prerequisites"},{"location":"bespoke/B01-begin-app/#step-1-install-nodejs","text":"NodeJS is a program that allows you to run JavaScript on your computer; it uses the open source \"V8\" engine, which is used in popular web browsers such as Microsoft Edge and Google Chrome. You will need NodeJS to run the web server code used throughout this workshop. Browse to https://nodejs.org/en/download/ and install the \"LTS\" (Long Term Support) version for your operating system. This lab has been ested using NodeJS version 14.17.4 and 16.14.0. If you already have another version of NodeJS installed, you may want to set up the Node Version Manager (or this variation for Microsoft Windows), which allows you to easily switch Node versions on the same computer.","title":"Step 1: Install NodeJS"},{"location":"bespoke/B01-begin-app/#step-2-install-a-code-editor","text":"You can really use any code editor you wish, but we recommend Visual Studio Code .","title":"Step 2: Install a Code Editor"},{"location":"bespoke/B01-begin-app/#step-3-install-ngrok","text":"ngrok is a tunneling program that allows you to access your local web server (running in NodeJS in this case) from the Internet. To complete this exercise, sign up for a free ngrok account and install ngrok on your computer. The free version of ngrok will assign a URL similar to https://something.ngrok.io, where \"something\" is a random identifier. As long as ngrok is running (leave it going in a command or terminal window), you can browse your web site at that URL. If you start and stop ngrok, or try to keep it running for more than 8 hours, you'll get a new identifier and you'll need to update your app registration, environment variables, etc. The paid version of ngrok allows you to reserve the same URL for use over time, removing the need to update it when you return to the lab. Tip If you restart ngrok and get a new URL under the free plan, you can refer to this page for details on all the places in the labs where you need to update the URL. While ngrok isn't strictly required for developing Microsoft Teams applications, it makes things much easier, especially if Bots are involved. An example of this is the Message Extension lab since Message Extensions use a Bot to communicate with Microsoft Teams. More information What is ngrok and do you really need it?","title":"Step 3: Install ngrok"},{"location":"bespoke/B01-begin-app/#step-4-start-ngrok","text":"In the command line tool of your choice, navigate to the folder where you've saved ngrok.exe and run this command: ngrok http 3978 The terminal will display a screen like this; note the https forwarding URL for use in this lab. ngrok will tunnel requests on this URL to your local host on port 3978 for easy debugging. Save this URL for use throughout the labs. Warning Do not stop ngrok for the duration of these labs. If you do stop ngrok and are assigned a new URL, this page lists all the exercises which involve the ngrok URL so you can easily update it.","title":"Step 4: Start ngrok"},{"location":"bespoke/B01-begin-app/#exercise-2-configure-and-run-the-application","text":"","title":"Exercise 2: Configure and run the application"},{"location":"bespoke/B01-begin-app/#step-1-download-the-starting-application","text":"The starting application is in github at https://github.com/microsoft/app-camp . Click the \"Code\" button and clone or download the content to your computer. The starting code for the \"B\" path is in the src/create-core-app/bespoke/B01-begin-app folder. Copy this folder to nother location on your computer; this will be your working copy to keep the original source separate. Folders are also provided with the final code for the other labs.","title":"Step 1: Download the starting application"},{"location":"bespoke/B01-begin-app/#step-2-install-the-apps-dependencies","text":"Using a command line tool of your choice, navigate to your working directory and type the command: npm install This will install the libraries required to run the server side of your solution.","title":"Step 2: Install the app's dependencies"},{"location":"bespoke/B01-begin-app/#step-3-download-the-sample-data","text":"The Northwind Orders application uses the venerable Northwind database for sample data. The Northwind Database originally shipped with Microsoft Access, then SQL Server, and now is available as a test OData service from the OData organization . In this step, you'll download the entire Northwind database from this test service to local JSON files, which are used by the Northwind Orders application. Using a command line tool in your working directory, type: npm run db-download This will create a JSON file in the northwindDB folder for each table in the Northwind database. The appliction reads and writes these JSON files. It's generous to call these files a \"database\", but it works well for a single-user lab environment.","title":"Step 3: Download the sample data"},{"location":"bespoke/B01-begin-app/#step-4-configure-the-app-settings","text":"In a code editor, open the working folder you created in Step 2. Copy the .env_sample file to a new file called .env and open the new file. It will look like this: COMPANY_NAME=Northwind Traders PORT=3978 No changes are required to this file until future labs in the series, but you do need to create the .env file for the app to run.","title":"Step 4: Configure the app settings"},{"location":"bespoke/B01-begin-app/#step-5-run-the-application","text":"To run the application, open a command line in your working folder and type: npm start At this point you should be able to browse to your ngrok URL (saved in Exercise 1 Step 4) and use the application. Note that due to the ngrok tunnel, you can try your app from anywhere on the Internet. At first you will be directed to the Northwind login page. The login system is ridiculously simple; usernames just the last names of each employee, which are stored in the Northwind employee database. Any employee last name with any password will work! As if that wasn't insecure enough, the employees are listed right on the page! (This is intended for instructional purposes, not to be secure. Do not use this code in a real application!) Log in using one of the last names shown with a blank password; the system will ensure the employee exists and place the employee ID in a browser session cookie. Each web service request is validated by checking that the cookie contains a number. Of course a real authentication scheme would require a password or other proof of identity, and would issue a secure token in the cookie or elsewhere. When you've logged in, you will see the Northwind Orders application. The home page contains two pieces of information from the user profile, the user's full name and a small profile card showing the user's name, job title, and a logoff button. Click \"My Orders\" in the top navigation bar to view the employee's orders. You can click on any order to view the details. From here you can click on any product to view its details. Much of the data is hyperlinked in this fashion. You can also click on \"Products\" in the top navigation to view a list of product categories. From there you can click into a product category to view a list of products, and then you can click into a product to see its details. The product detail page shows all the orders for the product, which leads to a list of orders, and so you can click your way around the sample data. Try logging out and logging in; you should be able to view the orders for another user based on the employee ID field in the Orders table. Danger The sample application uses a browser session cookie to establish who is logged in. It is not secure and would be easy to fake - do not use this in a real application! Also be aware during testing that your login will persist until you close all instances of your web browser. For example if you leave your browser logged in after this lab and then run Microsoft Teams in another instance of the same browser, your user will already be logged in when you get to the next lab. function showCompletionPopup() { let path = window.location.pathname; path = path.endsWith('/') ? path.slice(0, -1) : path; let pathArray = path.split('/'); let leafFolder = pathArray[pathArray.length-1]; let height = window.outerHeight / 1.5; let width = window.outerWidth / 2; window.open(`${window.origin}/app-camp/congrats/${leafFolder}`, 'Congratulations!', `width=${width}, height=${height}, left=100, top=100,`); }","title":"Step 5: Run the application"},{"location":"bespoke/B01-begin-app/#congratulations","text":"When you have finished this lab, please click this button to let us know! No personal information is collected; we only want to count how many people have completed the labs so we can continue to fund this work!","title":"Congratulations!"},{"location":"bespoke/B01-begin-app/#known-issues","text":"While it will work on mobile devices, the application is not responsive and will not look good on these devices. This may be addressed in a future version of the lab. For the latest issues, or to file a bug report, see the github issues list for this repository.","title":"Known issues"},{"location":"bespoke/B01-begin-app/#next-lab","text":"Here is the next lab , in which you will create a simple Teams application that displays pages from the app you just set up.","title":"Next lab"},{"location":"bespoke/B02-after-teams-login/","text":"(function(c,l,a,r,i,t,y){ c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)}; t=l.createElement(r);t.async=1;t.src=\"https://www.clarity.ms/tag/\"+i; y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y); })(window, document, \"clarity\", \"script\", \"dfh6fjbr5x\"); Lab B02: Teams App with Bespoke Authentication This is parth of Path B, which begins with an application that uses an authorization system other than Azure AD. Are you on the right path? Expand these notes to find out! There are two options for doing the labs: The \"A\" path is for developers with apps that are already based on Azure Active Directory. The starting app uses Azure Active Directory and the Microsoft Authentication Library (MSAL). the \"B\" path is for developers with apps that use some other identity system. It includes a simple (and not secure!) cookie-based auth system based on the Employees table in the Northwind database. You will use an identity mapping scheme to allow your existing users to log in directly or via Azure AD Single Sign-On. In this lab you will build the application you created in Lab B01 into a Microsoft Teams application. This application will still use the Northwind authentication, but since the Northwind login page won't work in the Teams tab IFrame, we'll use the Teams JavaScript SDK to show it in a pop-up. B01-begin-app: Setting up the application B02-after-teams-login: Creating a Teams application (\ud83d\udccdYou are here) B03-after-teams-sso: Adding Azure AD SSO to your app B04-after-apply-styling: Teams styling and themes In this lab you will learn to: Create a Microsoft Teams app manifest and package that can be installed into Teams Use the Teams JavaScript SDK to display a login page in a pop-up window Install and test your application in Microsoft Teams Video briefing \"B Path\" Lab Briefing Features Microsoft Teams personal tab application displays the Northwind Orders web application Users sign into the Teams application using the existing Northwind login page Application alters its appearance (hides the top navigation) when running in Teams, allowing Teams tab navigation instead Project structure Project files before and after this lab (open to display \u25ba) The project structure when you start of this lab and end of this lab is as follows. Use this depiction for comparison. On your left is the contents of folder B01-Start-BespokeAuth and on your right is the contents of folder B02-TeamsApp-BespokeAuth . - \ud83c\udd95 New files/folders \ud83d\udd3aFiles changed Project Structure Before Project Structure After B01-begin-app \u251c\u2500\u2500 client \u2502 \u251c\u2500\u2500 components \u2502 \u251c\u2500\u2500 \ud83d\udd3anavigation.js \u2502 \u2514\u2500\u2500 identity \u2502 \u251c\u2500\u2500 \ud83d\udd3aidentityClient.js \u2502 \u2514\u2500\u2500 login.html \u2502 \u2514\u2500\u2500 \ud83d\udd3alogin.js \u2502 \u2514\u2500\u2500 userPanel.js \u251c\u2500\u2500 modules \u2502 \u2514\u2500\u2500 env.js \u2502 \u2514\u2500\u2500 northwindDataService.js \u251c\u2500\u2500 pages \u2502 \u2514\u2500\u2500 categories.html \u2502 \u2514\u2500\u2500 categories.js \u2502 \u2514\u2500\u2500 categoryDetails.html \u2502 \u2514\u2500\u2500 categoryDetails.js \u2502 \u2514\u2500\u2500 myOrders.html \u2502 \u2514\u2500\u2500 orderDetail.html \u2502 \u2514\u2500\u2500 orderDetail.js \u2502 \u2514\u2500\u2500 privacy.html \u2502 \u2514\u2500\u2500 productDetail.html \u2502 \u2514\u2500\u2500 productDetail.js \u2502 \u2514\u2500\u2500 termsofuse.html \u251c\u2500\u2500 index.html \u251c\u2500\u2500 index.js \u251c\u2500\u2500 northwind.css \u251c\u2500\u2500 server \u2502 \u2514\u2500\u2500 constants.js \u2502 \u2514\u2500\u2500 identityService.js \u2502 \u2514\u2500\u2500 northwindDataService.js \u2502 \u2514\u2500\u2500 server.js \u251c\u2500\u2500 \ud83d\udd3a.env_Sample \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 \ud83d\udd3apackage.json \u251c\u2500\u2500 README.md B02-after-teams-login \u251c\u2500\u2500 client \u2502 \u251c\u2500\u2500 components \u2502 \u251c\u2500\u2500 \ud83d\udd3anavigation.js \u2502 \u2514\u2500\u2500 identity \u2502 \u251c\u2500\u2500 \ud83d\udd3aidentityClient.js \u2502 \u2514\u2500\u2500 login.html \u2502 \u2514\u2500\u2500 \ud83d\udd3alogin.js \u2502 \u2514\u2500\u2500 \ud83c\udd95teamsLoginLauncher.html \u2502 \u2514\u2500\u2500 \ud83c\udd95teamsLoginLauncher.js \u2502 \u2514\u2500\u2500 userPanel.js \u251c\u2500\u2500 modules \u2502 \u2514\u2500\u2500 env.js \u2502 \u2514\u2500\u2500 northwindDataService.js \u2502 \u2514\u2500\u2500 \ud83c\udd95teamsHelpers.js \u251c\u2500\u2500 pages \u2502 \u2514\u2500\u2500 categories.html \u2502 \u2514\u2500\u2500 categories.js \u2502 \u2514\u2500\u2500 categoryDetails.html \u2502 \u2514\u2500\u2500 categoryDetails.js \u2502 \u2514\u2500\u2500 myOrders.html \u2502 \u2514\u2500\u2500 orderDetail.html \u2502 \u2514\u2500\u2500 orderDetail.js \u2502 \u2514\u2500\u2500 privacy.html \u2502 \u2514\u2500\u2500 productDetail.html \u2502 \u2514\u2500\u2500 productDetail.js \u2502 \u2514\u2500\u2500 termsofuse.html \u251c\u2500\u2500 index.html \u251c\u2500\u2500 index.js \u251c\u2500\u2500 northwind.css \u251c\u2500\u2500 \ud83c\udd95manifest \u2502 \u2514\u2500\u2500 \ud83c\udd95makePackage.js \u2502 \u2514\u2500\u2500 \ud83c\udd95manifest.template.json \u2502 \u2514\u2500\u2500 \ud83c\udd95northwind32.png \u2502 \u2514\u2500\u2500 \ud83c\udd95northwind192.png \u251c\u2500\u2500 server \u2502 \u2514\u2500\u2500 constants.js \u2502 \u2514\u2500\u2500 identityService.js \u2502 \u2514\u2500\u2500 northwindDataService.js \u2502 \u2514\u2500\u2500 server.js \u251c\u2500\u2500 \ud83d\udd3a.env_Sample \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 \ud83d\udd3apackage.json \u251c\u2500\u2500 README.md Exercise 1 Set up your Microsoft 365 Subscription To run your application in Microsoft Teams, you'll need a Microsoft 365 subscription. In this exercise you'll acquire a free developer subscription and configure it so you can easily upload Teams applications. Step 1: Get a tenant If you don't yet have a tenant, please join the Microsoft 365 Developer Program to get a free one. Your tenant includes 25 E5 user licenses and can be renewed as long as you keep developing! Click \"Join now\" to begin. Log in with any Microsoft personal or work and school account, enter your information, and click \"Next\". You will have an opportunity to choose what kind of \"sandbox\" you want; the \"Instant sandbox\" is recommended. Follow the wizard and select your administrator username and password, tenant domain name, etc. The domain name you choose is just the left-most portion - for example if you enter \"Contoso\" your domain will be \"Contoso.onmicrosoft.com\". Remember this information as you'll need it throughout the labs! You will log in as @ .onmicrosoft.com with the password your chose. You'll be prompted for your phone number and then the system will set up your subscription. Eventually you'll be prompted to log into your new tenant. Be sure to use the new administrator credentials you just created, not the ones you used when you signed up for the developer program. Tip: Don't develop or do the labs in production! It may be tempting to build solutions right where you work every day, but there are good reasons to have a dedicated dev tenant - and probably additional staging/test tenants. They're free, and you can safely experiment as a tenant admin without risking your production work. More information Setting up your Microsoft 365 Development tenant Tip: Navigating many tenants Consider creating a browser profile for each tenant that will have its own favorites, stored credentials, and cookies so you can easily swtch between tenants as you work. You may be asked to enable multi-factor authentication (MFA) This is certainly a good idea! Just follow the instructions. If you really must turn off MFA, here are instructions . Step 2: Enable Teams application uploads By default, end users can't upload Teams applications directly; instead an administrator needs to upload them into the enterprise app catalog. In this step you will enable direct uploads to make developement easier and allow installation directly from the Teams user interface. a. In the left panel of the admin center, click \"Show all\" to open up the entire navigation When the panel opens, click Teams to open the Microsoft Teams admin center. b. In the left of the Microsoft Teams admin center, open the Teams apps accordion 1\ufe0f\u20e3 and select Setup Policies 2\ufe0f\u20e3. You will see a list of App setup policies. Click the Global (Org-wide default) policy 3\ufe0f\u20e3. c. Ensure the first switch, \"Upload custom apps\" is turned On. Be sure to scroll down and click the \"Save\" button to persist your change. We have been working to get this enabled by default on developer tenants, so it may already be set for you. The change can take up to 24 hours to take effect, but usually it's much faster. ### Exercise 2: Start ngrok and obtain the ngrok URL Step 1: Start ngrok Before you can register your application, you will need to start ngrok to obtain the URL for your application. Run this command in the command line tool of your choice: ngrok http 3978 -host-header=localhost The terminal will display a screen like this; note the https forwarding URL for use in this lab. Save this URL for use throughout the labs. Warning Do not stop ngrok for the duration of these labs. If you do stop ngrok and are assigned a new URL, this page lists all the exercises which involve the ngrok URL so you can easily update it. Exercise 3: Create the Teams application package Microsoft Teams applications don't run \"inside\" of Microsoft Teams, they just appear in the Teams user interface. A tab in Teams is just a web page which could be hosted anywhere as long as the Teams client can reach it. To create a Teams application, you need to create a file called manifest.json which contains the information Teams needs to display the app, such as the URL of the Northwind Orders application. This file is placed in a .zip file along with the application icons, and the resulting application package is uploaded into Teams or distributed through the Teams app store. In this exercise you'll create a manifest.json file and application package for the Northwind Orders app and upload it into Microsoft Teams. Step 1: Copy the manifest folder to your working directory Many developers use the Teams Developer Portal to create an app package; this is preferred by many enterprise developer and systems integrators. However ISV's may want to keep the app package settings in their source control system, and that's the approach used in the lab. It's just a zip file; you can create it any way you want! Go to your local copy of the B02-TeamsApp-BespokeAuth folder on your computer and copy the manifest folder into the working folder you used in the previous lab. This folder contains a template for building the manifest.json file. Step 2: Examine the manifest template In the manifest folder you just copied, open manifest.template.json in your code editor. This is the JSON that Teams needs to display your application. Notice that the template contains tokens such as <HOST_NAME> and <TEAMS_APPI_D> . A small build script will take these values from your .env file and plug them into the manifest. However the token <TEAMS_APP_ID> is not yet in the .env file; we'll add that in the next step. Examine the staticTabs property in the manifest. It defines two tabs, one for the \"My Orders\" page and one for the \"Products\" page. The contentUrl is used within the Teams application, and websiteUrl is used if Teams can't render the tab and needs to launch it in a regular web browser. The Northwind Orders app will use the same code URL's for both. \"staticTabs\": [ { \"entityId\": \"Orders\", \"name\": \"My Orders\", \"contentUrl\": \"https://<HOST_NAME>/pages/myOrders.html\", \"websiteUrl\": \"https://<HOST_NAME>/pages/myOrders.html\", \"scopes\": [ \"personal\" ] }, { \"entityId\": \"Products\", \"name\": \"Products\", \"contentUrl\": \"https://<HOST_NAME>/pages/categories.html\", \"websiteUrl\": \"https://<HOST_NAME>/pages/categories.html\", \"scopes\": [ \"personal\" ] Step 3: Add the Teams App ID to the .env file Open the .env file in your working directory and add these lines, using the ngrok URL: TEAMS_APP_ID=1331dbd6-08eb-4123-9713-017d9e0fc04a HOST_NAME=<something>.ngrok.io You should generate a different GUID for each application you register; this one is just here for your convenience. We could have hard-coded the app ID in the manifest.json template, but there are times when you need it in your code, so this will make that possible in the future. Step 4: Update your package.json file Open the package.json file in your working directory and add a script that will generate the app package. The script code is in the manifest folder you just copied, so we just need to declare it in package.json. This is what scripts property should look like when you're done. \"scripts\": { \"start\": \"nodemon server/server.js\", \"debug\": \"nodemon --inspect server/server.js\", \"package\": \"node manifest/makePackage.js\" }, The script uses an npm package called \"adm-zip\" to create the .zip file, so you need to add that as a development dependency. Update the devDependencies property to include it like this: \"devDependencies\": { \"@types/express\": \"^4.17.2\", \"@types/request\": \"^2.48.3\", \"nodemon\": \"^2.0.13\", \"adm-zip\": \"^0.4.16\" } Then, from a command line in your working directory, install the package by typing npm install Step 5: Build the package Now you can build a new package at any time with this command: npm run package Go ahead and run it, and two new files, manifest.json and northwind.zip (the app package) should appear in your manifest folder. Exercise 3: Modify the application source code If you were to run the application as-is in Microsoft Teams, you'd see this error message: The reason for this is that most login pages, including this one, contain code to detect if they're running in an IFrame and refuse to work. This is due to security concerns; for example a parent page could overlay content on top of the IFrame to capture the user's password. While the Northwind authentication scheme is for demonstration only and isn't really secure, it does (realistically) refuse to run in IFrame that hosts your Teams tab. In this exercise you'll add code to move the login page into a separate popup window. Step 1: Add a module with Teams helper functions Create a file called teamsHelpers.js in the client/modules folder, and paste in this code: import 'https://res.cdn.office.net/teams-js/2.0.0/js/MicrosoftTeams.min.js'; let teamsInitPromise; export function ensureTeamsSdkInitialized() { if (!teamsInitPromise) { teamsInitPromise = microsoftTeams.app.initialize(); } return teamsInitPromise; } // async function returns true if we're running in Teams export async function inTeams() { try { await ensureTeamsSdkInitialized(); const context = await microsoftTeams.app.getContext(); return (context.app.host.name === microsoftTeams.HostName.teams); } catch (e) { console.log(`${e} from Teams SDK, may be running outside of Teams`); return false; } } These functions are used throughout the application to manage the Microsoft Teams JavaScript SDK. Before using the Microsoft Teams JavaScript SDK for the first time on a page, you need to call the microsoftTeams.app.initialize() function. The first function in teamsHelpers.js will ensure that initialize() has been called exactly once on the page. The inTeams() function is used to determine if the application is running in Microsoft Teams or not. You may want to check out the microsoftTeams.Hostname enumeration to see other places where Teams applications will be able to run in the near future! Step 2: Add a Teams launcher page When running in Microsoft Teams, we want the login page to run in a popup instead of in the main application window (which is an IFrame). In most web browsers, launching a popup requires the user to take some kind of action such as pushing a button; this rule was introduced after some web sites launched dozens of popups as soon as they opened. The Teams launcher page contains a button the user can push to open the popup. In your working folder, create a new file /client/identity/teamsLoginLauncher.html and paste this markup inside. (Alternately, you can copy the file from the B02-TeamsApp-BespokeAuth/client/identity folder). <!doctype html> <html> <head> <meta charset=\"UTF-8\" /> <title>Northwind Login Page</title> <link rel=\"stylesheet\" href=\"/northwind.css\" /> <link rel=\"icon\" href=\"data:;base64,=\"> <!-- Suppress favicon error --> </head> <body> <h2>Northwind Login (Teams)</h2> <br /> <div id=\"teamsLoginLauncher\"> <button id=\"teamsLoginLauncherButton\">Log in</button> </div> <div id=\"message\" class=\"errorMessage\"></div> <script type=\"module\" src=\"/identity/teamsLoginLauncher.js\"></script> </body> </html> Now create a corresponding JavaScript file, /client/identity/teamsLoginLauncher.js, or copy it from the B02-TeamsApp-BespokeAuth/client/identity folder: import 'https://res.cdn.office.net/teams-js/2.0.0/js/MicrosoftTeams.min.js'; import { ensureTeamsSdkInitialized } from '../modules/teamsHelpers.js'; const teamsLoginLauncherButton = document.getElementById('teamsLoginLauncherButton'); teamsLoginLauncherButton.addEventListener('click', async ev => { await ensureTeamsSdkInitialized(); await microsoftTeams.authentication.authenticate({ url: `${window.location.origin}/identity/login.html?teams=true`, width: 600, height: 535, }); window.location.href = document.referrer; }); The import statement loads the Teams JavaScript SDK, which is available for bundled apps as an npm package. In this case we're loading the CDN link (we could have used a <script> tag but we'd have to modify every page in the application). Since the Teams JavaScript SDK is packaged as a script and not a module (it has no export s), we will access the SDK using a global object microsoftTeams . The call to microsoftTeams.authenticatation.authenticate() is what launches the popup winodow.The popup will contain the same login page with minor modifications; these are applied in the next step. If the login is successful, the page will call an SDK function notifySuccess() , which will cause the successCallback to run and send the user to their originally requested page. Step 3: Modify the login page The only change needed in the login page is to return the logged in user credentials (the employee ID) to the teamsLoginLauncher page you added in the previous step. To do this, add this import statement at the top of /client/identity/login.js: import 'https://res.cdn.office.net/teams-js/2.0.0/js/MicrosoftTeams.min.js'; Now in the logInUser() function replace the line of code window.location.href = document.referrer; with this: if (window.location.search.indexOf('teams=true') >= 0) { await microsoftTeams.app.initialize(); microsoftTeams.authentication.notifySuccess(employeeId); } else { window.location.href = document.referrer; } This will check if it's running in Teams (using a query string this time; we may replace that with a call to inTeams() in a future version. Note that this page runs in its own popup so we don't have to worry about calling initialize() more than once, we can just call it directly. If the login is successful and running in Teams, it calls the Teams JavaScript SDK function notifySuccess() to return the employee ID to the launcher page. The finished login.js should look like this: import { validateEmployeeLogin, setLoggedinEmployeeId } from './identityClient.js'; import 'https://res.cdn.office.net/teams-js/2.0.0/js/MicrosoftTeams.min.js'; const loginPanel = document.getElementById('loginPanel'); const usernameInput = document.getElementById('username'); const passwordInput = document.getElementById('password'); const loginButton = document.getElementById('loginButton'); const messageDiv = document.getElementById('message'); const hintUL = document.getElementById('hintList'); if (window.location !== window.parent.location) { // The page is in an iframe - refuse service messageDiv.innerText = \"ERROR: You cannot run this app in an IFrame\"; } else { loginPanel.style.display = 'inline'; loginButton.addEventListener('click', logInUser); loginPanel.addEventListener('keypress', async function (e) { if (e.key === 'Enter') { await logInUser(); } }); async function logInUser (ev) { messageDiv.innerText = \"\"; const employeeId = await validateEmployeeLogin( usernameInput.value, passwordInput.value ); if (employeeId) { setLoggedinEmployeeId(employeeId); if (window.location.search.indexOf('teams=true') >= 0) { await microsoftTeams.app.initialize(); microsoftTeams.authentication.notifySuccess(employeeId); } else { window.location.href = document.referrer; } } else { messageDiv.innerText = \"Error: user not found\"; } } } Step 4: Modify the logoff code The logoff code simply sets the login cookie to 0 and directs the user back to the login page. To accomodate the application running in Microsoft teams, this function needs to check if it's running in Teams and send the user to the teamsLauncher.html page we created in Step 2. Open the /client/identity/identityClient.js file in your code editor and add this line at the top. import { inTeams } from '../modules/teamsHelpers.js'; Replace the logoff() function with this code to redirect to the launcher when the app is running in Teams. export async function logoff() { setLoggedinEmployeeId(0); // Redirect to the login page if (!(await inTeams())) { window.location.href = \"/identity/login.html\"; } else { window.location.href = \"/identity/teamsLoginLauncher.html\"; } } Step 5: Hide the navigation within Teams Microsoft Teams already has multiple levels of navigation, including multiple tabs as configured in the previous exercise. So the applications' built-in navigation is redundant in Teams. To hide the built-in navigation in Teams, open the client/components/navigation.js file and add this import statement at the top. import { inTeams } from '../modules/teamsHelpers.js'; Now modify the connectedCallback() function, which displays the navigation web component, to skip rendering if it's running in Teams. The resulting function should look like this: async connectedCallback() { if (!(await inTeams())) { let listItemHtml = \"\"; topNavLinks.forEach(link => { if (window.location.href.indexOf(link.url) < 0) { listItemHtml += '<li><a href=\"' + link.url + '\">' + link.text + '</a></li>'; } else { return listItemHtml += '<li><a href=\"' + link.url + '\" class=\"selected\">' + link.text + '</a></li>'; } }); this.innerHTML = ` <ul class=\"topnav\">${listItemHtml}</ul> `; } } About web components Web components are encapsulated custom HTML elements. They're not a Teams thing, nor do they use React or another UI library; they're built right into modern web browsers! You can learn more in this article Exercise 4: Test your application in Microsoft Teams Step 1: Start the application Now it's time to run your updated application and run it in Microsoft Teams. Start the application with this command: npm start Step 2: Upload the app package In the Teams web or desktop UI, click \"Apps\" in the sidebar 1\ufe0f\u20e3, then \"Manage your apps\" 2\ufe0f\u20e3. At this point you have three choices: Upload a custom app (upload the app for yourself or a specific team or group chat) - this only appears if you have enabled \"Upload custom apps\" in your setup policy; this was a step in the previous lab Upload an app to your org's app catalog (upload the app for use within your organization) - this only appears if you are a tenant administrator Submit an app to your org (initiate a workflow asking a tenant administrator to install your app) - this appears for everyone In this case, choose the first option 3\ufe0f\u20e3. Navigate to the Northwind.zip file in your manifest directory and upload it. Teams will display the application information; click the \"Add\" button to install it for your personal use. Step 3: Run the application The application should appear without any login prompt. The app's navigation should not be displayed; instead users can navigate to \"My Orders\" or \"Products\" using the tabs in the Teams app. function showCompletionPopup() { let path = window.location.pathname; path = path.endsWith('/') ? path.slice(0, -1) : path; let pathArray = path.split('/'); let leafFolder = pathArray[pathArray.length-1]; let height = window.outerHeight / 1.5; let width = window.outerWidth / 2; window.open(`${window.origin}/app-camp/congrats/${leafFolder}`, 'Congratulations!', `width=${width}, height=${height}, left=100, top=100,`); } Congratulations! When you have finished this lab, please click this button to let us know! No personal information is collected; we only want to count how many people have completed the labs so we can continue to fund this work! Known issues While it will work on mobile devices, the application is not responsive and will not look good on these devices. This may be addressed in a future version of the lab. For the latest issues, or to file a bug report, see the github issues list for this repository.","title":"B02 - Teams App with Bespoke Authentication"},{"location":"bespoke/B02-after-teams-login/#lab-b02-teams-app-with-bespoke-authentication","text":"This is parth of Path B, which begins with an application that uses an authorization system other than Azure AD. Are you on the right path? Expand these notes to find out! There are two options for doing the labs: The \"A\" path is for developers with apps that are already based on Azure Active Directory. The starting app uses Azure Active Directory and the Microsoft Authentication Library (MSAL). the \"B\" path is for developers with apps that use some other identity system. It includes a simple (and not secure!) cookie-based auth system based on the Employees table in the Northwind database. You will use an identity mapping scheme to allow your existing users to log in directly or via Azure AD Single Sign-On. In this lab you will build the application you created in Lab B01 into a Microsoft Teams application. This application will still use the Northwind authentication, but since the Northwind login page won't work in the Teams tab IFrame, we'll use the Teams JavaScript SDK to show it in a pop-up. B01-begin-app: Setting up the application B02-after-teams-login: Creating a Teams application (\ud83d\udccdYou are here) B03-after-teams-sso: Adding Azure AD SSO to your app B04-after-apply-styling: Teams styling and themes In this lab you will learn to: Create a Microsoft Teams app manifest and package that can be installed into Teams Use the Teams JavaScript SDK to display a login page in a pop-up window Install and test your application in Microsoft Teams Video briefing \"B Path\" Lab Briefing","title":"Lab B02: Teams App with Bespoke Authentication"},{"location":"bespoke/B02-after-teams-login/#features","text":"Microsoft Teams personal tab application displays the Northwind Orders web application Users sign into the Teams application using the existing Northwind login page Application alters its appearance (hides the top navigation) when running in Teams, allowing Teams tab navigation instead","title":"Features"},{"location":"bespoke/B02-after-teams-login/#project-structure","text":"Project files before and after this lab (open to display \u25ba) The project structure when you start of this lab and end of this lab is as follows. Use this depiction for comparison. On your left is the contents of folder B01-Start-BespokeAuth and on your right is the contents of folder B02-TeamsApp-BespokeAuth . - \ud83c\udd95 New files/folders \ud83d\udd3aFiles changed Project Structure Before Project Structure After B01-begin-app \u251c\u2500\u2500 client \u2502 \u251c\u2500\u2500 components \u2502 \u251c\u2500\u2500 \ud83d\udd3anavigation.js \u2502 \u2514\u2500\u2500 identity \u2502 \u251c\u2500\u2500 \ud83d\udd3aidentityClient.js \u2502 \u2514\u2500\u2500 login.html \u2502 \u2514\u2500\u2500 \ud83d\udd3alogin.js \u2502 \u2514\u2500\u2500 userPanel.js \u251c\u2500\u2500 modules \u2502 \u2514\u2500\u2500 env.js \u2502 \u2514\u2500\u2500 northwindDataService.js \u251c\u2500\u2500 pages \u2502 \u2514\u2500\u2500 categories.html \u2502 \u2514\u2500\u2500 categories.js \u2502 \u2514\u2500\u2500 categoryDetails.html \u2502 \u2514\u2500\u2500 categoryDetails.js \u2502 \u2514\u2500\u2500 myOrders.html \u2502 \u2514\u2500\u2500 orderDetail.html \u2502 \u2514\u2500\u2500 orderDetail.js \u2502 \u2514\u2500\u2500 privacy.html \u2502 \u2514\u2500\u2500 productDetail.html \u2502 \u2514\u2500\u2500 productDetail.js \u2502 \u2514\u2500\u2500 termsofuse.html \u251c\u2500\u2500 index.html \u251c\u2500\u2500 index.js \u251c\u2500\u2500 northwind.css \u251c\u2500\u2500 server \u2502 \u2514\u2500\u2500 constants.js \u2502 \u2514\u2500\u2500 identityService.js \u2502 \u2514\u2500\u2500 northwindDataService.js \u2502 \u2514\u2500\u2500 server.js \u251c\u2500\u2500 \ud83d\udd3a.env_Sample \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 \ud83d\udd3apackage.json \u251c\u2500\u2500 README.md B02-after-teams-login \u251c\u2500\u2500 client \u2502 \u251c\u2500\u2500 components \u2502 \u251c\u2500\u2500 \ud83d\udd3anavigation.js \u2502 \u2514\u2500\u2500 identity \u2502 \u251c\u2500\u2500 \ud83d\udd3aidentityClient.js \u2502 \u2514\u2500\u2500 login.html \u2502 \u2514\u2500\u2500 \ud83d\udd3alogin.js \u2502 \u2514\u2500\u2500 \ud83c\udd95teamsLoginLauncher.html \u2502 \u2514\u2500\u2500 \ud83c\udd95teamsLoginLauncher.js \u2502 \u2514\u2500\u2500 userPanel.js \u251c\u2500\u2500 modules \u2502 \u2514\u2500\u2500 env.js \u2502 \u2514\u2500\u2500 northwindDataService.js \u2502 \u2514\u2500\u2500 \ud83c\udd95teamsHelpers.js \u251c\u2500\u2500 pages \u2502 \u2514\u2500\u2500 categories.html \u2502 \u2514\u2500\u2500 categories.js \u2502 \u2514\u2500\u2500 categoryDetails.html \u2502 \u2514\u2500\u2500 categoryDetails.js \u2502 \u2514\u2500\u2500 myOrders.html \u2502 \u2514\u2500\u2500 orderDetail.html \u2502 \u2514\u2500\u2500 orderDetail.js \u2502 \u2514\u2500\u2500 privacy.html \u2502 \u2514\u2500\u2500 productDetail.html \u2502 \u2514\u2500\u2500 productDetail.js \u2502 \u2514\u2500\u2500 termsofuse.html \u251c\u2500\u2500 index.html \u251c\u2500\u2500 index.js \u251c\u2500\u2500 northwind.css \u251c\u2500\u2500 \ud83c\udd95manifest \u2502 \u2514\u2500\u2500 \ud83c\udd95makePackage.js \u2502 \u2514\u2500\u2500 \ud83c\udd95manifest.template.json \u2502 \u2514\u2500\u2500 \ud83c\udd95northwind32.png \u2502 \u2514\u2500\u2500 \ud83c\udd95northwind192.png \u251c\u2500\u2500 server \u2502 \u2514\u2500\u2500 constants.js \u2502 \u2514\u2500\u2500 identityService.js \u2502 \u2514\u2500\u2500 northwindDataService.js \u2502 \u2514\u2500\u2500 server.js \u251c\u2500\u2500 \ud83d\udd3a.env_Sample \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 \ud83d\udd3apackage.json \u251c\u2500\u2500 README.md","title":"Project structure"},{"location":"bespoke/B02-after-teams-login/#exercise-1-set-up-your-microsoft-365-subscription","text":"To run your application in Microsoft Teams, you'll need a Microsoft 365 subscription. In this exercise you'll acquire a free developer subscription and configure it so you can easily upload Teams applications.","title":"Exercise 1 Set up your Microsoft 365 Subscription"},{"location":"bespoke/B02-after-teams-login/#step-1-get-a-tenant","text":"If you don't yet have a tenant, please join the Microsoft 365 Developer Program to get a free one. Your tenant includes 25 E5 user licenses and can be renewed as long as you keep developing! Click \"Join now\" to begin. Log in with any Microsoft personal or work and school account, enter your information, and click \"Next\". You will have an opportunity to choose what kind of \"sandbox\" you want; the \"Instant sandbox\" is recommended. Follow the wizard and select your administrator username and password, tenant domain name, etc. The domain name you choose is just the left-most portion - for example if you enter \"Contoso\" your domain will be \"Contoso.onmicrosoft.com\". Remember this information as you'll need it throughout the labs! You will log in as @ .onmicrosoft.com with the password your chose. You'll be prompted for your phone number and then the system will set up your subscription. Eventually you'll be prompted to log into your new tenant. Be sure to use the new administrator credentials you just created, not the ones you used when you signed up for the developer program. Tip: Don't develop or do the labs in production! It may be tempting to build solutions right where you work every day, but there are good reasons to have a dedicated dev tenant - and probably additional staging/test tenants. They're free, and you can safely experiment as a tenant admin without risking your production work. More information Setting up your Microsoft 365 Development tenant Tip: Navigating many tenants Consider creating a browser profile for each tenant that will have its own favorites, stored credentials, and cookies so you can easily swtch between tenants as you work. You may be asked to enable multi-factor authentication (MFA) This is certainly a good idea! Just follow the instructions. If you really must turn off MFA, here are instructions .","title":"Step 1: Get a tenant"},{"location":"bespoke/B02-after-teams-login/#step-2-enable-teams-application-uploads","text":"By default, end users can't upload Teams applications directly; instead an administrator needs to upload them into the enterprise app catalog. In this step you will enable direct uploads to make developement easier and allow installation directly from the Teams user interface. a. In the left panel of the admin center, click \"Show all\" to open up the entire navigation When the panel opens, click Teams to open the Microsoft Teams admin center. b. In the left of the Microsoft Teams admin center, open the Teams apps accordion 1\ufe0f\u20e3 and select Setup Policies 2\ufe0f\u20e3. You will see a list of App setup policies. Click the Global (Org-wide default) policy 3\ufe0f\u20e3. c. Ensure the first switch, \"Upload custom apps\" is turned On. Be sure to scroll down and click the \"Save\" button to persist your change. We have been working to get this enabled by default on developer tenants, so it may already be set for you. The change can take up to 24 hours to take effect, but usually it's much faster. ### Exercise 2: Start ngrok and obtain the ngrok URL","title":"Step 2: Enable Teams application uploads"},{"location":"bespoke/B02-after-teams-login/#step-1-start-ngrok","text":"Before you can register your application, you will need to start ngrok to obtain the URL for your application. Run this command in the command line tool of your choice: ngrok http 3978 -host-header=localhost The terminal will display a screen like this; note the https forwarding URL for use in this lab. Save this URL for use throughout the labs. Warning Do not stop ngrok for the duration of these labs. If you do stop ngrok and are assigned a new URL, this page lists all the exercises which involve the ngrok URL so you can easily update it.","title":"Step 1: Start ngrok"},{"location":"bespoke/B02-after-teams-login/#exercise-3-create-the-teams-application-package","text":"Microsoft Teams applications don't run \"inside\" of Microsoft Teams, they just appear in the Teams user interface. A tab in Teams is just a web page which could be hosted anywhere as long as the Teams client can reach it. To create a Teams application, you need to create a file called manifest.json which contains the information Teams needs to display the app, such as the URL of the Northwind Orders application. This file is placed in a .zip file along with the application icons, and the resulting application package is uploaded into Teams or distributed through the Teams app store. In this exercise you'll create a manifest.json file and application package for the Northwind Orders app and upload it into Microsoft Teams.","title":"Exercise 3: Create the Teams application package"},{"location":"bespoke/B02-after-teams-login/#step-1-copy-the-manifest-folder-to-your-working-directory","text":"Many developers use the Teams Developer Portal to create an app package; this is preferred by many enterprise developer and systems integrators. However ISV's may want to keep the app package settings in their source control system, and that's the approach used in the lab. It's just a zip file; you can create it any way you want! Go to your local copy of the B02-TeamsApp-BespokeAuth folder on your computer and copy the manifest folder into the working folder you used in the previous lab. This folder contains a template for building the manifest.json file.","title":"Step 1: Copy the manifest folder to your working directory"},{"location":"bespoke/B02-after-teams-login/#step-2-examine-the-manifest-template","text":"In the manifest folder you just copied, open manifest.template.json in your code editor. This is the JSON that Teams needs to display your application. Notice that the template contains tokens such as <HOST_NAME> and <TEAMS_APPI_D> . A small build script will take these values from your .env file and plug them into the manifest. However the token <TEAMS_APP_ID> is not yet in the .env file; we'll add that in the next step. Examine the staticTabs property in the manifest. It defines two tabs, one for the \"My Orders\" page and one for the \"Products\" page. The contentUrl is used within the Teams application, and websiteUrl is used if Teams can't render the tab and needs to launch it in a regular web browser. The Northwind Orders app will use the same code URL's for both. \"staticTabs\": [ { \"entityId\": \"Orders\", \"name\": \"My Orders\", \"contentUrl\": \"https://<HOST_NAME>/pages/myOrders.html\", \"websiteUrl\": \"https://<HOST_NAME>/pages/myOrders.html\", \"scopes\": [ \"personal\" ] }, { \"entityId\": \"Products\", \"name\": \"Products\", \"contentUrl\": \"https://<HOST_NAME>/pages/categories.html\", \"websiteUrl\": \"https://<HOST_NAME>/pages/categories.html\", \"scopes\": [ \"personal\" ]","title":"Step 2: Examine the manifest template"},{"location":"bespoke/B02-after-teams-login/#step-3-add-the-teams-app-id-to-the-env-file","text":"Open the .env file in your working directory and add these lines, using the ngrok URL: TEAMS_APP_ID=1331dbd6-08eb-4123-9713-017d9e0fc04a HOST_NAME=<something>.ngrok.io You should generate a different GUID for each application you register; this one is just here for your convenience. We could have hard-coded the app ID in the manifest.json template, but there are times when you need it in your code, so this will make that possible in the future.","title":"Step 3: Add the Teams App ID to the .env file"},{"location":"bespoke/B02-after-teams-login/#step-4-update-your-packagejson-file","text":"Open the package.json file in your working directory and add a script that will generate the app package. The script code is in the manifest folder you just copied, so we just need to declare it in package.json. This is what scripts property should look like when you're done. \"scripts\": { \"start\": \"nodemon server/server.js\", \"debug\": \"nodemon --inspect server/server.js\", \"package\": \"node manifest/makePackage.js\" }, The script uses an npm package called \"adm-zip\" to create the .zip file, so you need to add that as a development dependency. Update the devDependencies property to include it like this: \"devDependencies\": { \"@types/express\": \"^4.17.2\", \"@types/request\": \"^2.48.3\", \"nodemon\": \"^2.0.13\", \"adm-zip\": \"^0.4.16\" } Then, from a command line in your working directory, install the package by typing npm install","title":"Step 4: Update your package.json file"},{"location":"bespoke/B02-after-teams-login/#step-5-build-the-package","text":"Now you can build a new package at any time with this command: npm run package Go ahead and run it, and two new files, manifest.json and northwind.zip (the app package) should appear in your manifest folder.","title":"Step 5: Build the package"},{"location":"bespoke/B02-after-teams-login/#exercise-3-modify-the-application-source-code","text":"If you were to run the application as-is in Microsoft Teams, you'd see this error message: The reason for this is that most login pages, including this one, contain code to detect if they're running in an IFrame and refuse to work. This is due to security concerns; for example a parent page could overlay content on top of the IFrame to capture the user's password. While the Northwind authentication scheme is for demonstration only and isn't really secure, it does (realistically) refuse to run in IFrame that hosts your Teams tab. In this exercise you'll add code to move the login page into a separate popup window.","title":"Exercise 3: Modify the application source code"},{"location":"bespoke/B02-after-teams-login/#step-1-add-a-module-with-teams-helper-functions","text":"Create a file called teamsHelpers.js in the client/modules folder, and paste in this code: import 'https://res.cdn.office.net/teams-js/2.0.0/js/MicrosoftTeams.min.js'; let teamsInitPromise; export function ensureTeamsSdkInitialized() { if (!teamsInitPromise) { teamsInitPromise = microsoftTeams.app.initialize(); } return teamsInitPromise; } // async function returns true if we're running in Teams export async function inTeams() { try { await ensureTeamsSdkInitialized(); const context = await microsoftTeams.app.getContext(); return (context.app.host.name === microsoftTeams.HostName.teams); } catch (e) { console.log(`${e} from Teams SDK, may be running outside of Teams`); return false; } } These functions are used throughout the application to manage the Microsoft Teams JavaScript SDK. Before using the Microsoft Teams JavaScript SDK for the first time on a page, you need to call the microsoftTeams.app.initialize() function. The first function in teamsHelpers.js will ensure that initialize() has been called exactly once on the page. The inTeams() function is used to determine if the application is running in Microsoft Teams or not. You may want to check out the microsoftTeams.Hostname enumeration to see other places where Teams applications will be able to run in the near future!","title":"Step 1: Add a module with Teams helper functions"},{"location":"bespoke/B02-after-teams-login/#step-2-add-a-teams-launcher-page","text":"When running in Microsoft Teams, we want the login page to run in a popup instead of in the main application window (which is an IFrame). In most web browsers, launching a popup requires the user to take some kind of action such as pushing a button; this rule was introduced after some web sites launched dozens of popups as soon as they opened. The Teams launcher page contains a button the user can push to open the popup. In your working folder, create a new file /client/identity/teamsLoginLauncher.html and paste this markup inside. (Alternately, you can copy the file from the B02-TeamsApp-BespokeAuth/client/identity folder). <!doctype html> <html> <head> <meta charset=\"UTF-8\" /> <title>Northwind Login Page</title> <link rel=\"stylesheet\" href=\"/northwind.css\" /> <link rel=\"icon\" href=\"data:;base64,=\"> <!-- Suppress favicon error --> </head> <body> <h2>Northwind Login (Teams)</h2> <br /> <div id=\"teamsLoginLauncher\"> <button id=\"teamsLoginLauncherButton\">Log in</button> </div> <div id=\"message\" class=\"errorMessage\"></div> <script type=\"module\" src=\"/identity/teamsLoginLauncher.js\"></script> </body> </html> Now create a corresponding JavaScript file, /client/identity/teamsLoginLauncher.js, or copy it from the B02-TeamsApp-BespokeAuth/client/identity folder: import 'https://res.cdn.office.net/teams-js/2.0.0/js/MicrosoftTeams.min.js'; import { ensureTeamsSdkInitialized } from '../modules/teamsHelpers.js'; const teamsLoginLauncherButton = document.getElementById('teamsLoginLauncherButton'); teamsLoginLauncherButton.addEventListener('click', async ev => { await ensureTeamsSdkInitialized(); await microsoftTeams.authentication.authenticate({ url: `${window.location.origin}/identity/login.html?teams=true`, width: 600, height: 535, }); window.location.href = document.referrer; }); The import statement loads the Teams JavaScript SDK, which is available for bundled apps as an npm package. In this case we're loading the CDN link (we could have used a <script> tag but we'd have to modify every page in the application). Since the Teams JavaScript SDK is packaged as a script and not a module (it has no export s), we will access the SDK using a global object microsoftTeams . The call to microsoftTeams.authenticatation.authenticate() is what launches the popup winodow.The popup will contain the same login page with minor modifications; these are applied in the next step. If the login is successful, the page will call an SDK function notifySuccess() , which will cause the successCallback to run and send the user to their originally requested page.","title":"Step 2: Add a Teams launcher page"},{"location":"bespoke/B02-after-teams-login/#step-3-modify-the-login-page","text":"The only change needed in the login page is to return the logged in user credentials (the employee ID) to the teamsLoginLauncher page you added in the previous step. To do this, add this import statement at the top of /client/identity/login.js: import 'https://res.cdn.office.net/teams-js/2.0.0/js/MicrosoftTeams.min.js'; Now in the logInUser() function replace the line of code window.location.href = document.referrer; with this: if (window.location.search.indexOf('teams=true') >= 0) { await microsoftTeams.app.initialize(); microsoftTeams.authentication.notifySuccess(employeeId); } else { window.location.href = document.referrer; } This will check if it's running in Teams (using a query string this time; we may replace that with a call to inTeams() in a future version. Note that this page runs in its own popup so we don't have to worry about calling initialize() more than once, we can just call it directly. If the login is successful and running in Teams, it calls the Teams JavaScript SDK function notifySuccess() to return the employee ID to the launcher page. The finished login.js should look like this: import { validateEmployeeLogin, setLoggedinEmployeeId } from './identityClient.js'; import 'https://res.cdn.office.net/teams-js/2.0.0/js/MicrosoftTeams.min.js'; const loginPanel = document.getElementById('loginPanel'); const usernameInput = document.getElementById('username'); const passwordInput = document.getElementById('password'); const loginButton = document.getElementById('loginButton'); const messageDiv = document.getElementById('message'); const hintUL = document.getElementById('hintList'); if (window.location !== window.parent.location) { // The page is in an iframe - refuse service messageDiv.innerText = \"ERROR: You cannot run this app in an IFrame\"; } else { loginPanel.style.display = 'inline'; loginButton.addEventListener('click', logInUser); loginPanel.addEventListener('keypress', async function (e) { if (e.key === 'Enter') { await logInUser(); } }); async function logInUser (ev) { messageDiv.innerText = \"\"; const employeeId = await validateEmployeeLogin( usernameInput.value, passwordInput.value ); if (employeeId) { setLoggedinEmployeeId(employeeId); if (window.location.search.indexOf('teams=true') >= 0) { await microsoftTeams.app.initialize(); microsoftTeams.authentication.notifySuccess(employeeId); } else { window.location.href = document.referrer; } } else { messageDiv.innerText = \"Error: user not found\"; } } }","title":"Step 3: Modify the login page"},{"location":"bespoke/B02-after-teams-login/#step-4-modify-the-logoff-code","text":"The logoff code simply sets the login cookie to 0 and directs the user back to the login page. To accomodate the application running in Microsoft teams, this function needs to check if it's running in Teams and send the user to the teamsLauncher.html page we created in Step 2. Open the /client/identity/identityClient.js file in your code editor and add this line at the top. import { inTeams } from '../modules/teamsHelpers.js'; Replace the logoff() function with this code to redirect to the launcher when the app is running in Teams. export async function logoff() { setLoggedinEmployeeId(0); // Redirect to the login page if (!(await inTeams())) { window.location.href = \"/identity/login.html\"; } else { window.location.href = \"/identity/teamsLoginLauncher.html\"; } }","title":"Step 4: Modify the logoff code"},{"location":"bespoke/B02-after-teams-login/#step-5-hide-the-navigation-within-teams","text":"Microsoft Teams already has multiple levels of navigation, including multiple tabs as configured in the previous exercise. So the applications' built-in navigation is redundant in Teams. To hide the built-in navigation in Teams, open the client/components/navigation.js file and add this import statement at the top. import { inTeams } from '../modules/teamsHelpers.js'; Now modify the connectedCallback() function, which displays the navigation web component, to skip rendering if it's running in Teams. The resulting function should look like this: async connectedCallback() { if (!(await inTeams())) { let listItemHtml = \"\"; topNavLinks.forEach(link => { if (window.location.href.indexOf(link.url) < 0) { listItemHtml += '<li><a href=\"' + link.url + '\">' + link.text + '</a></li>'; } else { return listItemHtml += '<li><a href=\"' + link.url + '\" class=\"selected\">' + link.text + '</a></li>'; } }); this.innerHTML = ` <ul class=\"topnav\">${listItemHtml}</ul> `; } } About web components Web components are encapsulated custom HTML elements. They're not a Teams thing, nor do they use React or another UI library; they're built right into modern web browsers! You can learn more in this article","title":"Step 5: Hide the navigation within Teams"},{"location":"bespoke/B02-after-teams-login/#exercise-4-test-your-application-in-microsoft-teams","text":"","title":"Exercise 4: Test your application in Microsoft Teams"},{"location":"bespoke/B02-after-teams-login/#step-1-start-the-application","text":"Now it's time to run your updated application and run it in Microsoft Teams. Start the application with this command: npm start","title":"Step 1: Start the application"},{"location":"bespoke/B02-after-teams-login/#step-2-upload-the-app-package","text":"In the Teams web or desktop UI, click \"Apps\" in the sidebar 1\ufe0f\u20e3, then \"Manage your apps\" 2\ufe0f\u20e3. At this point you have three choices: Upload a custom app (upload the app for yourself or a specific team or group chat) - this only appears if you have enabled \"Upload custom apps\" in your setup policy; this was a step in the previous lab Upload an app to your org's app catalog (upload the app for use within your organization) - this only appears if you are a tenant administrator Submit an app to your org (initiate a workflow asking a tenant administrator to install your app) - this appears for everyone In this case, choose the first option 3\ufe0f\u20e3. Navigate to the Northwind.zip file in your manifest directory and upload it. Teams will display the application information; click the \"Add\" button to install it for your personal use.","title":"Step 2: Upload the app package"},{"location":"bespoke/B02-after-teams-login/#step-3-run-the-application","text":"The application should appear without any login prompt. The app's navigation should not be displayed; instead users can navigate to \"My Orders\" or \"Products\" using the tabs in the Teams app. function showCompletionPopup() { let path = window.location.pathname; path = path.endsWith('/') ? path.slice(0, -1) : path; let pathArray = path.split('/'); let leafFolder = pathArray[pathArray.length-1]; let height = window.outerHeight / 1.5; let width = window.outerWidth / 2; window.open(`${window.origin}/app-camp/congrats/${leafFolder}`, 'Congratulations!', `width=${width}, height=${height}, left=100, top=100,`); }","title":"Step 3: Run the application"},{"location":"bespoke/B02-after-teams-login/#congratulations","text":"When you have finished this lab, please click this button to let us know! No personal information is collected; we only want to count how many people have completed the labs so we can continue to fund this work!","title":"Congratulations!"},{"location":"bespoke/B02-after-teams-login/#known-issues","text":"While it will work on mobile devices, the application is not responsive and will not look good on these devices. This may be addressed in a future version of the lab. For the latest issues, or to file a bug report, see the github issues list for this repository.","title":"Known issues"},{"location":"bespoke/B03-after-teams-sso/","text":"(function(c,l,a,r,i,t,y){ c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)}; t=l.createElement(r);t.async=1;t.src=\"https://www.clarity.ms/tag/\"+i; y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y); })(window, document, \"clarity\", \"script\", \"dfh6fjbr5x\"); Lab B03: Enable Azure AD Single Sign-On This is parth of Path B, which begins with an application that uses an authorization system other than Azure AD. Are you on the right path? Expand these notes to find out! There are two options for doing the labs: The \"A\" path is for developers with apps that are already based on Azure Active Directory. The starting app uses Azure Active Directory and the Microsoft Authentication Library (MSAL). the \"B\" path is for developers with apps that use some other identity system. It includes a simple (and not secure!) cookie-based auth system based on the Employees table in the Northwind database. You will use an identity mapping scheme to allow your existing users to log in directly or via Azure AD Single Sign-On. In this lab you will build the application you created in Lab B01 into a Microsoft Teams application. This application will still use the Northwind authentication, but since the Northwind login page won't work in the Teams tab IFrame, we'll use the Teams JavaScript SDK to show it in a pop-up. Note that as you complete the labs, the original app should still work outside of Teams! This is often a requirement of ISV's who have an app in market and need to serve an existing customer base outside of Teams. B01-begin-app: Setting up the application B02-after-teams-login: Creating a Teams application B03-after-teams-sso: Adding Azure AD SSO to your app (\ud83d\udccdYou are here) B04-after-apply-styling: Teams styling and themes In this lab you will learn to: Register an application with the Microsoft identity platform Configure ans Azure AD app registration to allow Teams to issue tokens on behalf of your application Use the Microsoft Teams JavaScript SDK to request an Azure AD access token How to validate an Azure AD access token in a NodeJS application Video briefing \"B Path\" Lab Briefing Features Microsoft Teams personal tab application transparently logs the user in The first time a user accesses the application, it prompts them for their Northwind credentials and writes their Northwind employee ID into the user's profile in Azure AD After that, the application reads the employee ID from Azure AD to decide which orders to show Project structure Project files before and after this lab (open to display \u25ba) The project structure when you start of this lab and end of this lab is as follows. Use this depiction for comparison. On your left is the contents of folder B02-after-teams-login and on your right is the contents of folder B03-after-teams-sso . - \ud83c\udd95 New files/folders \ud83d\udd3aFiles changed Project Structure Before Project Structure After B02-after-teams-login \u251c\u2500\u2500 client \u2502 \u251c\u2500\u2500 components \u2502 \u251c\u2500\u2500 navigation.js \u2502 \u2514\u2500\u2500 identity \u2502 \u251c\u2500\u2500 \ud83d\udd3aidentityClient.js \u2502 \u2514\u2500\u2500 login.html \u2502 \u2514\u2500\u2500 \ud83d\udd3alogin.js \u2502 \u2514\u2500\u2500 teamsLoginLauncher.html \u2502 \u2514\u2500\u2500 teamsLoginLauncher.js \u2502 \u2514\u2500\u2500 userPanel.js \u251c\u2500\u2500 modules \u2502 \u2514\u2500\u2500 env.js \u2502 \u2514\u2500\u2500 northwindDataService.js \u2502 \u2514\u2500\u2500 teamsHelpers.js \u251c\u2500\u2500 pages \u2502 \u2514\u2500\u2500 categories.html \u2502 \u2514\u2500\u2500 categories.js \u2502 \u2514\u2500\u2500 categoryDetails.html \u2502 \u2514\u2500\u2500 categoryDetails.js \u2502 \u2514\u2500\u2500 myOrders.html \u2502 \u2514\u2500\u2500 orderDetail.html \u2502 \u2514\u2500\u2500 orderDetail.js \u2502 \u2514\u2500\u2500 privacy.html \u2502 \u2514\u2500\u2500 productDetail.html \u2502 \u2514\u2500\u2500 productDetail.js \u2502 \u2514\u2500\u2500 termsofuse.html \u251c\u2500\u2500 index.html \u251c\u2500\u2500 index.js \u251c\u2500\u2500 northwind.css \u251c\u2500\u2500 manifest \u2502 \u2514\u2500\u2500 \ud83d\udd3amakePackage.js \u2502 \u2514\u2500\u2500 \ud83d\udd3amanifest.template.json \u2502 \u2514\u2500\u2500 northwind32.png \u2502 \u2514\u2500\u2500 northwind192.png \u251c\u2500\u2500 server \u2502 \u2514\u2500\u2500 constants.js \u2502 \u2514\u2500\u2500 \ud83d\udd3aidentityService.js \u2502 \u2514\u2500\u2500 northwindDataService.js \u2502 \u2514\u2500\u2500 server.js \u251c\u2500\u2500 \ud83d\udd3a.env_Sample \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 \ud83d\udd3apackage.json \u251c\u2500\u2500 README.md B03-after-teams-sso \u251c\u2500\u2500 client \u2502 \u251c\u2500\u2500 components \u2502 \u251c\u2500\u2500 navigation.js \u2502 \u2514\u2500\u2500 identity \u2502 \u251c\u2500\u2500 \ud83c\udd95aadLogin.html \u2502 \u2514\u2500\u2500 \ud83c\udd95aadLogin.js \u2502 \u251c\u2500\u2500 \ud83d\udd3aidentityClient.js \u2502 \u2514\u2500\u2500 login.html \u2502 \u2514\u2500\u2500 \ud83d\udd3alogin.js \u2502 \u2514\u2500\u2500 teamsLoginLauncher.html \u2502 \u2514\u2500\u2500 teamsLoginLauncher.js \u2502 \u2514\u2500\u2500 userPanel.js \u251c\u2500\u2500 modules \u2502 \u2514\u2500\u2500 env.js \u2502 \u2514\u2500\u2500 northwindDataService.js \u2502 \u2514\u2500\u2500 teamsHelpers.js \u251c\u2500\u2500 pages \u2502 \u2514\u2500\u2500 categories.html \u2502 \u2514\u2500\u2500 categories.js \u2502 \u2514\u2500\u2500 categoryDetails.html \u2502 \u2514\u2500\u2500 categoryDetails.js \u2502 \u2514\u2500\u2500 myOrders.html \u2502 \u2514\u2500\u2500 orderDetail.html \u2502 \u2514\u2500\u2500 orderDetail.js \u2502 \u2514\u2500\u2500 privacy.html \u2502 \u2514\u2500\u2500 productDetail.html \u2502 \u2514\u2500\u2500 productDetail.js \u2502 \u2514\u2500\u2500 termsofuse.html \u251c\u2500\u2500 index.html \u251c\u2500\u2500 index.js \u251c\u2500\u2500 northwind.css \u251c\u2500\u2500 manifest \u2502 \u2514\u2500\u2500 \ud83d\udd3amakePackage.js \u2502 \u2514\u2500\u2500 \ud83d\udd3amanifest.template.json \u2502 \u2514\u2500\u2500 northwind32.png \u2502 \u2514\u2500\u2500 northwind192.png \u251c\u2500\u2500 server \u2502 \u2514\u2500\u2500 constants.js \u2502 \u2514\u2500\u2500 \ud83d\udd3aidentityService.js \u2502 \u2514\u2500\u2500 northwindDataService.js \u2502 \u2514\u2500\u2500 server.js \u251c\u2500\u2500 \ud83d\udd3a.env_Sample \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 \ud83d\udd3apackage.json \u251c\u2500\u2500 README.md Exercise 1: Register your application with Azure AD In order for users to log into your application with Azure AD, you need to register it. In this exercise you will register your application directly in the tenant you created in Lab B02, however we'll set it up so it can be used from other tenants, such as those of customers who purchase your application in the Microsoft Teams store. More information Learn about multi-tenant applications Step 1: Register your application in Azure Active Directory Navigate to the Microsoft 365 admin center at https://admin.microsoft.com/ and log in as the administrator of your developer tenant. In the left navigation, click \"Show More\" to reveal the full list of admin centers, and then click \"Azure Active Directory\". This will bring you to the Azure AD admin center . Click \"Azure Active Directory\" again in the left navigation bar. This will bring you to the overview of your Azure AD tenant. Note that a \"tenant\" is a single instance of Azure Active Directory, with its own users, groups, and app registrations. Verify that you're in the developer tenant you just created, and click \"App Registrations\" in the navigation bar. You will be shown a list of applications (if any) registered in the tenant. Click \"+ New Registration\" at the top to register a new application. You will be presented with the \"Register an application\" form. Enter a name for your application 1\ufe0f\u20e3. Under \"Supported account types\" select \"Accounts in any organizational directory\" 2\ufe0f\u20e3. This will allow your application to be used in your customer's tenants. Under \"Redirect URI\", select \"Single-page application (SPA)\" 3\ufe0f\u20e3 and enter the ngrok URL you saved earlier 4\ufe0f\u20e3. Click the \"Register\" button 5\ufe0f\u20e3 You will be presented with the application overview. There are two values on this screen you need to copy for use later on; those are the Application (client) ID 1\ufe0f\u20e3 and the Directory (tenant) ID 2\ufe0f\u20e3. When you've recorded these values, navigate to \"Certificates & secrets\" 3\ufe0f\u20e3. Now you will create a client secret, which is like a password for your application to use when it needs to authenticate with Azure AD. Click \"+ New client secret\" 1\ufe0f\u20e3 Enter a description 2\ufe0f\u20e3 and select an expiration date 3\ufe0f\u20e3 for your secret Click \"Add\" to add your secret. 4\ufe0f\u20e3 The secret will be displayed just this once on the \"Certificates and secrets\" screen. Copy it now and store it in a safe place. Managing app secrets is an ongoing responsibility App secrets have a limited lifetime, and if they expire your application may stop working. You can have multiple secrets, so plan to roll them over as you would with a digital certificate. Keep your secrets secret! Give each developer a free developer tenant and register their apps in their tenants so each developer has his or her own app secrets. Limit who has access to app secrets for production. If you're running in Microsoft Azure, a great place to store your secrets is Azure KeyVault . You could deploy an app just like this one and store sensitive application settings in Keyvault. See this article for more information. Step 2: Grant your application permission to call the Microsoft Graph API The app registration created an identity for your application; now we need to give it permission to call the Microsoft Graph API. The Microsoft Graph is a RESTful API that allows you to access data in Azure AD and Microsoft 365, including Microsoft Teams. While still in the app registration, navigate to \"API Permissions\" 1\ufe0f\u20e3. Notice that User.Read delegated permission for the Microsoft Graph API has automatically been placed on the list 2\ufe0f\u20e3; this is exactly the permission we need to read the user's profile. The permission was added automatically, but nobody has consented to it 1\ufe0f\u20e3. To fix this, click the \"Grant admin consent for \" button and then agree to grant the consent 2\ufe0f\u20e3. When this is complete, the message \"Granted for \" should be displayed for each permission. Step 3: Expose an API The Northwind Orders app is a full stack application, with code running in the web browser and web server. The browser application accesses data by calling a web API on the server side. To allow this, we need to expose an API in our Azure AD application. This will allow the server to validate Azure AD access tokens from the web browser. Click \"Expose an API\" 1\ufe0f\u20e3 and then \"Add a scope\"2\ufe0f\u20e3. Scopes expose an application's permissions; what you're doing here is adding a permission that your application's browser code can use it when calling the server. On the \"Add a scope\" flyout, edit the Application ID URI to include your ngrok URL between the \"api://\" and the client ID. Click the \"Save and continue\" button to proceed. Now that you've defined the application URI, the \"Add a scope\" flyout will allow you to set up the new permission scope. Fill in the form as follows: - Scope name: access_as_user - Who can consent: Admins only - Admin consent display name: Access as the logged in user - Admin consent description: Access Northwind services as the logged in user - (skip User consent fields) - Ensure the State is set to \"Enabled\" - Click \"Add scope\" Step 4: Authorize Microsoft Teams to log users into your application Microsoft Teams provides a Single Sign-On (SSO) capability so users are silently logged into your application using the same credentials they used to log into Microsoft Teams. This requires giving Microsoft Teams permission to issue Azure AD tokens on behalf of your application. In this step, you'll provide that permission. Click \"Expose an API\" 1\ufe0f\u20e3 and then \"+ Add a client application\" 2\ufe0f\u20e3. Paste the ID for the Teams mobile or desktop app, 1fec8e78-bce4-4aaf-ab1b-5451cc387264 into the flyout 1\ufe0f\u20e3 and check the scope you created earlier 2\ufe0f\u20e3 to allow Teams to issue tokens for that scope. Then click \"Add application\" 3\ufe0f\u20e3 to save your work. Repeat the process for the Teams web application, 5e3ce6c0-2b1f-4285-8d4b-75ee78787346 . Exercise 2: Update the Teams application package You've given Microsoft Teams permission to issue an Azure AD access token to your application (single sign-on), but Microsoft Teams doesn't know about that. To provide the information Teams needs, we need to update the Teams Application package. Step 1: Add the Azure AD information to the .env file Open the .env file in your working directory and add these lines, filling in the information you saved during the app registration: TENANT_ID=00000000-0000-0000-0000-000000000000 CLIENT_ID=00000000-0000-0000-0000-000000000000 CLIENT_SECRET=xxxxx Step 2: Add the Azure AD information to your manifest In your working directory, edit the manifest/manifest.template.json file. Update the revision number to a larger version number: \"version\": \"1.3.0\", Add a comma after the validDomains property and then add a new property, webApplicationInfo . \"webApplicationInfo\": { \"id\": \"<CLIENT_ID>\", \"resource\": \"api://<HOST_NAME>/<CLIENT_ID>\" } This provides the Azure AD app registration information to Microsoft Teams for use in the SSO process. The finished manifest.template.json file is here for your reference. Step 3: Modify the packaging code to include the CLIENT_ID Open the file manifest/makePackage.js in your code editor. Notice that the code only makes a few of the environment variables available when it creates manifest.json. We just added some references to CLIENT_ID , so we need to handle them in the makePackage.js code. In the if statement where the code checks for the TEAMS_APP_ID and HOST_NAME environment variables, add the CLIENT_ID as well like this: Object.keys(process.env).forEach((key) => { if (key.indexOf('TEAMS_APP_ID') === 0 || key.indexOf('HOST_NAME') === 0 || key.indexOf('CLIENT_ID') === 0) { data = data.split(`<${key}>`).join(process.env[key]); console.log (`Inserted ${key} value of ${process.env[key]}`); } }); Step 4: Rebuild the package Now you can build a new package at any time with this command: npm run package Go ahead and run it, and two files, manifest.json and northwind.zip (the app package) should be updated in your manifest folder. Exercise 3: Update the application source code Step 1: Update your package.json file The updated code will use two new npm packages on the server side: @azure/msal-node: Allows login to Azure AD from your web server; this is needed when calling the Microsoft Graph API to read and write the user's employee ID. azure-ad-jwt: Validates an Azure AD access token sent by the client side code To accommodate this, open the package.json file in your working directory and update the dependencies property to include these packages like this: \"dependencies\": { \"@azure/msal-node\": \"^1.5.0\", \"azure-ad-jwt\": \"^1.1.0\", \"cookie-parser\": \"^1.4.6\", \"dotenv\": \"^10.0.0\", \"express\": \"^4.17.1\", \"node-fetch\": \"^3.1.1\", \"request\": \"^2.88.0\" }, Then, from a command line in your working directory, install the package by typing npm install Step 2: Add an identity mapping screen When a user logs into the app for the first time, we will log them into both Azure AD and the Northwind login scheme and save their Northwind employee ID in the Azure AD user profile. This is just one of many approaches; an application could save the Azure AD user ID and another system's user ID in a database, or it could save the Azure AD user ID in the user's profile within the other authentication. Any way you do it, the idea is to create a linkage between each Azure AD user and their user profile in the other identity service. In this step, you'll add a new web page to handle this identity mapping. If the application reads the Azure AD user's employee ID and it's blank, the user will be redirected here. In your working folder, create a file /client/identity/aadLogin.html and paste in this markup: <!doctype html> <html> <head> <meta charset=\"UTF-8\" /> <title>Northwind Login Page</title> <link rel=\"stylesheet\" href=\"/northwind.css\" /> <link rel=\"icon\" href=\"data:;base64,=\"> <!-- Suppress favicon error --> </head> <body> <div id=\"teamsLoginLauncher\" style=\"display:none\"> <h2>Northwind Login (AAD Mapping)</h2> <br /> <p>Please log in using your Northwind employee login it to link your Microsoft Teams login.</p> <button id=\"teamsLoginLauncherButton\">Log in</button> </div> <div id=\"message\" class=\"errorMessage\"></div> <script type=\"module\" src=\"/identity/aadLogin.js\"></script> </body> </html> Now create another file, /client/identity/aadLogin.js and insert this code: import 'https://res.cdn.office.net/teams-js/2.0.0/js/MicrosoftTeams.min.js'; import { ensureTeamsSdkInitialized } from '../modules/teamsHelpers.js'; import { setLoggedinEmployeeId } from './identityClient.js'; (async () => { const teamsLoginLauncher = document.getElementById('teamsLoginLauncher'); const teamsLoginLauncherButton = document.getElementById('teamsLoginLauncherButton'); await ensureTeamsSdkInitialized(); const authToken = await microsoftTeams.authentication.getAuthToken(); const response = await fetch(`/api/validateAadLogin`, { \"method\": \"post\", \"headers\": { \"content-type\": \"application/json\", \"authorization\": `Bearer ${authToken}` }, \"body\": JSON.stringify({ \"employeeId\": 0 }), \"cache\": \"no-cache\" }); if (response.ok) { const data = await response.json(); if (data.employeeId) { // If here, AAD user was mapped to a Northwind employee ID setLoggedinEmployeeId(data.employeeId); window.location.href = document.referrer; } } else if (response.status === 404) { // If here, AAD user logged in but there was no mapping to an employee ID. // Get one now using the bespoke authentication teamsLoginLauncherButton.addEventListener('click', async ev => { // First, launch the original login page to get the user credentials const northwindCredentials = await microsoftTeams.authentication.authenticate({ url: `${window.location.origin}/identity/login.html?teams=true`, width: 600, height: 535 }); // Now call the server with BOTH the Azure AD and original credentials // Server is responsible for linking them in its database for next time const response = await fetch(`/api/validateAadLogin`, { \"method\": \"post\", \"headers\": { \"content-type\": \"application/json\", \"authorization\": `Bearer ${authToken}` }, \"body\": JSON.stringify({ \"username\": northwindCredentials.username, \"password\": northwindCredentials.password }), \"cache\": \"no-cache\" }); // Now log the user in with the bespoke system setLoggedinEmployeeId(northwindCredentials.employeeId); window.location.href = document.referrer; }); teamsLoginLauncher.style.display = \"inline\"; } else { console.log(`Error ${response.status} on /api/validateAadLogin: ${response.statusText}`); } })(); This code uses the Teams JavaScript SDK to obtain an Azure AD token using microsoftTeams.authentication.getAuthToken() , and then it calls the server side at /api/validateAadLogin using this token. The server will read the user's employeeId and return it. If the employee ID is not found, the server returns an HTTP 404 error and the code prompts the user to log in via the Northwind login page. When the user logs in, the code passes his or her credentials back to /api/validateAadLogin, which looks up the employeeId and writes it to the user's profile. Step 3: Return the username and password from the login page Open the file /client/identity/login.js in your code editor, and find the call to notifySuccess() . Modify it to return the username and password so the aadLogin.html page can provide it to the server. microsoftTeams.authentication.notifySuccess({ username: usernameInput.value, password: passwordInput.value, employeeId: employeeId }); The completed login script is here at B03-after-teams-sso/client/identity/login.js Step 4: Modify the logoff code Logging off in this new version of the Teams app will be a very transitory thing, because the user will immediately be logged back on again! However we'll leave it in place for testing purposes. Open the file client/identity/identityClient.js in your code editor and change the line: window.location.href = \"/identity/teamsLoginLauncher.html\"; to: window.location.href = \"/identity/aadLogin.html\"; Step 5: Nodify the identity server code Now that the client code has been updated, it's time to modify the server code to handle the /api/validateAadLogin call from the client. To do that, open the file /server/identityService.js in your code editor and add these lines at the top: import aad from 'azure-ad-jwt'; import { dbService } from '../northwindDB/dbService.js'; const db = new dbService(); This will import two node packages: azure-ad-jwt - this package validates an Azure AD access token dbService - this is the module that handles the JSON database, so we can write the mapping between Azure AD user ID's and Northwind Employee ID's there. Then locate the function initializeIdentityService() and add these lines near the bottom of the function, just above the app.use('/api/', validateApiRequest); statement. // Web service validates an Azure AD login app.post('/api/validateAadLogin', async (req, res) => { try { const employeeId = await validateAndMapAadLogin(req, res); if (employeeId) { res.send(JSON.stringify({ \"employeeId\": employeeId })); } else { res.status(401).send('Unknown authentication failure'); } } catch (error) { console.log(`Error in /api/validateAadLogin handling: ${error.statusMessage}`); res.status(error.status).json({ status: error.status, statusText: error.statusMessage }); } }); This code will handle the call to /api/validateAadLogin but the real work is done in another function, validateAndMapAadLogin() . Next, add this code at the bottom of identityService.js. // validateAndMapAadLogin() - Returns an employee ID of the logged in user based // on an existing mapping OR the username/password passed from a client login. // If there is no existing mapping and no username/password is specified, it will throw // an exception. async function validateAndMapAadLogin(req, res) { const audience = `api://${process.env.HOST_NAME}/${process.env.CLIENT_ID}`; const token = req.headers['authorization'].split(' ')[1]; const aadUserId = await new Promise((resolve, reject) => { aad.verify(token, { audience: audience }, async (err, result) => { if (result) { resolve(result.oid); } else { reject(err); } }); }); if (aadUserId) { // If here, user is logged into Azure AD let employeeId = await getEmployeeIdForUser(aadUserId); if (employeeId) { // We found the employee ID for the AAD user return employeeId; } else if (req.body.username) { // We did not find an employee ID for this user, try to // get one using the legacy authentication const username = req.body.username; const password = req.body.password; const employeeId = await validateEmployeeLogin(username, password); if (employeeId) { // If here, user is logged into both Azure AD and the legacy // authentication. Save the employee ID in the user's AAD // profile for future use. await setEmployeeIdForUser(aadUserId, employeeId); return employeeId; } else { // If here, the employee login failed; throw an exception throw ({ status: 401, statusMessage: \"Employee login failed\" }); } } else { // If here we don't have an employee ID and employee credentials were // not provided. throw ({ status: 404, statusMessage: \"Employee ID not found for this user\" }); } } else { res.status(401).send('Invalid AAD token'); } } async function getEmployeeIdForUser(aadUserId) { const idMapDB = await db.getTable(\"IdentityMap\", \"aadUserId\"); const identity = idMapDB.item(aadUserId); return identity.employeeId; } async function setEmployeeIdForUser(aadUserId, employeeId) { try { const identityMap = await db.getTable(\"IdentityMap\", \"aadUserId\"); if (identityMap.item(aadUserId)) { // User already mapped (shouldn't happen but handle it anyway) const item = identityMap.item(aadUserId); item.employeeId = employeeId; } else { identityMap.addItem({ \"aadUserId\": aadUserId, \"employeeId\": employeeId }); } await identityMap.save(); } catch (error) { console.log(`Error updating user mapping ${error}`); } } validateAndMapAadLogin() validates the Azure AD access token sent by the client and obtains the Azure AD user ID. It then calls getEmployeeIdForUser() to get the employee ID for that user. getEmployeeIdForUser() uses MSAL to obtain an Azure AD access token for the application and then it calls the Microsoft Graph with that token. If validateAndMapAadLogin() fails to get an employee ID, and a username and password were provided, it looks up the employee ID and uses setEmployeeIdForUser() to write it to the JSON database. The finished server/identityService.js file is here . Exercise 4: Test your application in Microsoft Teams !!! danger While Azure AD is secure, the original login scheme in this sample is not! The sample application uses a browser session cookie to establish who is logged in. It is not secure and would be easy to fake - do not use this in a real application! Also be aware during testing that your login will persist until you close all instances of your web browser. For example if you leave your browser logged in after this lab and then run Microsoft Teams in another instance of the same browser, your user will already be logged in when you get to the next lab.E Step 1: Start the application Now it's time to run your updated application and run it in Microsoft Teams. Start the application with this command: npm start Step 2: Upload the app package In the Teams web or desktop UI, click \"Apps\" in the sidebar 1\ufe0f\u20e3, then \"Manage your apps\" 2\ufe0f\u20e3. At this point you have three choices: Upload a custom app (upload the app for yourself or a specific team or group chat) - this only appears if you have enabled \"Upload custom apps\" in your setup policy; this was a step in the previous lab Upload an app to your org's app catalog (upload the app for use within your organization) - this only appears if you are a tenant administrator Submit an app to your org (initiate a workflow asking a tenant administrator to install your app) - this appears for everyone In this case, choose the first option 3\ufe0f\u20e3. Navigate to the Northwind.zip file in your manifest directory and upload it. Although the application is already installed, you are providing a newer version so it will update the application. Click the \"Add\" button to install it for your personal use. Step 3: Run the application The application should appear without any login prompt. The app's navigation should not be displayed; instead users can navigate to \"My Orders\" or \"Products\" using the tabs in the Teams app. function showCompletionPopup() { let path = window.location.pathname; path = path.endsWith('/') ? path.slice(0, -1) : path; let pathArray = path.split('/'); let leafFolder = pathArray[pathArray.length-1]; let height = window.outerHeight / 1.5; let width = window.outerWidth / 2; window.open(`${window.origin}/app-camp/congrats/${leafFolder}`, 'Congratulations!', `width=${width}, height=${height}, left=100, top=100,`); } Congratulations! When you have finished this lab, please click this button to let us know! No personal information is collected; we only want to count how many people have completed the labs so we can continue to fund this work! Challenge You might have noticed the logout button doesn't do anything in Teams! If you wish, hide the logout button just as you hid the navigation bar. The code is in client/identity/userPanel.js. Known issues For the latest issues, or to file a bug report, see the github issues list for this repository. References Single sign-on (SSO) support for Tabs","title":"B03 - Enable Azure AD Single Sign-On"},{"location":"bespoke/B03-after-teams-sso/#lab-b03-enable-azure-ad-single-sign-on","text":"This is parth of Path B, which begins with an application that uses an authorization system other than Azure AD. Are you on the right path? Expand these notes to find out! There are two options for doing the labs: The \"A\" path is for developers with apps that are already based on Azure Active Directory. The starting app uses Azure Active Directory and the Microsoft Authentication Library (MSAL). the \"B\" path is for developers with apps that use some other identity system. It includes a simple (and not secure!) cookie-based auth system based on the Employees table in the Northwind database. You will use an identity mapping scheme to allow your existing users to log in directly or via Azure AD Single Sign-On. In this lab you will build the application you created in Lab B01 into a Microsoft Teams application. This application will still use the Northwind authentication, but since the Northwind login page won't work in the Teams tab IFrame, we'll use the Teams JavaScript SDK to show it in a pop-up. Note that as you complete the labs, the original app should still work outside of Teams! This is often a requirement of ISV's who have an app in market and need to serve an existing customer base outside of Teams. B01-begin-app: Setting up the application B02-after-teams-login: Creating a Teams application B03-after-teams-sso: Adding Azure AD SSO to your app (\ud83d\udccdYou are here) B04-after-apply-styling: Teams styling and themes In this lab you will learn to: Register an application with the Microsoft identity platform Configure ans Azure AD app registration to allow Teams to issue tokens on behalf of your application Use the Microsoft Teams JavaScript SDK to request an Azure AD access token How to validate an Azure AD access token in a NodeJS application Video briefing \"B Path\" Lab Briefing","title":"Lab B03: Enable Azure AD Single Sign-On"},{"location":"bespoke/B03-after-teams-sso/#features","text":"Microsoft Teams personal tab application transparently logs the user in The first time a user accesses the application, it prompts them for their Northwind credentials and writes their Northwind employee ID into the user's profile in Azure AD After that, the application reads the employee ID from Azure AD to decide which orders to show","title":"Features"},{"location":"bespoke/B03-after-teams-sso/#project-structure","text":"Project files before and after this lab (open to display \u25ba) The project structure when you start of this lab and end of this lab is as follows. Use this depiction for comparison. On your left is the contents of folder B02-after-teams-login and on your right is the contents of folder B03-after-teams-sso . - \ud83c\udd95 New files/folders \ud83d\udd3aFiles changed Project Structure Before Project Structure After B02-after-teams-login \u251c\u2500\u2500 client \u2502 \u251c\u2500\u2500 components \u2502 \u251c\u2500\u2500 navigation.js \u2502 \u2514\u2500\u2500 identity \u2502 \u251c\u2500\u2500 \ud83d\udd3aidentityClient.js \u2502 \u2514\u2500\u2500 login.html \u2502 \u2514\u2500\u2500 \ud83d\udd3alogin.js \u2502 \u2514\u2500\u2500 teamsLoginLauncher.html \u2502 \u2514\u2500\u2500 teamsLoginLauncher.js \u2502 \u2514\u2500\u2500 userPanel.js \u251c\u2500\u2500 modules \u2502 \u2514\u2500\u2500 env.js \u2502 \u2514\u2500\u2500 northwindDataService.js \u2502 \u2514\u2500\u2500 teamsHelpers.js \u251c\u2500\u2500 pages \u2502 \u2514\u2500\u2500 categories.html \u2502 \u2514\u2500\u2500 categories.js \u2502 \u2514\u2500\u2500 categoryDetails.html \u2502 \u2514\u2500\u2500 categoryDetails.js \u2502 \u2514\u2500\u2500 myOrders.html \u2502 \u2514\u2500\u2500 orderDetail.html \u2502 \u2514\u2500\u2500 orderDetail.js \u2502 \u2514\u2500\u2500 privacy.html \u2502 \u2514\u2500\u2500 productDetail.html \u2502 \u2514\u2500\u2500 productDetail.js \u2502 \u2514\u2500\u2500 termsofuse.html \u251c\u2500\u2500 index.html \u251c\u2500\u2500 index.js \u251c\u2500\u2500 northwind.css \u251c\u2500\u2500 manifest \u2502 \u2514\u2500\u2500 \ud83d\udd3amakePackage.js \u2502 \u2514\u2500\u2500 \ud83d\udd3amanifest.template.json \u2502 \u2514\u2500\u2500 northwind32.png \u2502 \u2514\u2500\u2500 northwind192.png \u251c\u2500\u2500 server \u2502 \u2514\u2500\u2500 constants.js \u2502 \u2514\u2500\u2500 \ud83d\udd3aidentityService.js \u2502 \u2514\u2500\u2500 northwindDataService.js \u2502 \u2514\u2500\u2500 server.js \u251c\u2500\u2500 \ud83d\udd3a.env_Sample \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 \ud83d\udd3apackage.json \u251c\u2500\u2500 README.md B03-after-teams-sso \u251c\u2500\u2500 client \u2502 \u251c\u2500\u2500 components \u2502 \u251c\u2500\u2500 navigation.js \u2502 \u2514\u2500\u2500 identity \u2502 \u251c\u2500\u2500 \ud83c\udd95aadLogin.html \u2502 \u2514\u2500\u2500 \ud83c\udd95aadLogin.js \u2502 \u251c\u2500\u2500 \ud83d\udd3aidentityClient.js \u2502 \u2514\u2500\u2500 login.html \u2502 \u2514\u2500\u2500 \ud83d\udd3alogin.js \u2502 \u2514\u2500\u2500 teamsLoginLauncher.html \u2502 \u2514\u2500\u2500 teamsLoginLauncher.js \u2502 \u2514\u2500\u2500 userPanel.js \u251c\u2500\u2500 modules \u2502 \u2514\u2500\u2500 env.js \u2502 \u2514\u2500\u2500 northwindDataService.js \u2502 \u2514\u2500\u2500 teamsHelpers.js \u251c\u2500\u2500 pages \u2502 \u2514\u2500\u2500 categories.html \u2502 \u2514\u2500\u2500 categories.js \u2502 \u2514\u2500\u2500 categoryDetails.html \u2502 \u2514\u2500\u2500 categoryDetails.js \u2502 \u2514\u2500\u2500 myOrders.html \u2502 \u2514\u2500\u2500 orderDetail.html \u2502 \u2514\u2500\u2500 orderDetail.js \u2502 \u2514\u2500\u2500 privacy.html \u2502 \u2514\u2500\u2500 productDetail.html \u2502 \u2514\u2500\u2500 productDetail.js \u2502 \u2514\u2500\u2500 termsofuse.html \u251c\u2500\u2500 index.html \u251c\u2500\u2500 index.js \u251c\u2500\u2500 northwind.css \u251c\u2500\u2500 manifest \u2502 \u2514\u2500\u2500 \ud83d\udd3amakePackage.js \u2502 \u2514\u2500\u2500 \ud83d\udd3amanifest.template.json \u2502 \u2514\u2500\u2500 northwind32.png \u2502 \u2514\u2500\u2500 northwind192.png \u251c\u2500\u2500 server \u2502 \u2514\u2500\u2500 constants.js \u2502 \u2514\u2500\u2500 \ud83d\udd3aidentityService.js \u2502 \u2514\u2500\u2500 northwindDataService.js \u2502 \u2514\u2500\u2500 server.js \u251c\u2500\u2500 \ud83d\udd3a.env_Sample \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 \ud83d\udd3apackage.json \u251c\u2500\u2500 README.md","title":"Project structure"},{"location":"bespoke/B03-after-teams-sso/#exercise-1-register-your-application-with-azure-ad","text":"In order for users to log into your application with Azure AD, you need to register it. In this exercise you will register your application directly in the tenant you created in Lab B02, however we'll set it up so it can be used from other tenants, such as those of customers who purchase your application in the Microsoft Teams store. More information Learn about multi-tenant applications","title":"Exercise 1: Register your application with Azure AD"},{"location":"bespoke/B03-after-teams-sso/#step-1-register-your-application-in-azure-active-directory","text":"Navigate to the Microsoft 365 admin center at https://admin.microsoft.com/ and log in as the administrator of your developer tenant. In the left navigation, click \"Show More\" to reveal the full list of admin centers, and then click \"Azure Active Directory\". This will bring you to the Azure AD admin center . Click \"Azure Active Directory\" again in the left navigation bar. This will bring you to the overview of your Azure AD tenant. Note that a \"tenant\" is a single instance of Azure Active Directory, with its own users, groups, and app registrations. Verify that you're in the developer tenant you just created, and click \"App Registrations\" in the navigation bar. You will be shown a list of applications (if any) registered in the tenant. Click \"+ New Registration\" at the top to register a new application. You will be presented with the \"Register an application\" form. Enter a name for your application 1\ufe0f\u20e3. Under \"Supported account types\" select \"Accounts in any organizational directory\" 2\ufe0f\u20e3. This will allow your application to be used in your customer's tenants. Under \"Redirect URI\", select \"Single-page application (SPA)\" 3\ufe0f\u20e3 and enter the ngrok URL you saved earlier 4\ufe0f\u20e3. Click the \"Register\" button 5\ufe0f\u20e3 You will be presented with the application overview. There are two values on this screen you need to copy for use later on; those are the Application (client) ID 1\ufe0f\u20e3 and the Directory (tenant) ID 2\ufe0f\u20e3. When you've recorded these values, navigate to \"Certificates & secrets\" 3\ufe0f\u20e3. Now you will create a client secret, which is like a password for your application to use when it needs to authenticate with Azure AD. Click \"+ New client secret\" 1\ufe0f\u20e3 Enter a description 2\ufe0f\u20e3 and select an expiration date 3\ufe0f\u20e3 for your secret Click \"Add\" to add your secret. 4\ufe0f\u20e3 The secret will be displayed just this once on the \"Certificates and secrets\" screen. Copy it now and store it in a safe place. Managing app secrets is an ongoing responsibility App secrets have a limited lifetime, and if they expire your application may stop working. You can have multiple secrets, so plan to roll them over as you would with a digital certificate. Keep your secrets secret! Give each developer a free developer tenant and register their apps in their tenants so each developer has his or her own app secrets. Limit who has access to app secrets for production. If you're running in Microsoft Azure, a great place to store your secrets is Azure KeyVault . You could deploy an app just like this one and store sensitive application settings in Keyvault. See this article for more information.","title":"Step 1: Register your application in Azure Active Directory"},{"location":"bespoke/B03-after-teams-sso/#step-2-grant-your-application-permission-to-call-the-microsoft-graph-api","text":"The app registration created an identity for your application; now we need to give it permission to call the Microsoft Graph API. The Microsoft Graph is a RESTful API that allows you to access data in Azure AD and Microsoft 365, including Microsoft Teams. While still in the app registration, navigate to \"API Permissions\" 1\ufe0f\u20e3. Notice that User.Read delegated permission for the Microsoft Graph API has automatically been placed on the list 2\ufe0f\u20e3; this is exactly the permission we need to read the user's profile. The permission was added automatically, but nobody has consented to it 1\ufe0f\u20e3. To fix this, click the \"Grant admin consent for \" button and then agree to grant the consent 2\ufe0f\u20e3. When this is complete, the message \"Granted for \" should be displayed for each permission.","title":"Step 2: Grant your application permission to call the Microsoft Graph API"},{"location":"bespoke/B03-after-teams-sso/#step-3-expose-an-api","text":"The Northwind Orders app is a full stack application, with code running in the web browser and web server. The browser application accesses data by calling a web API on the server side. To allow this, we need to expose an API in our Azure AD application. This will allow the server to validate Azure AD access tokens from the web browser. Click \"Expose an API\" 1\ufe0f\u20e3 and then \"Add a scope\"2\ufe0f\u20e3. Scopes expose an application's permissions; what you're doing here is adding a permission that your application's browser code can use it when calling the server. On the \"Add a scope\" flyout, edit the Application ID URI to include your ngrok URL between the \"api://\" and the client ID. Click the \"Save and continue\" button to proceed. Now that you've defined the application URI, the \"Add a scope\" flyout will allow you to set up the new permission scope. Fill in the form as follows: - Scope name: access_as_user - Who can consent: Admins only - Admin consent display name: Access as the logged in user - Admin consent description: Access Northwind services as the logged in user - (skip User consent fields) - Ensure the State is set to \"Enabled\" - Click \"Add scope\"","title":"Step 3: Expose an API"},{"location":"bespoke/B03-after-teams-sso/#step-4-authorize-microsoft-teams-to-log-users-into-your-application","text":"Microsoft Teams provides a Single Sign-On (SSO) capability so users are silently logged into your application using the same credentials they used to log into Microsoft Teams. This requires giving Microsoft Teams permission to issue Azure AD tokens on behalf of your application. In this step, you'll provide that permission. Click \"Expose an API\" 1\ufe0f\u20e3 and then \"+ Add a client application\" 2\ufe0f\u20e3. Paste the ID for the Teams mobile or desktop app, 1fec8e78-bce4-4aaf-ab1b-5451cc387264 into the flyout 1\ufe0f\u20e3 and check the scope you created earlier 2\ufe0f\u20e3 to allow Teams to issue tokens for that scope. Then click \"Add application\" 3\ufe0f\u20e3 to save your work. Repeat the process for the Teams web application, 5e3ce6c0-2b1f-4285-8d4b-75ee78787346 .","title":"Step 4: Authorize Microsoft Teams to log users into your application"},{"location":"bespoke/B03-after-teams-sso/#exercise-2-update-the-teams-application-package","text":"You've given Microsoft Teams permission to issue an Azure AD access token to your application (single sign-on), but Microsoft Teams doesn't know about that. To provide the information Teams needs, we need to update the Teams Application package.","title":"Exercise 2: Update the Teams application package"},{"location":"bespoke/B03-after-teams-sso/#step-1-add-the-azure-ad-information-to-the-env-file","text":"Open the .env file in your working directory and add these lines, filling in the information you saved during the app registration: TENANT_ID=00000000-0000-0000-0000-000000000000 CLIENT_ID=00000000-0000-0000-0000-000000000000 CLIENT_SECRET=xxxxx","title":"Step 1: Add the Azure AD information to the .env file"},{"location":"bespoke/B03-after-teams-sso/#step-2-add-the-azure-ad-information-to-your-manifest","text":"In your working directory, edit the manifest/manifest.template.json file. Update the revision number to a larger version number: \"version\": \"1.3.0\", Add a comma after the validDomains property and then add a new property, webApplicationInfo . \"webApplicationInfo\": { \"id\": \"<CLIENT_ID>\", \"resource\": \"api://<HOST_NAME>/<CLIENT_ID>\" } This provides the Azure AD app registration information to Microsoft Teams for use in the SSO process. The finished manifest.template.json file is here for your reference.","title":"Step 2: Add the Azure AD information to your manifest"},{"location":"bespoke/B03-after-teams-sso/#step-3-modify-the-packaging-code-to-include-the-client_id","text":"Open the file manifest/makePackage.js in your code editor. Notice that the code only makes a few of the environment variables available when it creates manifest.json. We just added some references to CLIENT_ID , so we need to handle them in the makePackage.js code. In the if statement where the code checks for the TEAMS_APP_ID and HOST_NAME environment variables, add the CLIENT_ID as well like this: Object.keys(process.env).forEach((key) => { if (key.indexOf('TEAMS_APP_ID') === 0 || key.indexOf('HOST_NAME') === 0 || key.indexOf('CLIENT_ID') === 0) { data = data.split(`<${key}>`).join(process.env[key]); console.log (`Inserted ${key} value of ${process.env[key]}`); } });","title":"Step 3: Modify the packaging code to include the CLIENT_ID"},{"location":"bespoke/B03-after-teams-sso/#step-4-rebuild-the-package","text":"Now you can build a new package at any time with this command: npm run package Go ahead and run it, and two files, manifest.json and northwind.zip (the app package) should be updated in your manifest folder.","title":"Step 4: Rebuild the package"},{"location":"bespoke/B03-after-teams-sso/#exercise-3-update-the-application-source-code","text":"","title":"Exercise 3: Update the application source code"},{"location":"bespoke/B03-after-teams-sso/#step-1-update-your-packagejson-file","text":"The updated code will use two new npm packages on the server side: @azure/msal-node: Allows login to Azure AD from your web server; this is needed when calling the Microsoft Graph API to read and write the user's employee ID. azure-ad-jwt: Validates an Azure AD access token sent by the client side code To accommodate this, open the package.json file in your working directory and update the dependencies property to include these packages like this: \"dependencies\": { \"@azure/msal-node\": \"^1.5.0\", \"azure-ad-jwt\": \"^1.1.0\", \"cookie-parser\": \"^1.4.6\", \"dotenv\": \"^10.0.0\", \"express\": \"^4.17.1\", \"node-fetch\": \"^3.1.1\", \"request\": \"^2.88.0\" }, Then, from a command line in your working directory, install the package by typing npm install","title":"Step 1: Update your package.json file"},{"location":"bespoke/B03-after-teams-sso/#step-2-add-an-identity-mapping-screen","text":"When a user logs into the app for the first time, we will log them into both Azure AD and the Northwind login scheme and save their Northwind employee ID in the Azure AD user profile. This is just one of many approaches; an application could save the Azure AD user ID and another system's user ID in a database, or it could save the Azure AD user ID in the user's profile within the other authentication. Any way you do it, the idea is to create a linkage between each Azure AD user and their user profile in the other identity service. In this step, you'll add a new web page to handle this identity mapping. If the application reads the Azure AD user's employee ID and it's blank, the user will be redirected here. In your working folder, create a file /client/identity/aadLogin.html and paste in this markup: <!doctype html> <html> <head> <meta charset=\"UTF-8\" /> <title>Northwind Login Page</title> <link rel=\"stylesheet\" href=\"/northwind.css\" /> <link rel=\"icon\" href=\"data:;base64,=\"> <!-- Suppress favicon error --> </head> <body> <div id=\"teamsLoginLauncher\" style=\"display:none\"> <h2>Northwind Login (AAD Mapping)</h2> <br /> <p>Please log in using your Northwind employee login it to link your Microsoft Teams login.</p> <button id=\"teamsLoginLauncherButton\">Log in</button> </div> <div id=\"message\" class=\"errorMessage\"></div> <script type=\"module\" src=\"/identity/aadLogin.js\"></script> </body> </html> Now create another file, /client/identity/aadLogin.js and insert this code: import 'https://res.cdn.office.net/teams-js/2.0.0/js/MicrosoftTeams.min.js'; import { ensureTeamsSdkInitialized } from '../modules/teamsHelpers.js'; import { setLoggedinEmployeeId } from './identityClient.js'; (async () => { const teamsLoginLauncher = document.getElementById('teamsLoginLauncher'); const teamsLoginLauncherButton = document.getElementById('teamsLoginLauncherButton'); await ensureTeamsSdkInitialized(); const authToken = await microsoftTeams.authentication.getAuthToken(); const response = await fetch(`/api/validateAadLogin`, { \"method\": \"post\", \"headers\": { \"content-type\": \"application/json\", \"authorization\": `Bearer ${authToken}` }, \"body\": JSON.stringify({ \"employeeId\": 0 }), \"cache\": \"no-cache\" }); if (response.ok) { const data = await response.json(); if (data.employeeId) { // If here, AAD user was mapped to a Northwind employee ID setLoggedinEmployeeId(data.employeeId); window.location.href = document.referrer; } } else if (response.status === 404) { // If here, AAD user logged in but there was no mapping to an employee ID. // Get one now using the bespoke authentication teamsLoginLauncherButton.addEventListener('click', async ev => { // First, launch the original login page to get the user credentials const northwindCredentials = await microsoftTeams.authentication.authenticate({ url: `${window.location.origin}/identity/login.html?teams=true`, width: 600, height: 535 }); // Now call the server with BOTH the Azure AD and original credentials // Server is responsible for linking them in its database for next time const response = await fetch(`/api/validateAadLogin`, { \"method\": \"post\", \"headers\": { \"content-type\": \"application/json\", \"authorization\": `Bearer ${authToken}` }, \"body\": JSON.stringify({ \"username\": northwindCredentials.username, \"password\": northwindCredentials.password }), \"cache\": \"no-cache\" }); // Now log the user in with the bespoke system setLoggedinEmployeeId(northwindCredentials.employeeId); window.location.href = document.referrer; }); teamsLoginLauncher.style.display = \"inline\"; } else { console.log(`Error ${response.status} on /api/validateAadLogin: ${response.statusText}`); } })(); This code uses the Teams JavaScript SDK to obtain an Azure AD token using microsoftTeams.authentication.getAuthToken() , and then it calls the server side at /api/validateAadLogin using this token. The server will read the user's employeeId and return it. If the employee ID is not found, the server returns an HTTP 404 error and the code prompts the user to log in via the Northwind login page. When the user logs in, the code passes his or her credentials back to /api/validateAadLogin, which looks up the employeeId and writes it to the user's profile.","title":"Step 2: Add an identity mapping screen"},{"location":"bespoke/B03-after-teams-sso/#step-3-return-the-username-and-password-from-the-login-page","text":"Open the file /client/identity/login.js in your code editor, and find the call to notifySuccess() . Modify it to return the username and password so the aadLogin.html page can provide it to the server. microsoftTeams.authentication.notifySuccess({ username: usernameInput.value, password: passwordInput.value, employeeId: employeeId }); The completed login script is here at B03-after-teams-sso/client/identity/login.js","title":"Step 3: Return the username and password from the login page"},{"location":"bespoke/B03-after-teams-sso/#step-4-modify-the-logoff-code","text":"Logging off in this new version of the Teams app will be a very transitory thing, because the user will immediately be logged back on again! However we'll leave it in place for testing purposes. Open the file client/identity/identityClient.js in your code editor and change the line: window.location.href = \"/identity/teamsLoginLauncher.html\"; to: window.location.href = \"/identity/aadLogin.html\";","title":"Step 4: Modify the logoff code"},{"location":"bespoke/B03-after-teams-sso/#step-5-nodify-the-identity-server-code","text":"Now that the client code has been updated, it's time to modify the server code to handle the /api/validateAadLogin call from the client. To do that, open the file /server/identityService.js in your code editor and add these lines at the top: import aad from 'azure-ad-jwt'; import { dbService } from '../northwindDB/dbService.js'; const db = new dbService(); This will import two node packages: azure-ad-jwt - this package validates an Azure AD access token dbService - this is the module that handles the JSON database, so we can write the mapping between Azure AD user ID's and Northwind Employee ID's there. Then locate the function initializeIdentityService() and add these lines near the bottom of the function, just above the app.use('/api/', validateApiRequest); statement. // Web service validates an Azure AD login app.post('/api/validateAadLogin', async (req, res) => { try { const employeeId = await validateAndMapAadLogin(req, res); if (employeeId) { res.send(JSON.stringify({ \"employeeId\": employeeId })); } else { res.status(401).send('Unknown authentication failure'); } } catch (error) { console.log(`Error in /api/validateAadLogin handling: ${error.statusMessage}`); res.status(error.status).json({ status: error.status, statusText: error.statusMessage }); } }); This code will handle the call to /api/validateAadLogin but the real work is done in another function, validateAndMapAadLogin() . Next, add this code at the bottom of identityService.js. // validateAndMapAadLogin() - Returns an employee ID of the logged in user based // on an existing mapping OR the username/password passed from a client login. // If there is no existing mapping and no username/password is specified, it will throw // an exception. async function validateAndMapAadLogin(req, res) { const audience = `api://${process.env.HOST_NAME}/${process.env.CLIENT_ID}`; const token = req.headers['authorization'].split(' ')[1]; const aadUserId = await new Promise((resolve, reject) => { aad.verify(token, { audience: audience }, async (err, result) => { if (result) { resolve(result.oid); } else { reject(err); } }); }); if (aadUserId) { // If here, user is logged into Azure AD let employeeId = await getEmployeeIdForUser(aadUserId); if (employeeId) { // We found the employee ID for the AAD user return employeeId; } else if (req.body.username) { // We did not find an employee ID for this user, try to // get one using the legacy authentication const username = req.body.username; const password = req.body.password; const employeeId = await validateEmployeeLogin(username, password); if (employeeId) { // If here, user is logged into both Azure AD and the legacy // authentication. Save the employee ID in the user's AAD // profile for future use. await setEmployeeIdForUser(aadUserId, employeeId); return employeeId; } else { // If here, the employee login failed; throw an exception throw ({ status: 401, statusMessage: \"Employee login failed\" }); } } else { // If here we don't have an employee ID and employee credentials were // not provided. throw ({ status: 404, statusMessage: \"Employee ID not found for this user\" }); } } else { res.status(401).send('Invalid AAD token'); } } async function getEmployeeIdForUser(aadUserId) { const idMapDB = await db.getTable(\"IdentityMap\", \"aadUserId\"); const identity = idMapDB.item(aadUserId); return identity.employeeId; } async function setEmployeeIdForUser(aadUserId, employeeId) { try { const identityMap = await db.getTable(\"IdentityMap\", \"aadUserId\"); if (identityMap.item(aadUserId)) { // User already mapped (shouldn't happen but handle it anyway) const item = identityMap.item(aadUserId); item.employeeId = employeeId; } else { identityMap.addItem({ \"aadUserId\": aadUserId, \"employeeId\": employeeId }); } await identityMap.save(); } catch (error) { console.log(`Error updating user mapping ${error}`); } } validateAndMapAadLogin() validates the Azure AD access token sent by the client and obtains the Azure AD user ID. It then calls getEmployeeIdForUser() to get the employee ID for that user. getEmployeeIdForUser() uses MSAL to obtain an Azure AD access token for the application and then it calls the Microsoft Graph with that token. If validateAndMapAadLogin() fails to get an employee ID, and a username and password were provided, it looks up the employee ID and uses setEmployeeIdForUser() to write it to the JSON database. The finished server/identityService.js file is here .","title":"Step 5: Nodify the identity server code"},{"location":"bespoke/B03-after-teams-sso/#exercise-4-test-your-application-in-microsoft-teams","text":"!!! danger While Azure AD is secure, the original login scheme in this sample is not! The sample application uses a browser session cookie to establish who is logged in. It is not secure and would be easy to fake - do not use this in a real application! Also be aware during testing that your login will persist until you close all instances of your web browser. For example if you leave your browser logged in after this lab and then run Microsoft Teams in another instance of the same browser, your user will already be logged in when you get to the next lab.E","title":"Exercise 4: Test your application in Microsoft Teams"},{"location":"bespoke/B03-after-teams-sso/#step-1-start-the-application","text":"Now it's time to run your updated application and run it in Microsoft Teams. Start the application with this command: npm start","title":"Step 1: Start the application"},{"location":"bespoke/B03-after-teams-sso/#step-2-upload-the-app-package","text":"In the Teams web or desktop UI, click \"Apps\" in the sidebar 1\ufe0f\u20e3, then \"Manage your apps\" 2\ufe0f\u20e3. At this point you have three choices: Upload a custom app (upload the app for yourself or a specific team or group chat) - this only appears if you have enabled \"Upload custom apps\" in your setup policy; this was a step in the previous lab Upload an app to your org's app catalog (upload the app for use within your organization) - this only appears if you are a tenant administrator Submit an app to your org (initiate a workflow asking a tenant administrator to install your app) - this appears for everyone In this case, choose the first option 3\ufe0f\u20e3. Navigate to the Northwind.zip file in your manifest directory and upload it. Although the application is already installed, you are providing a newer version so it will update the application. Click the \"Add\" button to install it for your personal use.","title":"Step 2: Upload the app package"},{"location":"bespoke/B03-after-teams-sso/#step-3-run-the-application","text":"The application should appear without any login prompt. The app's navigation should not be displayed; instead users can navigate to \"My Orders\" or \"Products\" using the tabs in the Teams app. function showCompletionPopup() { let path = window.location.pathname; path = path.endsWith('/') ? path.slice(0, -1) : path; let pathArray = path.split('/'); let leafFolder = pathArray[pathArray.length-1]; let height = window.outerHeight / 1.5; let width = window.outerWidth / 2; window.open(`${window.origin}/app-camp/congrats/${leafFolder}`, 'Congratulations!', `width=${width}, height=${height}, left=100, top=100,`); }","title":"Step 3: Run the application"},{"location":"bespoke/B03-after-teams-sso/#congratulations","text":"When you have finished this lab, please click this button to let us know! No personal information is collected; we only want to count how many people have completed the labs so we can continue to fund this work! Challenge You might have noticed the logout button doesn't do anything in Teams! If you wish, hide the logout button just as you hid the navigation bar. The code is in client/identity/userPanel.js.","title":"Congratulations!"},{"location":"bespoke/B03-after-teams-sso/#known-issues","text":"For the latest issues, or to file a bug report, see the github issues list for this repository.","title":"Known issues"},{"location":"bespoke/B03-after-teams-sso/#references","text":"Single sign-on (SSO) support for Tabs","title":"References"},{"location":"bespoke/B04-after-apply-styling/","text":"(function(c,l,a,r,i,t,y){ c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)}; t=l.createElement(r);t.async=1;t.src=\"https://www.clarity.ms/tag/\"+i; y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y); })(window, document, \"clarity\", \"script\", \"dfh6fjbr5x\"); Lab B04: Teams styling and themes This is parth of Path B, which begins with an application that uses an authorization system other than Azure AD. Are you on the right path? Expand these notes to find out! There are two options for doing the labs: The \"A\" path is for developers with apps that are already based on Azure Active Directory. The starting app uses Azure Active Directory and the Microsoft Authentication Library (MSAL). the \"B\" path is for developers with apps that use some other identity system. It includes a simple (and not secure!) cookie-based auth system based on the Employees table in the Northwind database. You will use an identity mapping scheme to allow your existing users to log in directly or via Azure AD Single Sign-On. In this lab you will begin with the application in folder B03-TeamsSSO , make changes as per the steps below to achieve what is in the folder B04-StyleAndThemes . See project structures comparison in Exercise 1. B01-begin-app: Setting up the application B02-after-teams-login: Creating a Teams application B03-after-teams-sso: Adding Azure AD SSO to your app B04-after-apply-styling: Teams styling and themes (\ud83d\udccdYou are here) In this lab you will learn to: Apply styles based on the Microsoft Teams figma to make your application look like it belongs in Microsoft Teams Display your application with the same color theme the user has selected in Microsoft Teams Switch your application's theme when the user changes the Microsoft Teams theme setting Video briefing \"B Path\" Lab Briefing Features Apply teams styling and themes to your existing application. Display and update themes along with the Microsoft Teams client Project structure Project files before and after this lab (open to display \u25ba) The project structure when you start of this lab and end of this lab is as follows. Use this depiction for comparison. On your left is the contents of folder B03-after-teams-sso and on your right is the contents of folder B04-after-apply-styling . - \ud83c\udd95 New files/folders \ud83d\udd3aFiles changed Project Structure Before Project Structure After B03-after-teams-sso \u251c\u2500\u2500 client \u2502 \u251c\u2500\u2500 components \u2502 \u251c\u2500\u2500 navigation.js \u2502 \u2514\u2500\u2500 identity \u2502 \u251c\u2500\u2500 aadLogin.html \u2502 \u2514\u2500\u2500 aadLogin.js \u2502 \u251c\u2500\u2500 identityClient.js \u2502 \u2514\u2500\u2500 login.html \u2502 \u2514\u2500\u2500 login.js \u2502 \u2514\u2500\u2500 teamsLoginLauncher.html \u2502 \u2514\u2500\u2500 teamsLoginLauncher.js \u2502 \u2514\u2500\u2500 userPanel.js \u251c\u2500\u2500 modules \u2502 \u2514\u2500\u2500 env.js \u2502 \u2514\u2500\u2500 northwindDataService.js \u2502 \u2514\u2500\u2500 \ud83d\udd3ateamsHelpers.js \u251c\u2500\u2500 pages \u2502 \u2514\u2500\u2500 categories.html \u2502 \u2514\u2500\u2500 categories.js \u2502 \u2514\u2500\u2500 categoryDetails.html \u2502 \u2514\u2500\u2500 categoryDetails.js \u2502 \u2514\u2500\u2500 myOrders.html \u2502 \u2514\u2500\u2500 orderDetail.html \u2502 \u2514\u2500\u2500 orderDetail.js \u2502 \u2514\u2500\u2500 privacy.html \u2502 \u2514\u2500\u2500 productDetail.html \u2502 \u2514\u2500\u2500 productDetail.js \u2502 \u2514\u2500\u2500 termsofuse.html \u251c\u2500\u2500 index.html \u251c\u2500\u2500 index.js \u251c\u2500\u2500 \ud83d\udd3anorthwind.css \u251c\u2500\u2500 manifest \u2502 \u2514\u2500\u2500 makePackage.js \u2502 \u2514\u2500\u2500 \ud83d\udd3amanifest.template.json \u2502 \u2514\u2500\u2500 northwind32.png \u2502 \u2514\u2500\u2500 northwind192.png \u2502 \u2514\u2500\u2500 constants.js \u2502 \u2514\u2500\u2500 identityService.js \u2502 \u2514\u2500\u2500 northwindDataService.js \u2502 \u2514\u2500\u2500 server.js \u251c\u2500\u2500 .env_Sample \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 package.json \u251c\u2500\u2500 README.md B04-after-apply-styling \u251c\u2500\u2500 client \u2502 \u251c\u2500\u2500 components \u2502 \u251c\u2500\u2500 navigation.js \u2502 \u2514\u2500\u2500 identity \u2502 \u251c\u2500\u2500 aadLogin.html \u2502 \u2514\u2500\u2500 aadLogin.js \u2502 \u251c\u2500\u2500 identityClient.js \u2502 \u2514\u2500\u2500 login.html \u2502 \u2514\u2500\u2500 login.js \u2502 \u2514\u2500\u2500 teamsLoginLauncher.html \u2502 \u2514\u2500\u2500 teamsLoginLauncher.js \u2502 \u2514\u2500\u2500 userPanel.js \u251c\u2500\u2500 modules \u2502 \u2514\u2500\u2500 env.js \u2502 \u2514\u2500\u2500 northwindDataService.js \u2502 \u2514\u2500\u2500 \ud83d\udd3ateamsHelpers.js \u251c\u2500\u2500 pages \u2502 \u2514\u2500\u2500 categories.html \u2502 \u2514\u2500\u2500 categories.js \u2502 \u2514\u2500\u2500 categoryDetails.html \u2502 \u2514\u2500\u2500 categoryDetails.js \u2502 \u2514\u2500\u2500 myOrders.html \u2502 \u2514\u2500\u2500 orderDetail.html \u2502 \u2514\u2500\u2500 orderDetail.js \u2502 \u2514\u2500\u2500 privacy.html \u2502 \u2514\u2500\u2500 productDetail.html \u2502 \u2514\u2500\u2500 productDetail.js \u2502 \u2514\u2500\u2500 termsofuse.html \u251c\u2500\u2500 index.html \u251c\u2500\u2500 index.js \u251c\u2500\u2500 \ud83d\udd3anorthwind.css \u251c\u2500\u2500 \ud83c\udd95teamstyle.css \u251c\u2500\u2500 manifest \u2502 \u2514\u2500\u2500 makePackage.js \u2502 \u2514\u2500\u2500 \ud83d\udd3amanifest.template.json \u2502 \u2514\u2500\u2500 northwind32.png \u2502 \u2514\u2500\u2500 northwind192.png \u2502 \u2514\u2500\u2500 constants.js \u2502 \u2514\u2500\u2500 identityService.js \u2502 \u2514\u2500\u2500 northwindDataService.js \u2502 \u2514\u2500\u2500 server.js \u251c\u2500\u2500 .env_Sample \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 package.json \u251c\u2500\u2500 README.md Exercise 1: Add CSS Step 1: Create a CSS file for Teams theme styles Create a file teamstyle.css in the client folder and copy below code block into it. These styles are based on the Teams UI Toolkit Figma . If you're working in React, you may want to use the Teams UI Toolkit React Components . :root { /* common */ --brand-color: #6264A7; --button-color: #6264A7; --button-text-color: #fff; --button-hover-color: rgb(88, 90, 150); --button-hover-text-color: #fff; --button-active-color: rgb(70, 71, 117); --button-active-text-color: #fff; --button-border: 1px solid hsla(0,0%,100%,.04); --button-shadow: rgb(0 0 0 / 25%) 0px 0.2rem 0.4rem -0.075rem; --button2-color: #fff; --button2-text-color: rgb(37, 36, 35); --button2-hover-color: rgb(237, 235, 233); --button2-active-color: rgb(225, 223, 221); --button2-border: 1px solid rgb(225, 223, 221); --button2-shadow: rgb(0 0 0 / 10%) 0px 0.2rem 0.4rem -0.075rem; --button-disabled-color: rgb(237, 235, 233); --button-disabled-text-color: rgb(200, 198, 196); --input-background-color: rgb(243, 242, 241); --input-border-color: transparent; --input-border-width: 0 0 0.1429rem 0; --input-focus-border-color: transparent; --input-focus-border-bottom-color: #6264A7; --table-color: transparent; --table-border: 1px solid rgb(237, 235, 233); --border-color: rgb(237, 235, 233); /* light theme */ --font-color: rgb(37, 36, 35); --background-color: #fff; --link-color: #6264A7; --border-color: #E1DFDD; --warning-color: #C4314B; } [data-theme=\"dark\"] { --font-color: #fff; --background-color: transparent; --link-color: #A6A7DC; --border-color: #605E5C; --warning-color: #F9526B; } [data-theme=\"contrast\"] { --brand-color: #ffff01; --font-color: #fff; --link-color: #ffff01; --background-color: transparent; --border-color: #fff; --button-color: transparent; --button-text-color: #fff; --button-hover-color: #ffff01; --button-hover-text-color: #000; --button-active-color: #1aebff; --button-active-text-color: #000; --button-border: .2rem solid #fff; --input-background-color: transparent; --input-border-color: #fff; --input-border-width: 1px; --input-focus-border-color: #1aebff; --input-focus-border-bottom-color: #1aebff; --warning-color: #ffff01; } body { background-color: var(--background-color); color: var(--font-color); box-sizing: border-box; font-size: 14px; } a, a:visited { color: var(--link-color); text-decoration: none; } a:hover, a:active { text-decoration: underline; } table, caption, tbody, tfoot, thead, tr, th, td { /*reset */ margin: 0; padding: 0; border: 0; font-size: 100%; font: inherit; vertical-align: middle; border-collapse: collapse; } table { display: table; background-color: var(--table-color); border-spacing: 0; } tr { display: table-row; border-bottom: var(--table-border); } th, td { display: table-cell; height: 3.4286rem; padding: 0 0.5714rem; } th{ font-weight: 600; } button, input, optgroup, select, textarea { font-family: inherit; font-size: 100%; line-height: 1.15; margin: 0; } button { min-width: 6rem; font-weight: 600; height: 2rem; padding: 0 1.25rem; vertical-align: middle; border-radius: 2px; background-color: var(--button-color); color: var(--button-text-color); border: var(--button-border); box-shadow: var(--button-shadow); overflow: visible; } button:hover { background-color: var(--button-hover-color); color: var(--button-active-text-color); } button:active { background-color: var(--button-active-color); color: var(--button-active-text-color); box-shadow: none; } button[disabled] { background-color: var(--button-disabled-color); color: var(--button-disabled-text-color); box-shadow: none; } button:not(:last-child) { margin-right: 0.5rem; } button.secondary { background: var(--button2-color); border: var(--button2-border); color: var(--button2-text-color); box-shadow: var(--button2-shadow); } button.secondary:hover { background-color: var(--button2-hover-color); } button.secondary:active { background-color: var(--button2-active-color); } label { margin: 0 0.7143rem 0.2857rem 0; } input { background-color: var(--input-background-color); padding: 0.3571rem 0.8571rem; line-height: unset; border-width: var(--input-border-width); border-radius: 0.2143rem 0.2143rem 0.1429rem 0.1429rem; border-color: var(--input-border-color); outline-style: none; overflow: visible; margin-bottom: 1.4286rem; } input:focus { border-color: var(--input-focus-border-color); border-bottom-color: var(--input-focus-border-bottom-color); } [type=checkbox], [type=radio] { padding: 0; margin-right: 0.5rem; } hr { border: 0; height: 1px; background: var(--border-color); } /* Text styling classes */ .medium { font-size: 1rem; } .small { font-size: 0.8571rem; } .smaller { font-size: 0.7143rem; } .large { font-size: 1.2857rem; } .larger { font-size: 1.7143rem; } .danger, .warning, .alert, .error { color: var(--warning-color); } /* Font */ @font-face { font-family: 'Segoe UI Web'; src: url('https://static2.sharepointonline.com/files/fabric/assets/fonts/segoeui-westeuropean/segoeui-regular.woff2') format('woff2'), url('https://static2.sharepointonline.com/files/fabric/assets/fonts/segoeui-westeuropean/segoeui-regular.woff') format('woff'); font-weight: 400; font-style: normal; } body { -moz-osx-font-smoothing: grayscale; -webkit-font-smoothing: antialiased; font-family: 'Segoe UI', 'Segoe UI Web', -apple-system, BlinkMacSystemFont, 'Roboto', 'Helvetica Neue', sans-serif; } This CSS contains basic stylings for Teams UI. After applying the styles, the existing web app gets more consistent look-and-feel to Teams client. The CSS also includes dark and high-contrast mode. The color switch is done with CSS variables . In the next step, you will enable the theme switching functionality in JavaScript. Step 2: Import the new CSS To import the teamstyle.css so it is loaded in all pages, add this statement at the top of your northwind.css file. @import \"teamstyle.css\"; Exercise 2: Update and run the project Step 1: Modify modules\\teamsHelpers.js The Teams client supports three themes: light mode, dark mode, and high contrast mode, which is an acceissibility feature for users with low visual acuity. As the users switch the themes, your application should also switch its theme so as to blend in. To detect theme switching in Teams client we'll have to use the global microsoftTeams 's context. We 'll add a function setTheme() to switch the css between the application's native style and the team's themes. Add this code to teamsHelpers.js: // Set the CSS to reflect the desired theme function setTheme(theme) { const el = document.documentElement; el.setAttribute('data-theme', theme); }; In order to display the application in a particular theme, setTheme() applies a data-theme value in the root of the content, like, <html data-theme='dark'> , so the teamstyle.css will use a correct set of colors & styles for each theme. The color change is done with the CSS variables. Now add in-line code into teamsHelpers.js to detect current context with getContext() and set the theme to match the current theme in Microsoft Teams. The code also registers an event handler that updates the application's theme when a user changes the theme in Microsoft Teams. Note that some browsers and the Teams desktop client will not honor the await keyword for inline code; therefore this code has been wrapped in an immediately-invoked function expression . Copy and paste below code block for this purpose: // Inline code to set theme on any page using teamsHelpers (async () => { await ensureTeamsSdkInitialized(); const context = await microsoftTeams.app.getContext(); setTheme(context.app.theme); // When the theme changes, update the CSS again microsoftTeams.registerOnThemeChangeHandler((theme) => { setTheme(theme); }); })(); Step 2: Start your local project Now it's time to run your updated application and run it in Microsoft Teams. Start the application by running below command: npm start Step 3: Run the application in Teams client Once the teams tab app is added, the personal tab will open My Orders tab. The application will now have the team's native look and feel. Here's how to change themes in teams client. Notice how the teams tab app also detects and changes its theme. function showCompletionPopup() { let path = window.location.pathname; path = path.endsWith('/') ? path.slice(0, -1) : path; let pathArray = path.split('/'); let leafFolder = pathArray[pathArray.length-1]; let height = window.outerHeight / 1.5; let width = window.outerWidth / 2; window.open(`${window.origin}/app-camp/congrats/${leafFolder}`, 'Congratulations!', `width=${width}, height=${height}, left=100, top=100,`); } Congratulations! When you have finished this lab, please click this button to let us know! No personal information is collected; we only want to count how many people have completed the labs so we can continue to fund this work! Next steps Congratulations! You have completed all core application development labs in path B . It's time to choose your own adventure by doing some or all of the extended labs! Note that the extended lab files are based on the \"A\" path; specifically they are based on the lab A03 solution files. So you have two choices: Switch to Path A now by doing the labs or make a copy of the A03 solution files and apply your .env file settings there. The rest of the setup should be the same. Live dangerously and try following the labs building on the solution to lab B04 that you just completed. It has been said to work but isn't as thoroughly tested, so it's up to you if you're willing to debug the code. Here are the extended labs: Add a Configurable Tab Add a Deep link to a personal Tab Add a Dialog Add a Meeting app Add a Message Extension Selling Your SaaS-based Teams Extension","title":"B04 - Teams styling and themes"},{"location":"bespoke/B04-after-apply-styling/#lab-b04-teams-styling-and-themes","text":"This is parth of Path B, which begins with an application that uses an authorization system other than Azure AD. Are you on the right path? Expand these notes to find out! There are two options for doing the labs: The \"A\" path is for developers with apps that are already based on Azure Active Directory. The starting app uses Azure Active Directory and the Microsoft Authentication Library (MSAL). the \"B\" path is for developers with apps that use some other identity system. It includes a simple (and not secure!) cookie-based auth system based on the Employees table in the Northwind database. You will use an identity mapping scheme to allow your existing users to log in directly or via Azure AD Single Sign-On. In this lab you will begin with the application in folder B03-TeamsSSO , make changes as per the steps below to achieve what is in the folder B04-StyleAndThemes . See project structures comparison in Exercise 1. B01-begin-app: Setting up the application B02-after-teams-login: Creating a Teams application B03-after-teams-sso: Adding Azure AD SSO to your app B04-after-apply-styling: Teams styling and themes (\ud83d\udccdYou are here) In this lab you will learn to: Apply styles based on the Microsoft Teams figma to make your application look like it belongs in Microsoft Teams Display your application with the same color theme the user has selected in Microsoft Teams Switch your application's theme when the user changes the Microsoft Teams theme setting Video briefing \"B Path\" Lab Briefing","title":"Lab B04: Teams styling and themes"},{"location":"bespoke/B04-after-apply-styling/#features","text":"Apply teams styling and themes to your existing application. Display and update themes along with the Microsoft Teams client","title":"Features"},{"location":"bespoke/B04-after-apply-styling/#project-structure","text":"Project files before and after this lab (open to display \u25ba) The project structure when you start of this lab and end of this lab is as follows. Use this depiction for comparison. On your left is the contents of folder B03-after-teams-sso and on your right is the contents of folder B04-after-apply-styling . - \ud83c\udd95 New files/folders \ud83d\udd3aFiles changed Project Structure Before Project Structure After B03-after-teams-sso \u251c\u2500\u2500 client \u2502 \u251c\u2500\u2500 components \u2502 \u251c\u2500\u2500 navigation.js \u2502 \u2514\u2500\u2500 identity \u2502 \u251c\u2500\u2500 aadLogin.html \u2502 \u2514\u2500\u2500 aadLogin.js \u2502 \u251c\u2500\u2500 identityClient.js \u2502 \u2514\u2500\u2500 login.html \u2502 \u2514\u2500\u2500 login.js \u2502 \u2514\u2500\u2500 teamsLoginLauncher.html \u2502 \u2514\u2500\u2500 teamsLoginLauncher.js \u2502 \u2514\u2500\u2500 userPanel.js \u251c\u2500\u2500 modules \u2502 \u2514\u2500\u2500 env.js \u2502 \u2514\u2500\u2500 northwindDataService.js \u2502 \u2514\u2500\u2500 \ud83d\udd3ateamsHelpers.js \u251c\u2500\u2500 pages \u2502 \u2514\u2500\u2500 categories.html \u2502 \u2514\u2500\u2500 categories.js \u2502 \u2514\u2500\u2500 categoryDetails.html \u2502 \u2514\u2500\u2500 categoryDetails.js \u2502 \u2514\u2500\u2500 myOrders.html \u2502 \u2514\u2500\u2500 orderDetail.html \u2502 \u2514\u2500\u2500 orderDetail.js \u2502 \u2514\u2500\u2500 privacy.html \u2502 \u2514\u2500\u2500 productDetail.html \u2502 \u2514\u2500\u2500 productDetail.js \u2502 \u2514\u2500\u2500 termsofuse.html \u251c\u2500\u2500 index.html \u251c\u2500\u2500 index.js \u251c\u2500\u2500 \ud83d\udd3anorthwind.css \u251c\u2500\u2500 manifest \u2502 \u2514\u2500\u2500 makePackage.js \u2502 \u2514\u2500\u2500 \ud83d\udd3amanifest.template.json \u2502 \u2514\u2500\u2500 northwind32.png \u2502 \u2514\u2500\u2500 northwind192.png \u2502 \u2514\u2500\u2500 constants.js \u2502 \u2514\u2500\u2500 identityService.js \u2502 \u2514\u2500\u2500 northwindDataService.js \u2502 \u2514\u2500\u2500 server.js \u251c\u2500\u2500 .env_Sample \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 package.json \u251c\u2500\u2500 README.md B04-after-apply-styling \u251c\u2500\u2500 client \u2502 \u251c\u2500\u2500 components \u2502 \u251c\u2500\u2500 navigation.js \u2502 \u2514\u2500\u2500 identity \u2502 \u251c\u2500\u2500 aadLogin.html \u2502 \u2514\u2500\u2500 aadLogin.js \u2502 \u251c\u2500\u2500 identityClient.js \u2502 \u2514\u2500\u2500 login.html \u2502 \u2514\u2500\u2500 login.js \u2502 \u2514\u2500\u2500 teamsLoginLauncher.html \u2502 \u2514\u2500\u2500 teamsLoginLauncher.js \u2502 \u2514\u2500\u2500 userPanel.js \u251c\u2500\u2500 modules \u2502 \u2514\u2500\u2500 env.js \u2502 \u2514\u2500\u2500 northwindDataService.js \u2502 \u2514\u2500\u2500 \ud83d\udd3ateamsHelpers.js \u251c\u2500\u2500 pages \u2502 \u2514\u2500\u2500 categories.html \u2502 \u2514\u2500\u2500 categories.js \u2502 \u2514\u2500\u2500 categoryDetails.html \u2502 \u2514\u2500\u2500 categoryDetails.js \u2502 \u2514\u2500\u2500 myOrders.html \u2502 \u2514\u2500\u2500 orderDetail.html \u2502 \u2514\u2500\u2500 orderDetail.js \u2502 \u2514\u2500\u2500 privacy.html \u2502 \u2514\u2500\u2500 productDetail.html \u2502 \u2514\u2500\u2500 productDetail.js \u2502 \u2514\u2500\u2500 termsofuse.html \u251c\u2500\u2500 index.html \u251c\u2500\u2500 index.js \u251c\u2500\u2500 \ud83d\udd3anorthwind.css \u251c\u2500\u2500 \ud83c\udd95teamstyle.css \u251c\u2500\u2500 manifest \u2502 \u2514\u2500\u2500 makePackage.js \u2502 \u2514\u2500\u2500 \ud83d\udd3amanifest.template.json \u2502 \u2514\u2500\u2500 northwind32.png \u2502 \u2514\u2500\u2500 northwind192.png \u2502 \u2514\u2500\u2500 constants.js \u2502 \u2514\u2500\u2500 identityService.js \u2502 \u2514\u2500\u2500 northwindDataService.js \u2502 \u2514\u2500\u2500 server.js \u251c\u2500\u2500 .env_Sample \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 package.json \u251c\u2500\u2500 README.md","title":"Project structure"},{"location":"bespoke/B04-after-apply-styling/#exercise-1-add-css","text":"","title":"Exercise 1: Add CSS"},{"location":"bespoke/B04-after-apply-styling/#step-1-create-a-css-file-for-teams-theme-styles","text":"Create a file teamstyle.css in the client folder and copy below code block into it. These styles are based on the Teams UI Toolkit Figma . If you're working in React, you may want to use the Teams UI Toolkit React Components . :root { /* common */ --brand-color: #6264A7; --button-color: #6264A7; --button-text-color: #fff; --button-hover-color: rgb(88, 90, 150); --button-hover-text-color: #fff; --button-active-color: rgb(70, 71, 117); --button-active-text-color: #fff; --button-border: 1px solid hsla(0,0%,100%,.04); --button-shadow: rgb(0 0 0 / 25%) 0px 0.2rem 0.4rem -0.075rem; --button2-color: #fff; --button2-text-color: rgb(37, 36, 35); --button2-hover-color: rgb(237, 235, 233); --button2-active-color: rgb(225, 223, 221); --button2-border: 1px solid rgb(225, 223, 221); --button2-shadow: rgb(0 0 0 / 10%) 0px 0.2rem 0.4rem -0.075rem; --button-disabled-color: rgb(237, 235, 233); --button-disabled-text-color: rgb(200, 198, 196); --input-background-color: rgb(243, 242, 241); --input-border-color: transparent; --input-border-width: 0 0 0.1429rem 0; --input-focus-border-color: transparent; --input-focus-border-bottom-color: #6264A7; --table-color: transparent; --table-border: 1px solid rgb(237, 235, 233); --border-color: rgb(237, 235, 233); /* light theme */ --font-color: rgb(37, 36, 35); --background-color: #fff; --link-color: #6264A7; --border-color: #E1DFDD; --warning-color: #C4314B; } [data-theme=\"dark\"] { --font-color: #fff; --background-color: transparent; --link-color: #A6A7DC; --border-color: #605E5C; --warning-color: #F9526B; } [data-theme=\"contrast\"] { --brand-color: #ffff01; --font-color: #fff; --link-color: #ffff01; --background-color: transparent; --border-color: #fff; --button-color: transparent; --button-text-color: #fff; --button-hover-color: #ffff01; --button-hover-text-color: #000; --button-active-color: #1aebff; --button-active-text-color: #000; --button-border: .2rem solid #fff; --input-background-color: transparent; --input-border-color: #fff; --input-border-width: 1px; --input-focus-border-color: #1aebff; --input-focus-border-bottom-color: #1aebff; --warning-color: #ffff01; } body { background-color: var(--background-color); color: var(--font-color); box-sizing: border-box; font-size: 14px; } a, a:visited { color: var(--link-color); text-decoration: none; } a:hover, a:active { text-decoration: underline; } table, caption, tbody, tfoot, thead, tr, th, td { /*reset */ margin: 0; padding: 0; border: 0; font-size: 100%; font: inherit; vertical-align: middle; border-collapse: collapse; } table { display: table; background-color: var(--table-color); border-spacing: 0; } tr { display: table-row; border-bottom: var(--table-border); } th, td { display: table-cell; height: 3.4286rem; padding: 0 0.5714rem; } th{ font-weight: 600; } button, input, optgroup, select, textarea { font-family: inherit; font-size: 100%; line-height: 1.15; margin: 0; } button { min-width: 6rem; font-weight: 600; height: 2rem; padding: 0 1.25rem; vertical-align: middle; border-radius: 2px; background-color: var(--button-color); color: var(--button-text-color); border: var(--button-border); box-shadow: var(--button-shadow); overflow: visible; } button:hover { background-color: var(--button-hover-color); color: var(--button-active-text-color); } button:active { background-color: var(--button-active-color); color: var(--button-active-text-color); box-shadow: none; } button[disabled] { background-color: var(--button-disabled-color); color: var(--button-disabled-text-color); box-shadow: none; } button:not(:last-child) { margin-right: 0.5rem; } button.secondary { background: var(--button2-color); border: var(--button2-border); color: var(--button2-text-color); box-shadow: var(--button2-shadow); } button.secondary:hover { background-color: var(--button2-hover-color); } button.secondary:active { background-color: var(--button2-active-color); } label { margin: 0 0.7143rem 0.2857rem 0; } input { background-color: var(--input-background-color); padding: 0.3571rem 0.8571rem; line-height: unset; border-width: var(--input-border-width); border-radius: 0.2143rem 0.2143rem 0.1429rem 0.1429rem; border-color: var(--input-border-color); outline-style: none; overflow: visible; margin-bottom: 1.4286rem; } input:focus { border-color: var(--input-focus-border-color); border-bottom-color: var(--input-focus-border-bottom-color); } [type=checkbox], [type=radio] { padding: 0; margin-right: 0.5rem; } hr { border: 0; height: 1px; background: var(--border-color); } /* Text styling classes */ .medium { font-size: 1rem; } .small { font-size: 0.8571rem; } .smaller { font-size: 0.7143rem; } .large { font-size: 1.2857rem; } .larger { font-size: 1.7143rem; } .danger, .warning, .alert, .error { color: var(--warning-color); } /* Font */ @font-face { font-family: 'Segoe UI Web'; src: url('https://static2.sharepointonline.com/files/fabric/assets/fonts/segoeui-westeuropean/segoeui-regular.woff2') format('woff2'), url('https://static2.sharepointonline.com/files/fabric/assets/fonts/segoeui-westeuropean/segoeui-regular.woff') format('woff'); font-weight: 400; font-style: normal; } body { -moz-osx-font-smoothing: grayscale; -webkit-font-smoothing: antialiased; font-family: 'Segoe UI', 'Segoe UI Web', -apple-system, BlinkMacSystemFont, 'Roboto', 'Helvetica Neue', sans-serif; } This CSS contains basic stylings for Teams UI. After applying the styles, the existing web app gets more consistent look-and-feel to Teams client. The CSS also includes dark and high-contrast mode. The color switch is done with CSS variables . In the next step, you will enable the theme switching functionality in JavaScript.","title":"Step 1: Create a CSS file for Teams theme styles"},{"location":"bespoke/B04-after-apply-styling/#step-2-import-the-new-css","text":"To import the teamstyle.css so it is loaded in all pages, add this statement at the top of your northwind.css file. @import \"teamstyle.css\";","title":"Step 2: Import the new CSS"},{"location":"bespoke/B04-after-apply-styling/#exercise-2-update-and-run-the-project","text":"","title":"Exercise 2: Update and run the project"},{"location":"bespoke/B04-after-apply-styling/#step-1-modify-modulesteamshelpersjs","text":"The Teams client supports three themes: light mode, dark mode, and high contrast mode, which is an acceissibility feature for users with low visual acuity. As the users switch the themes, your application should also switch its theme so as to blend in. To detect theme switching in Teams client we'll have to use the global microsoftTeams 's context. We 'll add a function setTheme() to switch the css between the application's native style and the team's themes. Add this code to teamsHelpers.js: // Set the CSS to reflect the desired theme function setTheme(theme) { const el = document.documentElement; el.setAttribute('data-theme', theme); }; In order to display the application in a particular theme, setTheme() applies a data-theme value in the root of the content, like, <html data-theme='dark'> , so the teamstyle.css will use a correct set of colors & styles for each theme. The color change is done with the CSS variables. Now add in-line code into teamsHelpers.js to detect current context with getContext() and set the theme to match the current theme in Microsoft Teams. The code also registers an event handler that updates the application's theme when a user changes the theme in Microsoft Teams. Note that some browsers and the Teams desktop client will not honor the await keyword for inline code; therefore this code has been wrapped in an immediately-invoked function expression . Copy and paste below code block for this purpose: // Inline code to set theme on any page using teamsHelpers (async () => { await ensureTeamsSdkInitialized(); const context = await microsoftTeams.app.getContext(); setTheme(context.app.theme); // When the theme changes, update the CSS again microsoftTeams.registerOnThemeChangeHandler((theme) => { setTheme(theme); }); })();","title":"Step 1: Modify modules\\teamsHelpers.js"},{"location":"bespoke/B04-after-apply-styling/#step-2-start-your-local-project","text":"Now it's time to run your updated application and run it in Microsoft Teams. Start the application by running below command: npm start","title":"Step 2: Start your local project"},{"location":"bespoke/B04-after-apply-styling/#step-3-run-the-application-in-teams-client","text":"Once the teams tab app is added, the personal tab will open My Orders tab. The application will now have the team's native look and feel. Here's how to change themes in teams client. Notice how the teams tab app also detects and changes its theme. function showCompletionPopup() { let path = window.location.pathname; path = path.endsWith('/') ? path.slice(0, -1) : path; let pathArray = path.split('/'); let leafFolder = pathArray[pathArray.length-1]; let height = window.outerHeight / 1.5; let width = window.outerWidth / 2; window.open(`${window.origin}/app-camp/congrats/${leafFolder}`, 'Congratulations!', `width=${width}, height=${height}, left=100, top=100,`); }","title":"Step 3: Run the application in Teams client"},{"location":"bespoke/B04-after-apply-styling/#congratulations","text":"When you have finished this lab, please click this button to let us know! No personal information is collected; we only want to count how many people have completed the labs so we can continue to fund this work!","title":"Congratulations!"},{"location":"bespoke/B04-after-apply-styling/#next-steps","text":"Congratulations! You have completed all core application development labs in path B . It's time to choose your own adventure by doing some or all of the extended labs! Note that the extended lab files are based on the \"A\" path; specifically they are based on the lab A03 solution files. So you have two choices: Switch to Path A now by doing the labs or make a copy of the A03 solution files and apply your .env file settings there. The rest of the setup should be the same. Live dangerously and try following the labs building on the solution to lab B04 that you just completed. It has been said to work but isn't as thoroughly tested, so it's up to you if you're willing to debug the code. Here are the extended labs: Add a Configurable Tab Add a Deep link to a personal Tab Add a Dialog Add a Meeting app Add a Message Extension Selling Your SaaS-based Teams Extension","title":"Next steps"},{"location":"congrats/A01-begin-app/","text":"(function(c,l,a,r,i,t,y){ c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)}; t=l.createElement(r);t.async=1;t.src=\"https://www.clarity.ms/tag/\"+i; y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y); })(window, document, \"clarity\", \"script\", \"dfh6fjbr5x\"); Congratulations! You have completed App Camp lab A-01! Thanks for participating in App Camp and for allowing us to count your lab completion. (No personal is collected; we only want to count how many people have completed the labs so we can continue to fund this work!) Close","title":"A01 begin app"},{"location":"congrats/A01-begin-app/#congratulations","text":"You have completed App Camp lab A-01! Thanks for participating in App Camp and for allowing us to count your lab completion. (No personal is collected; we only want to count how many people have completed the labs so we can continue to fund this work!) Close","title":"Congratulations!"},{"location":"congrats/A02-after-teams-sso/","text":"(function(c,l,a,r,i,t,y){ c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)}; t=l.createElement(r);t.async=1;t.src=\"https://www.clarity.ms/tag/\"+i; y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y); })(window, document, \"clarity\", \"script\", \"dfh6fjbr5x\"); Congratulations! You have completed App Camp lab A-02! Thanks for participating in App Camp and for allowing us to count your lab completion. (No personal is collected; we only want to count how many people have completed the labs so we can continue to fund this work!) Close","title":"A02 after teams sso"},{"location":"congrats/A02-after-teams-sso/#congratulations","text":"You have completed App Camp lab A-02! Thanks for participating in App Camp and for allowing us to count your lab completion. (No personal is collected; we only want to count how many people have completed the labs so we can continue to fund this work!) Close","title":"Congratulations!"},{"location":"congrats/A03-after-apply-styling/","text":"(function(c,l,a,r,i,t,y){ c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)}; t=l.createElement(r);t.async=1;t.src=\"https://www.clarity.ms/tag/\"+i; y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y); })(window, document, \"clarity\", \"script\", \"dfh6fjbr5x\"); Congratulations! You have completed App Camp lab A-03! Thanks for participating in App Camp and for allowing us to count your lab completion. (No personal is collected; we only want to count how many people have completed the labs so we can continue to fund this work!) Close","title":"A03 after apply styling"},{"location":"congrats/A03-after-apply-styling/#congratulations","text":"You have completed App Camp lab A-03! Thanks for participating in App Camp and for allowing us to count your lab completion. (No personal is collected; we only want to count how many people have completed the labs so we can continue to fund this work!) Close","title":"Congratulations!"},{"location":"congrats/B01-begin-app/","text":"(function(c,l,a,r,i,t,y){ c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)}; t=l.createElement(r);t.async=1;t.src=\"https://www.clarity.ms/tag/\"+i; y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y); })(window, document, \"clarity\", \"script\", \"dfh6fjbr5x\"); Congratulations! You have completed App Camp lab B-01! Thanks for participating in App Camp and for allowing us to count your lab completion. (No personal is collected; we only want to count how many people have completed the labs so we can continue to fund this work!) Close","title":"B01 begin app"},{"location":"congrats/B01-begin-app/#congratulations","text":"You have completed App Camp lab B-01! Thanks for participating in App Camp and for allowing us to count your lab completion. (No personal is collected; we only want to count how many people have completed the labs so we can continue to fund this work!) Close","title":"Congratulations!"},{"location":"congrats/B02-after-teams-login/","text":"(function(c,l,a,r,i,t,y){ c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)}; t=l.createElement(r);t.async=1;t.src=\"https://www.clarity.ms/tag/\"+i; y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y); })(window, document, \"clarity\", \"script\", \"dfh6fjbr5x\"); Congratulations! You have completed App Camp lab B-02! Thanks for participating in App Camp and for allowing us to count your lab completion. (No personal is collected; we only want to count how many people have completed the labs so we can continue to fund this work!) Close","title":"B02 after teams login"},{"location":"congrats/B02-after-teams-login/#congratulations","text":"You have completed App Camp lab B-02! Thanks for participating in App Camp and for allowing us to count your lab completion. (No personal is collected; we only want to count how many people have completed the labs so we can continue to fund this work!) Close","title":"Congratulations!"},{"location":"congrats/B03-after-teams-sso/","text":"(function(c,l,a,r,i,t,y){ c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)}; t=l.createElement(r);t.async=1;t.src=\"https://www.clarity.ms/tag/\"+i; y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y); })(window, document, \"clarity\", \"script\", \"dfh6fjbr5x\"); Congratulations! You have completed App Camp lab B-03! Thanks for participating in App Camp and for allowing us to count your lab completion. (No personal is collected; we only want to count how many people have completed the labs so we can continue to fund this work!) Close","title":"B03 after teams sso"},{"location":"congrats/B03-after-teams-sso/#congratulations","text":"You have completed App Camp lab B-03! Thanks for participating in App Camp and for allowing us to count your lab completion. (No personal is collected; we only want to count how many people have completed the labs so we can continue to fund this work!) Close","title":"Congratulations!"},{"location":"congrats/B04-after-apply-styling/","text":"(function(c,l,a,r,i,t,y){ c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)}; t=l.createElement(r);t.async=1;t.src=\"https://www.clarity.ms/tag/\"+i; y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y); })(window, document, \"clarity\", \"script\", \"dfh6fjbr5x\"); Congratulations! You have completed App Camp lab B-04! Thanks for participating in App Camp and for allowing us to count your lab completion. (No personal is collected; we only want to count how many people have completed the labs so we can continue to fund this work!) Close","title":"B04 after apply styling"},{"location":"congrats/B04-after-apply-styling/#congratulations","text":"You have completed App Camp lab B-04! Thanks for participating in App Camp and for allowing us to count your lab completion. (No personal is collected; we only want to count how many people have completed the labs so we can continue to fund this work!) Close","title":"Congratulations!"},{"location":"congrats/ConfigurableTab/","text":"(function(c,l,a,r,i,t,y){ c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)}; t=l.createElement(r);t.async=1;t.src=\"https://www.clarity.ms/tag/\"+i; y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y); })(window, document, \"clarity\", \"script\", \"dfh6fjbr5x\"); Congratulations! You have completed the Configurable Tab lab in App Camp! Thanks for participating in App Camp and for allowing us to count your lab completion. (No personal is collected; we only want to count how many people have completed the labs so we can continue to fund this work!) Close","title":"ConfigurableTab"},{"location":"congrats/ConfigurableTab/#congratulations","text":"You have completed the Configurable Tab lab in App Camp! Thanks for participating in App Camp and for allowing us to count your lab completion. (No personal is collected; we only want to count how many people have completed the labs so we can continue to fund this work!) Close","title":"Congratulations!"},{"location":"congrats/Deeplink/","text":"(function(c,l,a,r,i,t,y){ c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)}; t=l.createElement(r);t.async=1;t.src=\"https://www.clarity.ms/tag/\"+i; y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y); })(window, document, \"clarity\", \"script\", \"dfh6fjbr5x\"); Congratulations! You have completed the Deep Link lab in App Camp! Thanks for participating in App Camp and for allowing us to count your lab completion. (No personal is collected; we only want to count how many people have completed the labs so we can continue to fund this work!) Close","title":"Deeplink"},{"location":"congrats/Deeplink/#congratulations","text":"You have completed the Deep Link lab in App Camp! Thanks for participating in App Camp and for allowing us to count your lab completion. (No personal is collected; we only want to count how many people have completed the labs so we can continue to fund this work!) Close","title":"Congratulations!"},{"location":"congrats/Dialog/","text":"(function(c,l,a,r,i,t,y){ c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)}; t=l.createElement(r);t.async=1;t.src=\"https://www.clarity.ms/tag/\"+i; y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y); })(window, document, \"clarity\", \"script\", \"dfh6fjbr5x\"); Congratulations! You have completed the Dialog lab in App Camp! Thanks for participating in App Camp and for allowing us to count your lab completion. (No personal is collected; we only want to count how many people have completed the labs so we can continue to fund this work!) Close","title":"Dialog"},{"location":"congrats/Dialog/#congratulations","text":"You have completed the Dialog lab in App Camp! Thanks for participating in App Camp and for allowing us to count your lab completion. (No personal is collected; we only want to count how many people have completed the labs so we can continue to fund this work!) Close","title":"Congratulations!"},{"location":"congrats/MeetingConfigurableTab/","text":"(function(c,l,a,r,i,t,y){ c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)}; t=l.createElement(r);t.async=1;t.src=\"https://www.clarity.ms/tag/\"+i; y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y); })(window, document, \"clarity\", \"script\", \"dfh6fjbr5x\"); Congratulations! You have completed the Meeting App with Configurable Tablab in App Camp! Thanks for participating in App Camp and for allowing us to count your lab completion. (No personal is collected; we only want to count how many people have completed the labs so we can continue to fund this work!) Close","title":"MeetingConfigurableTab"},{"location":"congrats/MeetingConfigurableTab/#congratulations","text":"You have completed the Meeting App with Configurable Tablab in App Camp! Thanks for participating in App Camp and for allowing us to count your lab completion. (No personal is collected; we only want to count how many people have completed the labs so we can continue to fund this work!) Close","title":"Congratulations!"},{"location":"congrats/MessagingExtension/","text":"(function(c,l,a,r,i,t,y){ c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)}; t=l.createElement(r);t.async=1;t.src=\"https://www.clarity.ms/tag/\"+i; y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y); })(window, document, \"clarity\", \"script\", \"dfh6fjbr5x\"); Congratulations! You have completed the Messaging Extension lab in App Camp! Thanks for participating in App Camp and for allowing us to count your lab completion. (No personal is collected; we only want to count how many people have completed the labs so we can continue to fund this work!) Close","title":"MessagingExtension"},{"location":"congrats/MessagingExtension/#congratulations","text":"You have completed the Messaging Extension lab in App Camp! Thanks for participating in App Camp and for allowing us to count your lab completion. (No personal is collected; we only want to count how many people have completed the labs so we can continue to fund this work!) Close","title":"Congratulations!"},{"location":"congrats/Monetization/","text":"(function(c,l,a,r,i,t,y){ c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)}; t=l.createElement(r);t.async=1;t.src=\"https://www.clarity.ms/tag/\"+i; y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y); })(window, document, \"clarity\", \"script\", \"dfh6fjbr5x\"); Congratulations! You have completed the Monetization lab in App Camp! Thanks for participating in App Camp and for allowing us to count your lab completion. (No personal is collected; we only want to count how many people have completed the labs so we can continue to fund this work!) Close","title":"Monetization"},{"location":"congrats/Monetization/#congratulations","text":"You have completed the Monetization lab in App Camp! Thanks for participating in App Camp and for allowing us to count your lab completion. (No personal is collected; we only want to count how many people have completed the labs so we can continue to fund this work!) Close","title":"Congratulations!"},{"location":"includes/a-path-links/","text":"A01 - Start with Azure Active Directory A02 - Create a Teams app with Azure AD Single Sign-On A03 - Teams styling and themes","title":"A path links"},{"location":"includes/are-you-on-the-right-path/","text":"Are you on the right path? Expand these notes to find out! There are two options for doing the labs: The \"A\" path is for developers with apps that are already based on Azure Active Directory. The starting app uses Azure Active Directory and the Microsoft Authentication Library (MSAL). the \"B\" path is for developers with apps that use some other identity system. It includes a simple (and not secure!) cookie-based auth system based on the Employees table in the Northwind database. You will use an identity mapping scheme to allow your existing users to log in directly or via Azure AD Single Sign-On.","title":"Are you on the right path"},{"location":"includes/b-path-links/","text":"B01 - Start with a non-Azure Active Directory Identity System B02 - Teams App with Bespoke Authentication B03 - Enable Azure AD Single Sign-On B04 - Teams styling and themes","title":"B path links"},{"location":"includes/extended-lab-intro/","text":"Important! This lab builds on the completed solution to lab A03-after-apply-styling.md , which is the last of the \"core\" labs. If you haven't done them, you can start here .","title":"Extended lab intro"},{"location":"includes/extended-lab-links/","text":"Add a Configurable Tab Add a Deep link to a personal Tab Add a Dialog Add a Meeting app Add a Message Extension Selling Your SaaS-based Teams Extension","title":"Extended lab links"},{"location":"includes/heading/","text":"(function(c,l,a,r,i,t,y){ c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)}; t=l.createElement(r);t.async=1;t.src=\"https://www.clarity.ms/tag/\"+i; y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y); })(window, document, \"clarity\", \"script\", \"dfh6fjbr5x\");","title":"Heading"},{"location":"includes/i-finished/","text":"function showCompletionPopup() { let path = window.location.pathname; path = path.endsWith('/') ? path.slice(0, -1) : path; let pathArray = path.split('/'); let leafFolder = pathArray[pathArray.length-1]; let height = window.outerHeight / 1.5; let width = window.outerWidth / 2; window.open(`${window.origin}/app-camp/congrats/${leafFolder}`, 'Congratulations!', `width=${width}, height=${height}, left=100, top=100,`); } Congratulations! When you have finished this lab, please click this button to let us know! No personal information is collected; we only want to count how many people have completed the labs so we can continue to fund this work!","title":"I finished"},{"location":"includes/i-finished/#congratulations","text":"When you have finished this lab, please click this button to let us know! No personal information is collected; we only want to count how many people have completed the labs so we can continue to fund this work!","title":"Congratulations!"},{"location":"includes/issuesLink/","text":"For the latest issues, or to file a bug report, see the github issues list for this repository.","title":"issuesLink"},{"location":"internal/labFormat/","text":"(function(c,l,a,r,i,t,y){ c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)}; t=l.createElement(r);t.async=1;t.src=\"https://www.clarity.ms/tag/\"+i; y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y); })(window, document, \"clarity\", \"script\", \"dfh6fjbr5x\"); Guide to formatting lab content Formatting text elements These text elements are embedded into the lab instructions, so the formatting is always in-line Element Treatment Example Function names monospaced with parenthesis Then, call myFunction() to do something ... Language keywords monospaced ... insert at the top of the try block ... Symbols in code (variable, object names etc.) monospaced ... the foo object contains something random ... File and folder names bold Copy the contents of foo.js into the bar folder Text on screen enclose in double quotes Now click on the \"foo\" button Includes To include content from the /docs/includes folder, use this format: Hyperlinks Links within the labs can be relative and should open within the current window like this . Links that go outside the labs, including links to source code in the same repo, should open a new window like this Please add this query string to links to Microsoft documentation: ?WT.mc_id=m365-58890-cxa Admonitions Challenge Here's something to try on your own Note Use this format to emphasize or clarify the instructions Tip Use this format to show tips and best practices Warning Use this format to warn the student about a common pitfall in completing the labs Danger Use this format to warn the student about security issues or stability issues that may arise in a production application Video briefing Caption Video briefing Caption More information Caption 1 Caption 2 Caption 3 TL;DR Use this format to provide ancillary details that may be of interest but are not essential","title":"labFormat"},{"location":"internal/labFormat/#guide-to-formatting-lab-content","text":"","title":"Guide to formatting lab content"},{"location":"internal/labFormat/#formatting-text-elements","text":"These text elements are embedded into the lab instructions, so the formatting is always in-line Element Treatment Example Function names monospaced with parenthesis Then, call myFunction() to do something ... Language keywords monospaced ... insert at the top of the try block ... Symbols in code (variable, object names etc.) monospaced ... the foo object contains something random ... File and folder names bold Copy the contents of foo.js into the bar folder Text on screen enclose in double quotes Now click on the \"foo\" button","title":"Formatting text elements"},{"location":"internal/labFormat/#includes","text":"To include content from the /docs/includes folder, use this format:","title":"Includes"},{"location":"internal/labFormat/#hyperlinks","text":"Links within the labs can be relative and should open within the current window like this . Links that go outside the labs, including links to source code in the same repo, should open a new window like this Please add this query string to links to Microsoft documentation: ?WT.mc_id=m365-58890-cxa","title":"Hyperlinks"},{"location":"internal/labFormat/#admonitions","text":"Challenge Here's something to try on your own Note Use this format to emphasize or clarify the instructions Tip Use this format to show tips and best practices Warning Use this format to warn the student about a common pitfall in completing the labs Danger Use this format to warn the student about security issues or stability issues that may arise in a production application Video briefing Caption Video briefing Caption More information Caption 1 Caption 2 Caption 3 TL;DR Use this format to provide ancillary details that may be of interest but are not essential","title":"Admonitions"},{"location":"internal/labOutlineOrTemplate/","text":"(function(c,l,a,r,i,t,y){ c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)}; t=l.createElement(r);t.async=1;t.src=\"https://www.clarity.ms/tag/\"+i; y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y); })(window, document, \"clarity\", \"script\", \"dfh6fjbr5x\"); Lab xxx: [Lab title] Overview Describe the lab here The completed solution can be found in the A02-after-teams-sso folder, but the instructions will guide you through modifying the app running in your working folder. In this lab you will learn to: first thing second thing more things Video briefing xxx Lab Briefing Table of Contents (open to display \u25ba) Overview Features Project structure Exercise 1: Authorize Microsoft Teams to log users into your application Step 1: Return to your app registration Step 2: Add the Teams client applications Known issues References Next Steps Features First feature added in the lab Second feature added in the lab ... Project structure Project files before and after this lab (open to display \u25ba) The project structure when you start of this lab and end of this lab is as follows. Use this depiction for comparison. On your left is the contents of folder A03-after-apply-styling and on your right is the contents of folder xxx . \ud83c\udd95 New files/folders \ud83d\udd3aFiles changed Project Structure Before Project Structure After A03-after-apply-styling \u251c\u2500\u2500 client \u2502 \u251c\u2500\u2500 components \u2502 \u251c\u2500\u2500 navigation.js \u2502 \u2514\u2500\u2500 identity \u2502 \u251c\u2500\u2500 identityClient.js \u2502 \u2514\u2500\u2500 userPanel.js \u251c\u2500\u2500 modules \u2502 \u2514\u2500\u2500 env.js \u2502 \u2514\u2500\u2500 northwindDataService.js \u2502 \u2514\u2500\u2500 teamsHelpers.js \u251c\u2500\u2500 pages \u2502 \u2514\u2500\u2500 categories.html \u2502 \u2514\u2500\u2500 categories.js \u2502 \u2514\u2500\u2500 categoryDetails.html \u2502 \u2514\u2500\u2500 categoryDetails.js \u2502 \u2514\u2500\u2500 myOrders.html \u2502 \u2514\u2500\u2500 orderDetail.html \u2502 \u2514\u2500\u2500 orderDetail.js \u2502 \u2514\u2500\u2500 privacy.html \u2502 \u2514\u2500\u2500 productDetail.html \u2502 \u2514\u2500\u2500 productDetail.js \u2502 \u2514\u2500\u2500 termsofuse.html \u251c\u2500\u2500 index.html \u251c\u2500\u2500 index.js \u251c\u2500\u2500 northwind.css \u251c\u2500\u2500 teamstyle.css \u251c\u2500\u2500 manifest \u2502 \u2514\u2500\u2500 makePackage.js \u2502 \u2514\u2500\u2500 manifest.template.json \u2502 \u2514\u2500\u2500 northwind32.png \u2502 \u2514\u2500\u2500 northwind192.png \u2502 \u2514\u2500\u2500 constants.js \u2502 \u2514\u2500\u2500 identityService.js \u2502 \u2514\u2500\u2500 northwindDataService.js \u2502 \u2514\u2500\u2500 server.js \u251c\u2500\u2500 .env_Sample \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 package.json \u2514\u2500\u2500 README.md xxx (this lab) -- add \ud83c\udd95 and \ud83d\udd3a \u251c\u2500\u2500 client \u2502 \u251c\u2500\u2500 components \u2502 \u251c\u2500\u2500 navigation.js \u2502 \u2514\u2500\u2500 identity \u2502 \u251c\u2500\u2500 identityClient.js \u2502 \u2514\u2500\u2500 userPanel.js \u251c\u2500\u2500 modules \u2502 \u2514\u2500\u2500 env.js \u2502 \u2514\u2500\u2500 northwindDataService.js \u2502 \u2514\u2500\u2500 teamsHelpers.js \u251c\u2500\u2500 pages \u2502 \u2514\u2500\u2500 categories.html \u2502 \u2514\u2500\u2500 categories.js \u2502 \u2514\u2500\u2500 categoryDetails.html \u2502 \u2514\u2500\u2500 categoryDetails.js \u2502 \u2514\u2500\u2500 myOrders.html \u2502 \u2514\u2500\u2500 orderDetail.html \u2502 \u2514\u2500\u2500 orderDetail.js \u2502 \u2514\u2500\u2500 privacy.html \u2502 \u2514\u2500\u2500 productDetail.html \u2502 \u2514\u2500\u2500 productDetail.js \u2502 \u2514\u2500\u2500 termsofuse.html \u251c\u2500\u2500 index.html \u251c\u2500\u2500 index.js \u251c\u2500\u2500 northwind.css \u251c\u2500\u2500 teamstyle.css \u251c\u2500\u2500 manifest \u2502 \u2514\u2500\u2500 makePackage.js \u2502 \u2514\u2500\u2500 manifest.template.json \u2502 \u2514\u2500\u2500 northwind32.png \u2502 \u2514\u2500\u2500 northwind192.png \u2502 \u2514\u2500\u2500 constants.js \u2502 \u2514\u2500\u2500 identityService.js \u2502 \u2514\u2500\u2500 northwindDataService.js \u2502 \u2514\u2500\u2500 server.js \u251c\u2500\u2500 .env_Sample \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 package.json \u2514\u2500\u2500 README.md Exercise 1: (High-level description) Step 1: (do a thing) Step 2: (do another thing) Known issues For the latest issues, or to file a bug report, see the github issues list for this repository. References Single sign-on (SSO) support for Tabs Next Steps After completing this lab, you may continue to the next lab in this learning path, A03-after-apply-styling: Teams styling and themes .","title":"labOutlineOrTemplate"},{"location":"internal/labOutlineOrTemplate/#lab-xxx-lab-title","text":"","title":"Lab xxx: [Lab title]"},{"location":"internal/labOutlineOrTemplate/#overview","text":"Describe the lab here The completed solution can be found in the A02-after-teams-sso folder, but the instructions will guide you through modifying the app running in your working folder. In this lab you will learn to: first thing second thing more things Video briefing xxx Lab Briefing Table of Contents (open to display \u25ba) Overview Features Project structure Exercise 1: Authorize Microsoft Teams to log users into your application Step 1: Return to your app registration Step 2: Add the Teams client applications Known issues References Next Steps","title":"Overview"},{"location":"internal/labOutlineOrTemplate/#features","text":"First feature added in the lab Second feature added in the lab ...","title":"Features"},{"location":"internal/labOutlineOrTemplate/#project-structure","text":"Project files before and after this lab (open to display \u25ba) The project structure when you start of this lab and end of this lab is as follows. Use this depiction for comparison. On your left is the contents of folder A03-after-apply-styling and on your right is the contents of folder xxx . \ud83c\udd95 New files/folders \ud83d\udd3aFiles changed Project Structure Before Project Structure After A03-after-apply-styling \u251c\u2500\u2500 client \u2502 \u251c\u2500\u2500 components \u2502 \u251c\u2500\u2500 navigation.js \u2502 \u2514\u2500\u2500 identity \u2502 \u251c\u2500\u2500 identityClient.js \u2502 \u2514\u2500\u2500 userPanel.js \u251c\u2500\u2500 modules \u2502 \u2514\u2500\u2500 env.js \u2502 \u2514\u2500\u2500 northwindDataService.js \u2502 \u2514\u2500\u2500 teamsHelpers.js \u251c\u2500\u2500 pages \u2502 \u2514\u2500\u2500 categories.html \u2502 \u2514\u2500\u2500 categories.js \u2502 \u2514\u2500\u2500 categoryDetails.html \u2502 \u2514\u2500\u2500 categoryDetails.js \u2502 \u2514\u2500\u2500 myOrders.html \u2502 \u2514\u2500\u2500 orderDetail.html \u2502 \u2514\u2500\u2500 orderDetail.js \u2502 \u2514\u2500\u2500 privacy.html \u2502 \u2514\u2500\u2500 productDetail.html \u2502 \u2514\u2500\u2500 productDetail.js \u2502 \u2514\u2500\u2500 termsofuse.html \u251c\u2500\u2500 index.html \u251c\u2500\u2500 index.js \u251c\u2500\u2500 northwind.css \u251c\u2500\u2500 teamstyle.css \u251c\u2500\u2500 manifest \u2502 \u2514\u2500\u2500 makePackage.js \u2502 \u2514\u2500\u2500 manifest.template.json \u2502 \u2514\u2500\u2500 northwind32.png \u2502 \u2514\u2500\u2500 northwind192.png \u2502 \u2514\u2500\u2500 constants.js \u2502 \u2514\u2500\u2500 identityService.js \u2502 \u2514\u2500\u2500 northwindDataService.js \u2502 \u2514\u2500\u2500 server.js \u251c\u2500\u2500 .env_Sample \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 package.json \u2514\u2500\u2500 README.md xxx (this lab) -- add \ud83c\udd95 and \ud83d\udd3a \u251c\u2500\u2500 client \u2502 \u251c\u2500\u2500 components \u2502 \u251c\u2500\u2500 navigation.js \u2502 \u2514\u2500\u2500 identity \u2502 \u251c\u2500\u2500 identityClient.js \u2502 \u2514\u2500\u2500 userPanel.js \u251c\u2500\u2500 modules \u2502 \u2514\u2500\u2500 env.js \u2502 \u2514\u2500\u2500 northwindDataService.js \u2502 \u2514\u2500\u2500 teamsHelpers.js \u251c\u2500\u2500 pages \u2502 \u2514\u2500\u2500 categories.html \u2502 \u2514\u2500\u2500 categories.js \u2502 \u2514\u2500\u2500 categoryDetails.html \u2502 \u2514\u2500\u2500 categoryDetails.js \u2502 \u2514\u2500\u2500 myOrders.html \u2502 \u2514\u2500\u2500 orderDetail.html \u2502 \u2514\u2500\u2500 orderDetail.js \u2502 \u2514\u2500\u2500 privacy.html \u2502 \u2514\u2500\u2500 productDetail.html \u2502 \u2514\u2500\u2500 productDetail.js \u2502 \u2514\u2500\u2500 termsofuse.html \u251c\u2500\u2500 index.html \u251c\u2500\u2500 index.js \u251c\u2500\u2500 northwind.css \u251c\u2500\u2500 teamstyle.css \u251c\u2500\u2500 manifest \u2502 \u2514\u2500\u2500 makePackage.js \u2502 \u2514\u2500\u2500 manifest.template.json \u2502 \u2514\u2500\u2500 northwind32.png \u2502 \u2514\u2500\u2500 northwind192.png \u2502 \u2514\u2500\u2500 constants.js \u2502 \u2514\u2500\u2500 identityService.js \u2502 \u2514\u2500\u2500 northwindDataService.js \u2502 \u2514\u2500\u2500 server.js \u251c\u2500\u2500 .env_Sample \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 package.json \u2514\u2500\u2500 README.md","title":"Project structure"},{"location":"internal/labOutlineOrTemplate/#exercise-1-high-level-description","text":"","title":"Exercise 1: (High-level description)"},{"location":"internal/labOutlineOrTemplate/#step-1-do-a-thing","text":"","title":"Step 1: (do a thing)"},{"location":"internal/labOutlineOrTemplate/#step-2-do-another-thing","text":"","title":"Step 2: (do another thing)"},{"location":"internal/labOutlineOrTemplate/#known-issues","text":"For the latest issues, or to file a bug report, see the github issues list for this repository.","title":"Known issues"},{"location":"internal/labOutlineOrTemplate/#references","text":"Single sign-on (SSO) support for Tabs","title":"References"},{"location":"internal/labOutlineOrTemplate/#next-steps","text":"After completing this lab, you may continue to the next lab in this learning path, A03-after-apply-styling: Teams styling and themes .","title":"Next Steps"},{"location":"supplemental/MonetizationLabSetup/","text":"(function(c,l,a,r,i,t,y){ c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)}; t=l.createElement(r);t.async=1;t.src=\"https://www.clarity.ms/tag/\"+i; y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y); })(window, document, \"clarity\", \"script\", \"dfh6fjbr5x\"); Deploying the sample App Source Simulator and Licensing service The lab Selling your SaaS-based Teams Extension utilizes a sample \"App Source\" (which stands in for the real App Source or the Teams app store) and a licensing service (which you would write for your own application). If you wish to install these services yourself, here are the instructions. Table of Contents (open to display \u25ba) Exercise 1: Download source code for lab Exercise 2: Deploy resources to Azure Step 1: Update ARM parameters file Step 2: Overcoming install errors Step 3: Deploy the ARM template with PowerShell Step 4: Deploy the applications to Azure Step 5: Update .env file with deployed resources. Exercise 3: Set application permissions Step 1: Return to the Northwind Orders app registration Step 2: Add permission to call the licensing application Step 2A (ONLY IF NEEDED): Add permission across tenants Step 3: Consent to the permission Exercise 4: Northwind Orders calls the licensing service Step 1: Add a server side function to validate the user has a license Step 2: Add a server side API to validate the user's license Step 3: Add client pages to display a license error Step 4: Check if the user has a license Step 5: Call the license API Exercise 5: Run the application Step 1: Run Teams without a license Step 2: \"Purchase\" a subscription and set licensing policy Step 3: Run the application in Teams Over the course of these exercises you will complete the following lab goals. Deploy the AppSource simulator and sample SaaS fulfillment and licensing service in Microsoft Azure. Observe the interactions between AppSource and a SaaS landing page in a simulated environment Connect the Northwind Orders application to the sample SaaS licensing service to enforce licenses for Microsoft Teams users Features added in this lab *AppSource * simulator enabling a customer can \"purchase\" a subscription to your application Sample web service that fulfills this purchase and manages licenses for Microsoft Teams users to use the Northwind Orders application Northwind Orders application checks to ensure Microsoft Teams users are licensed or displays an error page Lab prerequisites This lab requires the following prerequisites. An active Azure subscription on your own Azure tenant. An active M365 tenant, which can be the one you created in the prerequisites lab. PowerShell 7 (This is cross-platform and will run on MacOS and Linux) .NET Core 3.1 SDK (This is cross-platform and will run on MacOS and Linux) .NET Framework 4.8 Developer Pack Note If you want to run or modify these applications locally, you may find it helpful to install Visual Studio 2022 for Windows. The free Community edition will work fine. During installation, select the following modules to be added to Visual Studio. ASP.NET and web development Azure development Office/SharePoint development .NET cross-platform development Install the prerequisites Install PowerShell 7 Install the following PowerShell modules (You will need an elevated prompt) Microsoft Graph PowerShell SDK powershell Install-Module Microsoft.Graph -AllowClobber -Force Azure Az PowerShell module powershell Install-Module -Name Az -Scope CurrentUser -Repository PSGallery -AllowClobber -Force 3. Install .NET Core 3.1 SDK 4. .NET Framework 4.8 Developer Pack Exercise 1: Download source code for lab To complete this lab you'll deploy the following to Azure. Northwind Web App - The Northwind SaaS application License Service Web API - An API that serves as a licensing service AppSource Simulator - An application that simulates the AppSource SQL Server and database You'll create the three applications and their supporting infrastructure using automated deployment scripts called ARM templates . Download the source code needed for these services Go to https://github.com/OfficeDev/office-add-in-saas-monetization-sample . Clone or download the project to your local machine. Exercise 2: Deploy resources to Azure In this exercise you will deploy resources into your Azure subscription using an ARM template. These resources will all share the same resource group. They include the three web applications and a SQL server instance with a database. Step 1: Update ARM parameters file In the project you just downloaded in Exercise 1, Step 2, go to folder office-add-in-saas-monetization-sample/Deployment_SaaS_Resources/ in your text editor. Open the ARMParameters.json file and note the following parameters. text - webAppSiteName - webApiSiteName - resourceMockWebSiteName - domainName - directoryId (Directory (tenant) ID) - sqlAdministratorLogin - sqlAdministratorLoginPassword - sqlMockDatabaseName - sqlSampleDatabaseName Enter a unique name for each web app and web site in the parameter list shown below because each one must have a unique name across all of Azure. All of the parameters that correspond to web apps and sites in the following list end in SiteName . Note If you need assistance findinn your domainName and directoryId , please refer to this article . Based on the subscription you are using, you may change the location where your azure resources are deployed. To change this, find the DeployTemplate.ps1 file and search for variable $location . By default it is centralus but you can change it to a region near you, such as eastus . Leave the rest of the configuration in file ARMParameters.json as is, this will be automatically filled in after scripts deploy the resources. In a Powershell 7 window, change to the ./Deployment_SaaS_Resources directory. Run the following command. You will be prompted to sign in and accept a Permissions requested dialog as shown below. powershell Connect-Graph -Scopes \"Application.ReadWrite.All, Directory.AccessAsUser.All DelegatedPermissionGrant.ReadWrite.All Directory.ReadWrite.All\" Click Accept . Once accepted, the browser will redirect and show the below message. You can close the browser and continue with the PowerShell command line. In the same PowerShell terminal window run .\\InstallApps.ps1 . Note This step adds Microsoft Graph PowerShell in Azure Active Directory under Enterprise Applications with the necessary permissions so we can create the needed applications for this particular exercise using its commands. Warning You might get an error as shown below. It depends on the execution policy settings in PowerShell. If you do get the error, move to Step 2 . If you do not get the error keep going . Copy the values from the output and later you will need these values to update the code and . env file for deploying add-ins. These values will also be pre-populated in ARMParameters.json . Do not change this file. Note how the ARMParameters.json file is now updated with the values of applications deployed. Since you did not get the PowerShell error, move to Step 3 . Step 2: Overcoming install errors Note This step is only needed if the previous step ended in an error. The error you experienced above is likely due to the execution policy of your PowerShell terminal. Here you will set the PowerShell execution policy to be less restrictive and then re-run the install script. You will set the execution policy to Bypass for now. Read more on execution policies here . Run below PowerShell command. powershell Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass Now re-run .\\InstallApps.ps1 The script should now run to create all three applications in Azure AD. At the end of the script, your command line should display below information.: Copy the values from the output and later you will need these values to update the code and .env file for deploying Add-ins. These values will also be pre-populated in ARMParameters.json . Do not change this file. Notice how the ARMParameters.json file is now updated with the values of applications deployed. Step 3: Deploy the ARM template with PowerShell Open PowerShell 7 and run the Powershell command Connect-AzAccount . This will redirect you to login page. Confirm with the Global admin credentials. You will be redirected to a page displaying below. Close the browser and continue with PowerShell. You will see similar output to that shown below in your command line, if everything is okay. Run the script .\\DeployTemplate.ps1 . When prompted, enter the name of the resource group to create. Your resources will start to get deployed one after the other and you'll see the output as shown below if everything is okay. You'll get a message on the command line that the ARM Template deployment was successfully as shown below. Go to the App registrations in Azure AD in Azure portal. Use this link to navigate to it. Under All applications , filter with Display name Contoso Monetization . You should see three apps as shown in the screen below: Step 4: Deploy the applications to Azure Here you'll deploy the server side code for the three applications. In the command line, change to the .\\MonetizationCodeSample directory. Run the script .\\PublishSaaSApps.ps1 . When prompted, enter the same resource group name you chose earlier. You will see the source code in your local machine getting built and packaged. Note You may see some warnings about file expiration, please ignore. The final messages may look like the image below. Step 5: Complete the monetization lab At this point you should be able to complete the Selling your SaaS-based Teams Extension lab using these values in the .env file, and granting permission to the application your just registered. SAAS_API=https://(webApiSiteName).azurewebsites.net/api/Subscriptions/CheckOrActivateLicense SAAS_SCOPES=api://(webApiClientId)/user_impersonation OFFER_ID=contoso_o365_addin Replace the values <webApiSiteName> and <webApiClientId> with the values from your ARMParameters.json file. Try visiting the AppSource simulator, which is at https://(webAppSiteName).azurewebsites.net ; you should be able to log in using your tenant administrator account. Don't purchase a subscription yet, however!","title":"MonetizationLabSetup"},{"location":"supplemental/MonetizationLabSetup/#deploying-the-sample-app-source-simulator-and-licensing-service","text":"The lab Selling your SaaS-based Teams Extension utilizes a sample \"App Source\" (which stands in for the real App Source or the Teams app store) and a licensing service (which you would write for your own application). If you wish to install these services yourself, here are the instructions. Table of Contents (open to display \u25ba) Exercise 1: Download source code for lab Exercise 2: Deploy resources to Azure Step 1: Update ARM parameters file Step 2: Overcoming install errors Step 3: Deploy the ARM template with PowerShell Step 4: Deploy the applications to Azure Step 5: Update .env file with deployed resources. Exercise 3: Set application permissions Step 1: Return to the Northwind Orders app registration Step 2: Add permission to call the licensing application Step 2A (ONLY IF NEEDED): Add permission across tenants Step 3: Consent to the permission Exercise 4: Northwind Orders calls the licensing service Step 1: Add a server side function to validate the user has a license Step 2: Add a server side API to validate the user's license Step 3: Add client pages to display a license error Step 4: Check if the user has a license Step 5: Call the license API Exercise 5: Run the application Step 1: Run Teams without a license Step 2: \"Purchase\" a subscription and set licensing policy Step 3: Run the application in Teams Over the course of these exercises you will complete the following lab goals. Deploy the AppSource simulator and sample SaaS fulfillment and licensing service in Microsoft Azure. Observe the interactions between AppSource and a SaaS landing page in a simulated environment Connect the Northwind Orders application to the sample SaaS licensing service to enforce licenses for Microsoft Teams users","title":"Deploying the sample App Source Simulator and Licensing service"},{"location":"supplemental/MonetizationLabSetup/#features-added-in-this-lab","text":"*AppSource * simulator enabling a customer can \"purchase\" a subscription to your application Sample web service that fulfills this purchase and manages licenses for Microsoft Teams users to use the Northwind Orders application Northwind Orders application checks to ensure Microsoft Teams users are licensed or displays an error page","title":"Features added in this lab"},{"location":"supplemental/MonetizationLabSetup/#lab-prerequisites","text":"This lab requires the following prerequisites. An active Azure subscription on your own Azure tenant. An active M365 tenant, which can be the one you created in the prerequisites lab. PowerShell 7 (This is cross-platform and will run on MacOS and Linux) .NET Core 3.1 SDK (This is cross-platform and will run on MacOS and Linux) .NET Framework 4.8 Developer Pack Note If you want to run or modify these applications locally, you may find it helpful to install Visual Studio 2022 for Windows. The free Community edition will work fine. During installation, select the following modules to be added to Visual Studio. ASP.NET and web development Azure development Office/SharePoint development .NET cross-platform development","title":"Lab prerequisites"},{"location":"supplemental/MonetizationLabSetup/#install-the-prerequisites","text":"Install PowerShell 7 Install the following PowerShell modules (You will need an elevated prompt) Microsoft Graph PowerShell SDK powershell Install-Module Microsoft.Graph -AllowClobber -Force Azure Az PowerShell module powershell Install-Module -Name Az -Scope CurrentUser -Repository PSGallery -AllowClobber -Force 3. Install .NET Core 3.1 SDK 4. .NET Framework 4.8 Developer Pack","title":"Install the prerequisites"},{"location":"supplemental/MonetizationLabSetup/#exercise-1-download-source-code-for-lab","text":"To complete this lab you'll deploy the following to Azure. Northwind Web App - The Northwind SaaS application License Service Web API - An API that serves as a licensing service AppSource Simulator - An application that simulates the AppSource SQL Server and database You'll create the three applications and their supporting infrastructure using automated deployment scripts called ARM templates . Download the source code needed for these services Go to https://github.com/OfficeDev/office-add-in-saas-monetization-sample . Clone or download the project to your local machine.","title":"Exercise 1: Download source code for lab"},{"location":"supplemental/MonetizationLabSetup/#exercise-2-deploy-resources-to-azure","text":"In this exercise you will deploy resources into your Azure subscription using an ARM template. These resources will all share the same resource group. They include the three web applications and a SQL server instance with a database.","title":"Exercise 2:  Deploy resources to Azure"},{"location":"supplemental/MonetizationLabSetup/#step-1-update-arm-parameters-file","text":"In the project you just downloaded in Exercise 1, Step 2, go to folder office-add-in-saas-monetization-sample/Deployment_SaaS_Resources/ in your text editor. Open the ARMParameters.json file and note the following parameters. text - webAppSiteName - webApiSiteName - resourceMockWebSiteName - domainName - directoryId (Directory (tenant) ID) - sqlAdministratorLogin - sqlAdministratorLoginPassword - sqlMockDatabaseName - sqlSampleDatabaseName Enter a unique name for each web app and web site in the parameter list shown below because each one must have a unique name across all of Azure. All of the parameters that correspond to web apps and sites in the following list end in SiteName . Note If you need assistance findinn your domainName and directoryId , please refer to this article . Based on the subscription you are using, you may change the location where your azure resources are deployed. To change this, find the DeployTemplate.ps1 file and search for variable $location . By default it is centralus but you can change it to a region near you, such as eastus . Leave the rest of the configuration in file ARMParameters.json as is, this will be automatically filled in after scripts deploy the resources. In a Powershell 7 window, change to the ./Deployment_SaaS_Resources directory. Run the following command. You will be prompted to sign in and accept a Permissions requested dialog as shown below. powershell Connect-Graph -Scopes \"Application.ReadWrite.All, Directory.AccessAsUser.All DelegatedPermissionGrant.ReadWrite.All Directory.ReadWrite.All\" Click Accept . Once accepted, the browser will redirect and show the below message. You can close the browser and continue with the PowerShell command line. In the same PowerShell terminal window run .\\InstallApps.ps1 . Note This step adds Microsoft Graph PowerShell in Azure Active Directory under Enterprise Applications with the necessary permissions so we can create the needed applications for this particular exercise using its commands. Warning You might get an error as shown below. It depends on the execution policy settings in PowerShell. If you do get the error, move to Step 2 . If you do not get the error keep going . Copy the values from the output and later you will need these values to update the code and . env file for deploying add-ins. These values will also be pre-populated in ARMParameters.json . Do not change this file. Note how the ARMParameters.json file is now updated with the values of applications deployed. Since you did not get the PowerShell error, move to Step 3 .","title":"Step 1: Update ARM parameters file"},{"location":"supplemental/MonetizationLabSetup/#step-2-overcoming-install-errors","text":"Note This step is only needed if the previous step ended in an error. The error you experienced above is likely due to the execution policy of your PowerShell terminal. Here you will set the PowerShell execution policy to be less restrictive and then re-run the install script. You will set the execution policy to Bypass for now. Read more on execution policies here . Run below PowerShell command. powershell Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass Now re-run .\\InstallApps.ps1 The script should now run to create all three applications in Azure AD. At the end of the script, your command line should display below information.: Copy the values from the output and later you will need these values to update the code and .env file for deploying Add-ins. These values will also be pre-populated in ARMParameters.json . Do not change this file. Notice how the ARMParameters.json file is now updated with the values of applications deployed.","title":"Step 2: Overcoming install errors"},{"location":"supplemental/MonetizationLabSetup/#step-3-deploy-the-arm-template-with-powershell","text":"Open PowerShell 7 and run the Powershell command Connect-AzAccount . This will redirect you to login page. Confirm with the Global admin credentials. You will be redirected to a page displaying below. Close the browser and continue with PowerShell. You will see similar output to that shown below in your command line, if everything is okay. Run the script .\\DeployTemplate.ps1 . When prompted, enter the name of the resource group to create. Your resources will start to get deployed one after the other and you'll see the output as shown below if everything is okay. You'll get a message on the command line that the ARM Template deployment was successfully as shown below. Go to the App registrations in Azure AD in Azure portal. Use this link to navigate to it. Under All applications , filter with Display name Contoso Monetization . You should see three apps as shown in the screen below:","title":"Step 3: Deploy the ARM template with PowerShell"},{"location":"supplemental/MonetizationLabSetup/#step-4-deploy-the-applications-to-azure","text":"Here you'll deploy the server side code for the three applications. In the command line, change to the .\\MonetizationCodeSample directory. Run the script .\\PublishSaaSApps.ps1 . When prompted, enter the same resource group name you chose earlier. You will see the source code in your local machine getting built and packaged. Note You may see some warnings about file expiration, please ignore. The final messages may look like the image below.","title":"Step 4: Deploy the applications to Azure"},{"location":"supplemental/MonetizationLabSetup/#step-5-complete-the-monetization-lab","text":"At this point you should be able to complete the Selling your SaaS-based Teams Extension lab using these values in the .env file, and granting permission to the application your just registered. SAAS_API=https://(webApiSiteName).azurewebsites.net/api/Subscriptions/CheckOrActivateLicense SAAS_SCOPES=api://(webApiClientId)/user_impersonation OFFER_ID=contoso_o365_addin Replace the values <webApiSiteName> and <webApiClientId> with the values from your ARMParameters.json file. Try visiting the AppSource simulator, which is at https://(webAppSiteName).azurewebsites.net ; you should be able to log in using your tenant administrator account. Don't purchase a subscription yet, however!","title":"Step 5: Complete the monetization lab"},{"location":"supplemental/ngrokReferences/","text":"(function(c,l,a,r,i,t,y){ c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)}; t=l.createElement(r);t.async=1;t.src=\"https://www.clarity.ms/tag/\"+i; y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y); })(window, document, \"clarity\", \"script\", \"dfh6fjbr5x\"); ngrok URL reset instructions The free version of ngrok generates a new URL every time you run it, so if you put the labs aside and return to them later you will need to update the URL. This page lists all the places where the ngrok URL is used so you can return to them and update them. Following these steps, you'll need to upgrade the app in Teams with the new app package you've built so it gets the updated ngrok URL. Lab Exercise Step(s) Use A01 4 2 Redirect URL in the app registration (under \"Authentication\") A01 4 5 Application URI contains the ngrok URL A01 5 4 HOST_NAME in the .env file contains the hostname portion of the ngrok URL A01 5 5 Browse to the ngrok URL A02 2 5 Build the application package ALSO be sure to update the revision number in the app package so Teams will allow the update B01 2 3 Browse to the ngrok URL B02 3 3 HOST_NAME in the .env file contains the hostname portion of the ngrok URL B02 2 5 Build the application package Rebuild the app package AFTER fixing the ngrok URL in your .env file so the new package includes the updated URL. ALSO be sure to update the revision number in the app package so Teams will allow the update B03 1 1 Redirect URL in the app registration (under \"Authentication\") B03 1 3 Application URI contains the ngrok URL Message extension 1 2 Application URI contains the ngrok URL","title":"ngrokReferences"},{"location":"supplemental/ngrokReferences/#ngrok-url-reset-instructions","text":"The free version of ngrok generates a new URL every time you run it, so if you put the labs aside and return to them later you will need to update the URL. This page lists all the places where the ngrok URL is used so you can return to them and update them. Following these steps, you'll need to upgrade the app in Teams with the new app package you've built so it gets the updated ngrok URL. Lab Exercise Step(s) Use A01 4 2 Redirect URL in the app registration (under \"Authentication\") A01 4 5 Application URI contains the ngrok URL A01 5 4 HOST_NAME in the .env file contains the hostname portion of the ngrok URL A01 5 5 Browse to the ngrok URL A02 2 5 Build the application package ALSO be sure to update the revision number in the app package so Teams will allow the update B01 2 3 Browse to the ngrok URL B02 3 3 HOST_NAME in the .env file contains the hostname portion of the ngrok URL B02 2 5 Build the application package Rebuild the app package AFTER fixing the ngrok URL in your .env file so the new package includes the updated URL. ALSO be sure to update the revision number in the app package so Teams will allow the update B03 1 1 Redirect URL in the app registration (under \"Authentication\") B03 1 3 Application URI contains the ngrok URL Message extension 1 2 Application URI contains the ngrok URL","title":"ngrok URL reset instructions"}]}